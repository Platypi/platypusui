/* tslint:disable */
/**
 * PlatypusTS v0.10.2 (http://getplatypi.com) 
 * Copyright 2014 Platypi, LLC. All rights reserved. 
 * PlatypusTS is licensed under the GPL-3.0 found at  
 * http://opensource.org/licenses/GPL-3.0 
 */
    /**
     * The entry point into the platypus library.
     */
module plat {
    'use strict;'
    /* tslint:disable:no-unused-variable */
    /*
     * Injectables
     */
    var __prefix = '$',
        __CONTEXT = 'context',
        __AppStatic = __prefix + 'AppStatic',
        __App = __prefix + 'App',
        __Http = __prefix + 'Http',
        __HttpConfig = __prefix + 'HttpConfig',
        __Promise = __prefix + 'Promise',
        __Compat = __prefix + 'Compat',
        __ControlFactory = __prefix + 'ControlFactory',
        __AttributeControlFactory = __prefix + 'AttributeControlFactory',
        __Document = __prefix + 'Document',
        __DispatchEventInstance = __prefix + 'DispatchEventInstance',
        __ErrorEventStatic = __prefix + 'ErrorEventStatic',
        __EventManagerStatic = __prefix + 'EventManagerStatic',
        __LifecycleEventStatic = __prefix + 'LifecycleEventStatic',
        __ExceptionStatic = __prefix + 'ExceptionStatic',
        __Parser = __prefix + 'Parser',
        __Regex = __prefix + 'Regex',
        __Tokenizer = __prefix + 'Tokenizer',
        __NavigatorInstance = __prefix + 'NavigatorInstance',
        __ContextManagerStatic = __prefix + 'ContextManagerStatic',
        __Compiler = __prefix + 'Compiler',
        __CommentManagerFactory = __prefix + 'CommentManagerFactory',
        __ElementManagerFactory = __prefix + 'ElementManagerFactory',
        __NodeManagerStatic = __prefix + 'NodeManagerStatic',
        __TextManagerFactory = __prefix + 'TextManagerFactory',
        __CacheFactory = __prefix + 'CacheFactory',
        __ManagerCache = __prefix + 'ManagerCache',
        __TemplateCache = __prefix + 'TemplateCache',
        __Animator = __prefix + 'Animator',
        __AttributesInstance = __prefix + 'AttributesInstance',
        __BindableTemplatesFactory = __prefix + 'BindableTemplatesFactory',
        __Dom = __prefix + 'Dom',
        __DomEvents = __prefix + 'DomEvents',
        __IDomEventsConfig = __prefix + 'IDomEventsConfig',
        __DomEventInstance = __prefix + 'DomEventInstance',
        __ResourcesFactory = __prefix + 'ResourcesFactory',
        __TemplateControlFactory = __prefix + 'TemplateControlFactory',
        __Utils = __prefix + 'Utils',
        __Browser = __prefix + 'Browser',
        __BrowserConfig = __prefix + 'BrowserConfig',
        __Router = __prefix + 'Router',
        __RouterStatic = __prefix + 'RouterStatic',
        __UrlUtilsInstance = __prefix + 'UrlUtilsInstance',
        __Window = __prefix + 'Window',
        __LocalStorage = __prefix + 'LocalStorage',
        __SessionStorage = __prefix + 'SessionStorage',
        __Geolocation = __prefix + 'Geolocation',
        __BaseSegmentFactory = __prefix + 'BaseSegmentFactory',
        __BaseSegmentInstance = __prefix + 'BaseSegmentInstance',
        __StaticSegmentInstance = __prefix + 'StaticSegmentInstance',
        __VariableSegmentInstance = __prefix + 'VariableSegmentInstance',
        __DynamicSegmentInstance = __prefix + 'DynamicSegmentInstance',
        __SplatSegmentInstance = __prefix + 'SplatSegmentInstance',
        __StateStatic = __prefix + 'StateStatic',
        __StateInstance = __prefix + 'StateInstance',
        __RouteRecognizerInstance = __prefix + 'RouteRecognizerInstance',
        __InjectorStatic = __prefix + 'InjectorStatic',
        __History = __prefix + 'History',
        __Location = __prefix + 'Location',
    
        /**
         * Controls
         */
        __Plat = 'plat-',
        __Bind = __Plat + 'bind',
        __Href = __Plat + 'href',
        __Src = __Plat + 'src',
        __KeyDown = __Plat + 'keydown',
        __KeyPress = __Plat + 'keypress',
        __KeyUp = __Plat + 'keyup',
        __Name = __Plat + 'name',
        __Options = __Plat + 'options',
        __Checked = __Plat + 'checked',
        __Disabled = __Plat + 'disabled',
        __Selected = __Plat + 'selected',
        __ReadOnly = __Plat + 'readonly',
        __Visible = __Plat + 'visible',
        __Style = __Plat + 'style',
        __Tap = __Plat + 'tap',
        __Blur = __Plat + 'blur',
        __Change = __Plat + 'change',
        __Copy = __Plat + 'copy',
        __Cut = __Plat + 'cut',
        __Paste = __Plat + 'paste',
        __DblTap = __Plat + 'dbltap',
        __Focus = __Plat + 'focus',
        __Submit = __Plat + 'submit',
        __TouchStart = __Plat + 'touchstart',
        __TouchEnd = __Plat + 'touchend',
        __TouchMove = __Plat + 'touchmove',
        __TouchCancel = __Plat + 'touchcancel',
        __Hold = __Plat + 'hold',
        __Release = __Plat + 'release',
        __Swipe = __Plat + 'swipe',
        __SwipeLeft = __Plat + 'swipeleft',
        __SwipeRight = __Plat + 'swiperight',
        __SwipeUp = __Plat + 'swipeup',
        __SwipeDown = __Plat + 'swipedown',
        __Track = __Plat + 'track',
        __TrackLeft = __Plat + 'trackleft',
        __TrackRight = __Plat + 'trackright',
        __TrackUp = __Plat + 'trackup',
        __TrackDown = __Plat + 'trackdown',
        __TrackEnd = __Plat + 'trackend',
        __React = __Plat + 'react',
        __Link = __Plat + 'link',
        __ForEach = __Plat + 'foreach',
        __Html = __Plat + 'html',
        __If = __Plat + 'if',
        __Ignore = __Plat + 'ignore',
        __Select = __Plat + 'select',
        __Template = __Plat + 'template',
        __Routeport = __Plat + 'routeport',
        __Viewport = __Plat + 'viewport',
        __Control = __Plat + 'control',
        __ViewControl = __Plat + 'viewcontrol',
        __Resources = __Plat + 'resources',
        __Context = __Plat + __CONTEXT,
        __Callback = __Plat + 'callback',
        __AttributePrefix = 'data-',
    
        /**
         * Control Properties
         */
        __TemplateControlCache = '__templateControlCache',
    
        /**
         * Lifecycle events
         */
        __ready = 'ready',
        __suspend = 'suspend',
        __resume = 'resume',
        __online = 'online',
        __offline = 'offline',
        __error = 'error',
        __shutdown = 'shutdown',
        __exiting = 'exiting',
        __beforeLoad = 'beforeLoad',
    
        /**
         * Navigation events
         */
        __beforeNavigate = 'beforeNavigate',
        __navigated = 'navigated',
        __navigating = 'navigating',
        __beforeRouteChange = 'beforeRouteChange',
        __routeChanged = 'routeChanged',
        __urlChanged = 'urlChanged',
    
        /**
         * Device events
         */
        __pause = 'pause',
        __deviceReady = 'deviceReady',
        __backButton = 'backbutton',
        __backClick = 'backclick',
        __backButtonPressed = 'backButtonPressed',
    
        /**
         * Animations
         */
        __Hide = __Plat + 'hide',
        __Animating = __Plat + 'animating',
        __SimpleAnimation = __Plat + 'animation',
        __SimpleTransition = __Plat + 'transition',
        __Enter = __Plat + 'enter',
        __Leave = __Plat + 'leave',
        __Move = __Plat + 'move',
        __FadeIn = __Plat + 'fadein',
        __FadeOut = __Plat + 'fadeout',
    
        /**
         * Custom DOM events
         */
        __event_prefix = '$',
        __tap = __event_prefix + 'tap',
        __dbltap = __event_prefix + 'dbltap',
        __touchstart = __event_prefix + 'touchstart',
        __touchend = __event_prefix + 'touchend',
        __touchmove = __event_prefix + 'touchmove',
        __touchcancel = __event_prefix + 'touchcancel',
        __hold = __event_prefix + 'hold',
        __release = __event_prefix + 'release',
        __swipe = __event_prefix + 'swipe',
        __swipeleft = __event_prefix + 'swipeleft',
        __swiperight = __event_prefix + 'swiperight',
        __swipeup = __event_prefix + 'swipeup',
        __swipedown = __event_prefix + 'swipedown',
        __track = __event_prefix + 'track',
        __trackleft = __event_prefix + 'trackleft',
        __trackright = __event_prefix + 'trackright',
        __trackup = __event_prefix + 'trackup',
        __trackdown = __event_prefix + 'trackdown',
        __trackend = __event_prefix + 'trackend',
    
        /**
         * Errors
         */
        __errorSuffix = 'Error',
        __platError = 'Plat' + __errorSuffix,
        __parseError = 'Parsing' + __errorSuffix,
        __bindError = 'Binding' + __errorSuffix,
        __compileError = 'Compiling' + __errorSuffix,
        __nameError = 'PlatName' + __errorSuffix,
        __navigationError = 'Navigating' + __errorSuffix,
        __templateError = 'Templating' + __errorSuffix,
        __contextError = 'Context' + __errorSuffix,
        __eventError = 'DispatchEvent' + __errorSuffix,
        __injectableError = 'Injectable' + __errorSuffix,
        __CompatError = 'Compatibility' + __errorSuffix,
    
        /**
         * ForEach aliases
         */
        __forEachAliasOptions = {
            index: 'index',
            even: 'even',
            odd: 'odd',
            first: 'first',
            last: 'last'
        },
    
        /**
         * Routing
         */
        __BASE_SEGMENT_TYPE = 'base',
        __VARIABLE_SEGMENT_TYPE = 'variable',
        __STATIC_SEGMENT_TYPE = 'static',
        __SPLAT_SEGMENT_TYPE = 'splat',
        __DYNAMIC_SEGMENT_TYPE = 'dynamic',
    
        /**
         * Constants
         */
        __startSymbol = '{{',
        __endSymbol = '}}',
        __STATIC = 'static',
        __SINGLETON = 'singleton',
        __INSTANCE = 'instance',
        __FACTORY = 'factory',
        __CLASS = 'class',
        __CSS = 'css',
        __COMPILED = '-compiled',
        __BOUND_PREFIX = '-@',
        __END_SUFFIX = '-end',
        __START_NODE = ': start node',
        __END_NODE = ': end node',
        __POPSTATE = 'popstate',
        __HASHCHANGE = 'hashchange',
        __WRAPPED_INJECTOR = 'wrapped',
        __JSONP_CALLBACK = 'plat_callback',
        __JS = 'js',
        __NOOP_INJECTOR = 'noop',
        __APP = '__app__',
        __RESOURCE = 'resource',
        __RESOURCES = __RESOURCE + 's',
        __ALIAS = 'alias',
        __ALIASES = __ALIAS + 'es',
        __OBSERVABLE_RESOURCE = 'observable',
        __INJECTABLE_RESOURCE = 'injectable',
        __OBJECT_RESOURCE = 'object',
        __FUNCTION_RESOURCE = 'function',
        __LITERAL_RESOURCE = 'literal',
        __ROOT_RESOURCE = 'root',
        __ROOT_CONTEXT_RESOURCE = 'rootContext',
        __CONTROL_RESOURCE = 'control',
        __CONTEXT_RESOURCE = __CONTEXT;
    /* tslint:enable:no-unused-variable */
    
    /* tslint:disable:no-unused-variable */
    var _nativeIsArray = !!Array.isArray,
        _uids: plat.IObject<Array<string>> = {},
        _Promise: plat.async.IPromise,
        _compat: plat.Compat,
        _camelCaseRegex: RegExp,
        _objToString = Object.prototype.toString,
        _toStringClass = '[object ',
        _errorClass = _toStringClass + 'Error]',
        _fileClass = _toStringClass + 'File]',
        _arrayClass = _toStringClass + 'Array]',
        _boolClass = _toStringClass + 'Boolean]',
        _dateClass = _toStringClass + 'Date]',
        _funcClass = _toStringClass + 'Function]',
        _numberClass = _toStringClass + 'Number]',
        _objectClass = _toStringClass + 'Object]',
        _regexpClass = _toStringClass + 'RegExp]',
        _stringClass = _toStringClass + 'String]',
        _promiseClass = _toStringClass + 'Promise]',
        _objectTypes: any = {
            'boolean': false,
            'function': true,
            'object': true,
            'number': false,
            'string': false,
            'undefined': false
        };
    
    function noop(): void { }
    
    function extend(destination: any, ...sources: any[]): any {
        if (isNull(destination)) {
            return destination;
        }
    
        var deep = isBoolean(destination);
    
        if (deep) {
            destination = sources.shift();
        }
    
        var keys: Array<string>,
            property: any;
    
        forEach((source, k) => {
            if (!isObject(source)) {
                return;
            }
    
            keys = Object.keys(source);
    
            forEach((key) => {
                property = source[key];
                if (deep) {
                    if (isArray(property)) {
                        extend(deep, destination[key] || (destination[key] = []), property);
                        return;
                    } else if (isDate(property)) {
                        destination[key] = new Date(property.getTime());
                        return;
                    } else if (isRegExp(property)) {
                        destination[key] = new RegExp(property);
                        return;
                    } else if (isNode(property)) {
                        destination[key] = (<Node>property).cloneNode(true);
                        return;
                    } else if (isObject(property)) {
                        extend(deep, destination[key] || (destination[key] = {}), property);
                        return;
                    }
                }
                destination[key] = property;
            }, keys);
        }, sources);
    
        return destination;
    }
    
    function deepExtend(destination: any, ...sources: any[]): any {
        return extend.apply(null, [true, destination].concat(sources));
    }
    
    function _clone(obj: any, deep?: boolean) {
        if (!isObject(obj)) {
            return obj;
        } else if (isDate(obj)) {
            return new Date((<Date>obj).getTime());
        } else if (isRegExp(obj)) {
            return new RegExp(obj);
        } else if (isNode(obj)) {
            return (<Node>obj).cloneNode(deep);
        } else if (isError(obj)) {
            return new obj.constructor((<Error>obj).message);
        }
    
        var type = {};
    
        if (isArray(obj)) {
            type = [];
        }
    
        if (isBoolean(deep) && deep) {
            return deepExtend(type, obj);
        }
    
        return extend(type, obj);
    }
    
    function isError(obj: any): boolean {
        return _objToString.call(obj) === _errorClass;
    }
    
    function isObject(obj: any): boolean {
        return obj != null && typeof obj === 'object';
    }
    
    function isWindow(obj: any): boolean {
        return !!(obj && obj.document && obj.setInterval);
    }
    
    function isDocument(obj: any): boolean {
        return !!(obj && obj.nodeType === Node.DOCUMENT_NODE);
    }
    
    function isNode(obj: any): boolean {
        return !!(obj && typeof obj.nodeType === 'number');
    }
    
    function isDocumentFragment(obj: any): boolean {
        return !!(obj && (<Node>obj).nodeType === Node.DOCUMENT_FRAGMENT_NODE);
    }
    
    function isFile(obj: any): boolean {
        return isObject(obj) && _objToString.call(obj) === _fileClass;
    }
    
    function isString(obj: any): boolean {
        return typeof obj === 'string' || isObject(obj) && _objToString.call(obj) === _stringClass;
    }
    
    function isRegExp(obj: any): boolean {
        return isObject(obj) && _objToString.call(obj) === _regexpClass;
    }
    
    function isPromise(obj: any): boolean {
        return isObject(obj) && (_objToString.call(obj) === _promiseClass || isFunction(obj.then));
    }
    
    function isEmpty(obj: any): boolean {
        if (isNull(obj)) {
            return true;
        }
    
        if (isString(obj) || isArray(obj)) {
            return obj.length === 0;
        }
    
        if (!isObject(obj)) {
            return false;
        }
    
        return Object.keys(obj).length === 0;
    }
    
    function isBoolean(obj: any): boolean {
        return obj === true || obj === false || isObject(obj) && _objToString.call(obj) === _boolClass;
    }
    
    function isNumber(obj: any): boolean {
        return (typeof obj === 'number' || isObject(obj) && _objToString.call(obj) === _numberClass) && !isNaN(obj);
    }
    
    function isFunction(obj: any): boolean {
        return typeof obj === 'function';
    }
    
    function isNull(obj: any): boolean {
        return obj === null || obj === undefined;
    }
    
    function isUndefined(obj: any): boolean {
        return obj === undefined;
    }
    
    function isArray(obj: any): boolean {
        if (_nativeIsArray) {
            return Array.isArray(obj);
        }
    
        return _objToString.call(obj) === _arrayClass;
    }
    
    function isArrayLike(obj: any): boolean {
        if (isNull(obj) || isWindow(obj) || isFunction(obj)) {
            return false;
        }
    
        return isString(obj) || obj.length >= 0;
    }
    
    function isDate(obj: any): boolean {
        return typeof obj === 'object' && _objToString.call(obj) === _dateClass;
    }
    
    function filter<T>(iterator: (value: T, key: any, obj: any) => boolean, obj: any, context?: any): Array<T> {
        var arr: Array<T> = [];
        if (isNull(obj)) {
            return arr;
        }
    
        if (isFunction(obj.filter)) {
            return obj.filter(iterator, context);
        }
    
        forEach<T>((value: T, key: any, obj: any) => {
            if (iterator(value, key, obj)) {
                arr.push(value);
            }
        }, obj);
    
        return arr;
    }
    
    function where(properties: any, obj: any): Array<any> {
        return filter((value)
            => !some((property, key)
                => (<any>value)[key] !== property, properties), obj);
    }
    
    function forEach<T>(iterator: (value: T, index: number, obj: any) => void, array: Array<T>, context?: any): Array<T>;
    function forEach<T>(iterator: (value: T, key: string, obj: any) => void, obj: any, context?: any): any;
    function forEach<T>(iterator: (value: T, key: any, obj: any) => void, obj: any, context?: any): any {
        if (isNull(obj) || !(isObject(obj) || isArrayLike(obj))) {
            return obj;
        }
    
        var i: number,
            key: string,
            length: number;
    
        if (isFunction(obj.forEach)) {
            return obj.forEach(iterator, context);
        } else if (isArrayLike(obj)) {
            for (i = 0, length = obj.length; i < length; ++i) {
                iterator.call(context, obj[i], i, obj);
            }
        } else {
            var keys = Object.keys(obj);
            length = keys.length;
            while (keys.length > 0) {
                key = keys.shift();
                iterator.call(context, obj[key], key, obj);
            }
        }
    
        return obj;
    }
    
    function map<T, R>(iterator: (value: T, key: any, obj: any) => R, obj: any, context?: any): Array<R> {
        var arr: Array<R> = [];
    
        if (isNull(obj)) {
            return arr;
        }
    
        if (isFunction(obj.map)) {
            return obj.map(iterator, context);
        }
    
        forEach((value, key) => {
            arr.push(iterator.call(context, value, key, obj));
        }, obj);
    
        return arr;
    }
    
    function mapAsync<T, R>(iterator: (value: T, key: any, obj: any) => plat.async.IThenable<R>, obj: any,
        context?: any): plat.async.IThenable<Array<R>> {
        _Promise = _Promise || plat.acquire(__Promise);
    
        return _Promise.all(map(iterator, obj, context));
    }
    
    function mapAsyncWithOrder<T, R>(iterator: (value: T, index: number, list: Array<T>) => plat.async.IThenable<R>,
        array: Array<T>, context: any, descending?: boolean): plat.async.IThenable<Array<R>> {
        _Promise = _Promise || plat.acquire(__Promise);
        var initialValue = _Promise.resolve<Array<R>>([]);
    
        if (!isArray(array)) {
            return initialValue;
        }
    
        iterator = iterator.bind(context);
    
        var promise: plat.async.IThenable<Array<R>>,
            inOrder = (previousValue: plat.async.IThenable<Array<R>>, nextValue: T, nextIndex: number,
                array: Array<T>): plat.async.IThenable<Array<R>> => {
                return previousValue.then((items) => {
                    return iterator(nextValue, nextIndex, array).then((moreItems) => {
                        return items.concat(moreItems);
                    });
                });
            };
    
        if (descending === true) {
            return array.reduceRight(inOrder, initialValue);
        }
    
        return array.reduce(inOrder, initialValue);
    }
    
    function mapAsyncInOrder<T, R>(iterator: (value: T, index: number, list: Array<T>) => plat.async.IThenable<R>,
        array: Array<T>, context?: any): plat.async.IThenable<Array<R>> {
        return mapAsyncWithOrder(iterator, array, context);
    }
    
    function mapAsyncInDescendingOrder<T, R>(iterator: (value: T, index: number, list: Array<T>) => plat.async.IThenable<R>,
        array: Array<T>, context?: any): plat.async.IThenable<Array<R>> {
        return mapAsyncWithOrder(iterator, array, context, true);
    }
    
    function pluck<T, U>(key: string, obj: any): Array<U> {
        return map<T, U>((value) => (<any>value)[key], obj);
    }
    
    function some<T>(iterator: (value: T, key: any, obj: any) => boolean, obj: any, context?: any): boolean {
        if (isNull(obj) || isFunction(obj)) {
            return false;
        }
    
        var i: number,
            key: string,
            length: number,
            ret: boolean;
    
        if (isFunction(obj.some)) {
            return obj.some(iterator, context);
        } else if (isArrayLike(obj)) {
            for (i = 0, length = obj.length; i < length; ++i) {
                ret = iterator.call(context, obj[i], i, obj);
                if (ret === true) {
                    return true;
                }
            }
        } else {
            var keys = Object.keys(obj);
            length = keys.length;
            while (keys.length > 0) {
                key = keys.shift();
                ret = iterator.call(context, obj[key], key, obj);
                if (ret === true) {
                    return true;
                }
            }
        }
    
        return false;
    }
    
    function postpone(method: (...args: any[]) => void, args?: Array<any>, context?: any): plat.IRemoveListener {
        return defer(method, 0, args, context);
    }
    
    function defer(method: (...args: any[]) => void, timeout: number, args?: Array<any>, context?: any): plat.IRemoveListener {
        function defer() {
            method.apply(context, args);
        }
    
        var timeoutId = setTimeout(defer, timeout);
        return () => {
            clearTimeout(timeoutId);
        };
    }
    
    function requestAnimationFrameGlobal(method: FrameRequestCallback, context?: any): plat.IRemoveListener {
        _compat = _compat || (plat.acquire(__Compat));
    
        var requestAnimFrame = _compat.requestAnimationFrame;
        if (isUndefined(requestAnimFrame)) {
            return postpone(() => {
                method.call(context, Date.now());
            });
        }
    
        var animationId = requestAnimFrame(method.bind(context)),
            cancelAnimFrame = _compat.cancelAnimationFrame || noop;
    
        return () => {
            cancelAnimFrame(animationId);
        };
    }
    
    function uniqueId(prefix?: string): string {
        if (isNull(prefix)) {
            prefix = '';
        }
    
        var puid = _uids[prefix];
    
        if (isNull(puid)) {
            puid = _uids[prefix] = ['0', '/'];
        }
    
        var index = puid.length,
            charCode: number;
    
        while (index--) {
            charCode = puid[index].charCodeAt(0);
            // '9'
            if (charCode === 57) {
                puid[index] = 'A';
                return join();
            }
    
            // 'Z'
            if (charCode === 90) {
                puid[index] = 'a';
                return join();
            }
    
            // 'z'
            if (charCode === 122) {
                puid[index] = '0';
            } else {
                puid[index] = String.fromCharCode(charCode + 1);
                return join();
            }
        }
    
        puid.unshift('0');
    
        function join(): string {
            return prefix + puid.join('');
        }
    
        return join();
    }
    
    function camelCase(str: string): string {
        if (!isString(str) || isEmpty(str)) {
            return str;
        }
    
        str = str.charAt(0).toLowerCase() + str.slice(1);
        _camelCaseRegex = _camelCaseRegex || (<plat.expressions.Regex>plat.acquire(__Regex)).camelCaseRegex;
    
        return str.replace(_camelCaseRegex,
            (match: string, delimiter?: string, char?: string, index?: number)
                => index ? char.toUpperCase() : char);
    }
    
    function deleteProperty(obj: any, property: number): any;
    function deleteProperty(obj: any, property: string): any;
    function deleteProperty(obj: any, property: any): any {
        if (!isNull(obj)) {
            /* tslint:disable:no-unused-expression */
            delete obj[property];
            /* tslint:enable:no-unused-expression */
        }
    
        return obj;
    }
    
    function access(obj: any, property: number): any;
    function access(obj: any, property: string): any;
    function access(obj: any, property: any): any {
        if (isNull(obj)) {
            return obj;
        }
        return obj[property];
    }
    
    function deserializeQuery(search: string) {
        if (isEmpty(search)) {
            return;
        }
    
        var split = search.split('&'),
            query: plat.IObject<string> = {},
            length = split.length,
            item: Array<string>;
    
        for (var i = 0; i < length; ++i) {
            item = split[i].split('=');
    
            query[item[0]] = item[1];
        }
    
        return query;
    }
    
    function serializeQuery(query: plat.IObject<string>): string {
        return (isArray(query) || isObject(query)) && !isEmpty(query) ? '?' + map((value, key) => {
            return key + '=' + value;
        }, query).join('&') : '';
    }
    
    function booleanReduce(values: Array<boolean>): boolean {
        if (!isArray(values)) {
            return isBoolean(values) ? <any>values : true;
        }
    
        return values.reduce((prev: boolean, current: boolean) => {
            return prev && current !== false;
        }, true);
    }
    
    /* tslint:enable:no-unused-variable */
    
    /* tslint:disable:no-unused-variable */
    var __nodeNameRegex = /<([\w:]+)/,
        __whiteSpaceRegex = /\s+/g,
        __option = [1, '<select multiple="multiple">', '</select>'],
        __table = [1, '<table>', '</table>'],
        __tableData = [3, '<table><tbody><tr>', '</tr></tbody></table>'],
        __svg = [1, '<svg xmlns="http://www.w3.org/2000/svg" version="1.1">', '</svg>'],
        __innerTableWrappers: plat.IObject<Array<any>> = {
            thead: __table,
            tbody: __table,
            tfoot: __table,
            colgroup: __table,
            caption: __table,
            tr: [2, '<table><tbody>', '</tbody></table>'],
            col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
            td: __tableData,
            th: __tableData
        },
        __innerHtmlWrappers: plat.IObject<Array<any>> = extend({}, __innerTableWrappers, {
            option: __option,
            optgroup: __option,
            legend: [1, '<fieldset>', '</fieldset>'],
            area: [1, '<map>', '</map>'],
            param: [1, '<object>', '</object>'],
            text: __svg,
            circle: __svg,
            ellipse: __svg,
            line: __svg,
            path: __svg,
            polygon: __svg,
            polyline: __svg,
            rect: __svg,
            _default: [0, '', '']
        });
    
    function appendChildren(nodeList: any, root?: Node): Node {
        var isFragment = isDocumentFragment(root),
            nullRoot = isNull(root),
            fragment: DocumentFragment = isFragment ?
            <DocumentFragment>root :
            (plat.acquire(__Document)).createDocumentFragment();
    
        if (nullRoot) {
            root = fragment;
        }
    
        var list: Array<Node>;
    
        if (isFunction(nodeList.push)) {
            list = nodeList;
        } else {
            list = Array.prototype.slice.call(nodeList);
        }
    
        while (list.length > 0) {
            fragment.insertBefore(list.shift(), null);
        }
    
        if (!(isFragment || nullRoot)) {
            root.appendChild(fragment);
        }
    
        return root;
    }
    
    function clearNode(node: Node): void {
        var childNodes = Array.prototype.slice.call(node.childNodes);
    
        while (childNodes.length > 0) {
            node.removeChild(childNodes.pop());
        }
    }
    
    function clearNodeBlock(nodeList: any, parent: Node): void {
        if (!isFunction(nodeList.push)) {
            nodeList = Array.prototype.slice.call(nodeList);
        }
    
        if (!isNull(parent)) {
            clearNodeBlockWithParent(nodeList, parent);
            return;
        }
    
        var node: Node;
    
        while (nodeList.length > 0) {
            node = nodeList.pop();
            parent = node.parentNode;
    
            if (isNull(parent)) {
                continue;
            }
    
            parent.removeChild(node);
        }
    }
    
    function clearNodeBlockWithParent(nodeList: Array<Node>, parent: Node): void {
        while (nodeList.length > 0) {
            parent.removeChild(nodeList.pop());
        }
    }
    
    function stringToNode(html: string): Node {
        var _compat: plat.Compat = plat.acquire(__Compat),
            _document: Document = plat.acquire(__Document),
            nodeName = __nodeNameRegex.exec(html),
            element = <HTMLElement>_document.createElement('div');
    
        if (isNull(nodeName)) {
            element = innerHtml(element, html);
            return element.removeChild(element.lastChild);
        }
    
        // trim html string
        html = html.trim();
    
        var mapTag = nodeName[1];
    
        if (_compat.pushState && isUndefined(__innerTableWrappers[mapTag])) {
            return innerHtml(element, html);
        } else if (mapTag === 'body') {
            element = innerHtml(_document.createElement('html'), html);
            return element.removeChild(element.lastChild);
        }
    
        var wrapper = __innerHtmlWrappers[mapTag] || (<any>__innerHtmlWrappers)._default,
            depth = wrapper[0],
            parentStart = wrapper[1],
            parentEnd = wrapper[2];
    
        element = innerHtml(element, parentStart + html + parentEnd);
    
        while (depth-- > 0) {
            element = <HTMLElement>element.lastChild;
        }
    
        return element;
    }
    
    function setInnerHtml(node: Node, html: string): Node {
        clearNode(node);
    
        if (isEmpty(html)) {
            return;
        }
    
        var element = stringToNode(html);
    
        if (element.childNodes.length > 0) {
            appendChildren(element.childNodes, node);
        } else {
            node.insertBefore(element, null);
        }
    
        return node;
    }
    
    function insertBefore(parent: Node, nodes: any, endNode?: Node): Array<Node> {
        if (isNull(parent) || !isObject(nodes)) {
            return;
        } else if (isUndefined(endNode)) {
            endNode = null;
        }
    
        var fragment: DocumentFragment;
    
        if (isNode(nodes)) {
            fragment = nodes;
    
            nodes = Array.prototype.slice.call(fragment.childNodes);
            parent.insertBefore(fragment, endNode);
    
            return nodes;
        }
    
        if (!isFunction(nodes.push)) {
            nodes = Array.prototype.slice.call(nodes);
        }
    
        var _document = plat.acquire(__Document),
            length = nodes.length;
    
        fragment = _document.createDocumentFragment();
    
        for (var i = 0; i < length; ++i) {
            fragment.insertBefore(nodes[i], null);
        }
    
        parent.insertBefore(fragment, endNode);
    
        return nodes;
    }
    
    function replace(node: Node): Array<Node> {
        var parent = node.parentNode,
            nodes = insertBefore(parent, node.childNodes, node);
    
        parent.removeChild(node);
    
        return nodes;
    }
    
    function replaceWith(node: Node, newNode: HTMLElement): HTMLElement;
    function replaceWith(node: Node, newNode: Element): Element;
    function replaceWith(node: Node, newNode: Node): Node;
    function replaceWith(node: any, newNode: any): any {
        if (isNull(newNode)) {
            return newNode;
        }
    
        if (node.nodeType === Node.ELEMENT_NODE) {
            var attributes = node.attributes,
                length = attributes.length,
                attribute: Attr;
    
            for (var i = 0; i < length; ++i) {
                attribute = attributes[i];
                newNode.setAttribute(attribute.name, attribute.value);
            }
        }
    
        var parent = node.parentNode;
    
        insertBefore(newNode, node.childNodes);
        parent.replaceChild(newNode, node);
    
        return newNode;
    }
    
    function serializeHtml(html?: string): DocumentFragment {
        var _document = plat.acquire(__Document),
            templateElement = _document.createDocumentFragment();
    
        if (!isEmpty(html)) {
            setInnerHtml(templateElement, html);
        }
    
        return templateElement;
    }
    
    function removeBetween(startNode: Node, endNode?: Node): void {
        if (isNull(startNode)) {
            return;
        }
    
        var currentNode = startNode.nextSibling,
            parentNode = startNode.parentNode,
            tempNode: Node;
    
        if (isNull(endNode)) {
            endNode = null;
        }
    
        if (isNull(parentNode) || (!isNull(endNode) && endNode.parentNode !== parentNode)) {
            return;
        }
    
        while (currentNode !== endNode) {
            tempNode = currentNode.nextSibling;
            parentNode.removeChild(currentNode);
            currentNode = tempNode;
        }
    }
    
    function removeAll(startNode: Node, endNode?: Node): void {
        if (isNull(startNode)) {
            return;
        }
    
        removeBetween(startNode, endNode);
    
        removeNode(startNode);
        removeNode(endNode);
    }
    
    /**
     * Safely sets innerHTML of an element. Uses MSApp.execUnsafeLocalFunction if 
     * available.
     */
    function innerHtml(element: HTMLElement, html: string): HTMLElement {
        var _compat: plat.Compat = plat.acquire(__Compat);
    
        if (_compat.msApp) {
            MSApp.execUnsafeLocalFunction(() => {
                element.innerHTML = html;
            });
        } else {
            element.innerHTML = html;
        }
    
        return element;
    }
    
    function removeNode(node: Node): void {
        if (isNull(node)) {
            return;
        }
    
        var parentNode = node.parentNode;
    
        if (!isNull(parentNode)) {
            node.parentNode.removeChild(node);
        }
    }
    
    function addClass(element: HTMLElement, className: string): void {
        var cName = (element || <HTMLElement>{}).className;
        if (!isString(cName) || !isString(className) || className === '') {
            return;
        }
    
        var split = className.split(__whiteSpaceRegex),
            name: string,
            classNameRegex: RegExp;
        if (isUndefined(element.classList)) {
            if (isEmpty(cName)) {
                element.className = className;
                return;
            }
    
            while (split.length > 0) {
                name = split.shift();
                if (name !== '') {
                    classNameRegex = new RegExp('^' + name + '\\s+|\\s+' + name + '$|\\s+' + name + '\\s+', 'g');
                    if (!classNameRegex.test(cName)) {
                        element.className += ' ' + name;
                    }
                }
            }
            return;
        }
    
        while (split.length > 0) {
            name = split.shift();
            if (name !== '') {
                element.classList.add(name);
            }
        }
    }
    
    function removeClass(element: HTMLElement, className: string): void {
        var cName = (element || <HTMLElement>{}).className;
        if (!isString(cName) || !isString(className) || className === '') {
            return;
        }
    
        var split = className.split(__whiteSpaceRegex),
            name: string;
        if (isUndefined(element.classList)) {
            if (cName === className) {
                element.className = '';
                return;
            }
    
            while (split.length > 0) {
                name = split.shift();
                if (name !== '') {
                    element.className = cName = cName
                        .replace(new RegExp('^' + name + '\\s+|\\s+' + name + '$|\\s+' + name + '\\s+', 'g'), '');
                }
            }
            return;
        }
    
        while (split.length > 0) {
            name = split.shift();
            if (name !== '') {
                element.classList.remove(name);
            }
        }
    }
    
    function toggleClass(element: HTMLElement, className: string): void {
        var cName = (element || <HTMLElement>{}).className;
        if (!isString(cName) || !isString(className) || className === '') {
            return;
        }
    
        var split = className.split(__whiteSpaceRegex),
            name: string;
        if (isUndefined(element.classList)) {
            var classNameRegex: RegExp;
            if (cName === '') {
                element.className = className;
            } else if (cName === className) {
                element.className = '';
                return;
            }
    
            while (split.length > 0) {
                name = split.shift();
                if (name !== '') {
                    classNameRegex = new RegExp('^' + name + '\\s+|\\s+' + name + '$|\\s+' + name + '\\s+', 'g');
                    if (classNameRegex.test(cName)) {
                        element.className = cName = cName.replace(classNameRegex, '');
                        continue;
                    }
    
                    element.className += ' ' + name;
                }
            }
            return;
        }
    
        while (split.length > 0) {
            name = split.shift();
            if (name !== '') {
                element.classList.toggle(name);
            }
        }
    }
    
    function replaceClass(element: HTMLElement, oldClass: string, newClass: string): void {
        var cName = (element || <HTMLElement>{}).className;
        if (!isString(cName) || !isString(newClass) || newClass === '') {
            return;
        }
    
        var startRegex = new RegExp('^' + oldClass + '\\s+', 'g'),
            midRegex = new RegExp('\\s+' + oldClass + '\\s+', 'g'),
            endRegex = new RegExp('\\s+' + oldClass + '$', 'g');
        element.className = cName.replace(startRegex, newClass + ' ')
            .replace(midRegex, ' ' + newClass + ' ')
            .replace(endRegex, ' ' + newClass);
    }
    
    function hasClass(element: HTMLElement, className: string): boolean {
        var cName = (element || <HTMLElement>{}).className;
        if (!isString(cName) || !isString(className) || className === '') {
            return false;
        }
    
        var split = className.split(__whiteSpaceRegex);
        if (isUndefined(element.classList)) {
            if (cName === '') {
                return false;
            } else if (cName === className) {
                return true;
            }
    
            var name: string;
            while (split.length > 0) {
                name = split.shift();
                if (!(name === '' || new RegExp('^' + name + '\\s|\\s' + name + '$|\\s' + name + '\\s', 'g').test(cName))) {
                    return false;
                }
            }
            return true;
        }
    
        while (split.length > 0) {
            name = split.shift();
            if (!(name === '' || element.classList.contains(name))) {
                return false;
            }
        }
    
        return true;
    }
    
    var ___templateCache: plat.storage.TemplateCache,
        ___http: plat.async.Http,
        ___Exception: plat.IExceptionStatic;
    
    function getTemplate(templateUrl: string) {
        ___templateCache = ___templateCache || plat.acquire(__TemplateCache);
        ___http = ___http || plat.acquire(__Http);
    
        var _Exception: plat.IExceptionStatic,
            ajax = ___http.ajax;
    
        return ___templateCache.put(templateUrl, ___templateCache.read(templateUrl)
            .catch((error) => {
                if (isNull(error)) {
                    return ajax<string>({ url: templateUrl });
                }
            }).then<DocumentFragment>((success) => {
                if (isDocumentFragment(success)) {
                    return ___templateCache.put(templateUrl, <any>success);
                } else if (!isObject(success) || !isString(success.response)) {
                    ___Exception = ___Exception || plat.acquire(__ExceptionStatic);
                    ___Exception.warn('No template found at ' + templateUrl, ___Exception.AJAX);
                    return ___templateCache.put(templateUrl, serializeHtml());
                }
    
                var templateString = success.response;
    
                if (isEmpty(templateString.trim())) {
                    return ___templateCache.put(templateUrl, serializeHtml());
                }
    
                return ___templateCache.put(templateUrl, serializeHtml(templateString));
            }).catch((error) => {
                postpone(() => {
                    ___Exception = ___Exception || plat.acquire(__ExceptionStatic);
                    ___Exception.fatal('Failure to get template from ' + templateUrl + '.',
                        ___Exception.TEMPLATE);
                });
                return error;
            }));
    }
    
    /* tslint:enable:no-unused-variable */
    
    /**
     * Holds all the classes and interfaces related to registering components for platypus.
     */
    export module register {


        /**
         * Generic function for creating an Injector and 
         * adding it to an InjectorObject.
         * @param {plat.dependency.InjectorObject<any>} obj The InjectorObject 
         * to which to add an Injector.
         * @param {string} name The name used to set/get the Injector from the 
         * InjectorObject.
         * @param {any} Type The constructor or function definition for the Injector.
         * @param {Array<any>} dependencies? An array of strings representing the dependencies needed for the
         * Injector.
         * @param {string} injectableType? The injectable type.
         * @param {boolean} isStatic The injectable type is a static type.
         */
        function add(obj: dependency.InjectorObject<any>, name: string, Type: any, dependencies?: Array<any>,
            injectableType?: string, isStatic?: boolean): typeof register {
            var injector = obj[name] = new dependency.Injector<any>(name, Type, dependencies, injectableType);

            if (isStatic === true) {
                staticInjectors[name] = injector;
            }

            return register;
        }

        /**
         * Registers the IApp with the framework. The framework will instantiate the IApp 
         * when needed, and wire up the Application Lifecycle events. The dependencies array corresponds to injectables that will be 
         * passed into the Constructor of the app.
         * @param {string} name The name of your app.
         * @param {new (...args: any[]) => plat.App} Type The constructor for the IApp.
         * @param {Array<any>} dependencies? An array of strings representing the dependencies needed for the app injector.
         */
        export function app(name: string, Type: new (...args: any[]) => App, dependencies?: Array<any>): typeof register {
            var _Injector: typeof dependency.Injector = acquire(__InjectorStatic),
                _AppStatic: IAppStatic = acquire(__AppStatic);

            _AppStatic.registerApp(new _Injector<App>(name, Type, dependencies));
            return register;
        }

        /**
         * Registers an Control with the framework. The framework will instantiate the 
         * Control when needed. The dependencies array corresponds to injectables that 
         * will be passed into the Constructor of the control.
         * @param {string} name The control type, corresponding to the HTML notation for creating a new Control (e.g. 'plat-foreach').
         * @param {new (...args: any[]) => plat.Control} Type The constructor for the Control.
         * @param {Array<any>} dependencies? An array of strings representing the dependencies needed for the Control 
         * injector.
         */
        export function control(name: string, Type: new (...args: any[]) => Control, dependencies?: Array<any>, isStatic?: boolean): typeof register {
            if (isString(name)) {
                name = name.toLowerCase();
            } else {
                throw new Error('A Control must be registered with a string name');
            }

            return add(controlInjectors, name, Type, dependencies, isStatic ? __STATIC : undefined);
        }

        /**
         * Registers an IViewControl with the framework. The framework will 
         * instantiate the control when needed. The dependencies array corresponds to injectables that will be 
         * passed into the Constructor of the control.
         * @param {string} name The control type, corresponding to the HTML notation for creating a new 
         * IViewControl. Used for navigation to the specified IViewControl.
         * @param {new (...args: any[]) => plat.ui.IViewControl} Type The constructor for the IViewControl.
         * @param {Array<any>} dependencies? An optional array of strings representing the dependencies needed for the 
         * IViewControl injector.
         */
        export function viewControl<T extends ui.ViewControl>(name: string, Type: new (...args: any[]) => T,
            dependencies?: Array<any>): typeof register {
            if (isString(name)) {
                name = name.toLowerCase();
            } else {
                throw new Error('A ViewControl must be registered with a string name');
            }

            return add(viewControlInjectors, name, Type, dependencies);
        }

        /**
         * Registers an injectable with the framework. Injectables are objects that can be used for dependency injection into other objects.
         * The dependencies array corresponds to injectables that will be passed into the Constructor of the injectable.
         * @param {string} name The name of the injector, used when another component is specifying dependencies.
         * @param {new (...args: any[]) => any} Type The constructor for the injectable. The injectable will only be 
         * instantiated once during the application lifetime.
         * @param {Array<any>} dependencies? An array of strings representing the dependencies needed for the injectable's injector.
         * @param {string} injectableType? Specifies the type of injectable, either SINGLETON, 
         * STATIC, INSTANCE, 
         * FACTORY, CLASS 
         * (defaults to SINGLETON).
         * plat.register.injectable('_CacheFactory', [plat.expressions.Parser], Cache);
         * plat.register.injectable('database', MyDatabase, null, plat.register.injectable.INSTANCE);
         */
        export function injectable(name: string, Type: new (...args: any[]) => any,
            dependencies?: Array<any>, injectableType?: string): typeof register;
        /**
         * Registers an injectable with the framework. Injectables are objects that can be used for dependency injection into other objects.
         * The dependencies array corresponds to injectables that will be passed into the Constructor of the injectable.
         * @param {string} name The name of the injector, used when another component is specifying dependencies.
         * @param {(...args: any[]) => any} method A method that returns the injectable.
         * @param {Array<any>} dependencies? An array of strings representing the dependencies needed for the injectable's injector.
         * @param {string} injectableType? Specifies the type of injectable, either SINGLETON, 
         * STATIC, INSTANCE, 
         * FACTORY, CLASS 
         * (defaults to SINGLETON).
         * plat.register.injectable('_CacheFactory', [plat.expressions.Parser], 
         *     function(parser: plat.expressions.Parser) { return { ... }; });
         * plat.register.injectable('database', function() { return new Database(); }, null, register.injectable.INSTANCE);
         */
        export function injectable(name: string, method: (...args: any[]) => any,
            dependencies?: Array<any>, injectableType?: string): typeof register;
        export function injectable(name: string, Type: any, dependencies?: Array<any>, injectableType?: string): typeof register {
            if (!isString(injectableType)) {
                injectableType = __SINGLETON;
            } else {
                injectableType = injectableType.toLowerCase();
                if (injectableType === __FACTORY || injectableType === __STATIC || injectableType === __CLASS) {
                    return add(injectableInjectors, name, Type, dependencies, injectableType, true);
                } else if (!(injectableType === __SINGLETON || injectableType === __INSTANCE)) {
                    throw new Error('Invalid injectable type ' + injectableType + ' during injectable registration.');
                }
            }

            return add(injectableInjectors, name, Type, dependencies, injectableType, false);
        }

        /**
         * Contains constants for injectable type.
         */

        export module injectable {
                /**
                 * Static injectables will be injected before the application loads. This provides a way to create 
                 * a static constructor and load dependencies into static class properties.
                 */
                export var STATIC = __STATIC;

                /**
                 * Singleton injectables will contain a constructor. A Singleton injectable will be instantiated once and 
                 * used throughout the application lifetime. It will be instantiated when another component is injected 
                 * and lists it as a dependency.
                 */
                export var SINGLETON = __SINGLETON;

                /**
                 * Instance injectables will contain a constructor. An Instance injectable will be instantiated multiple times 
                 * throughout the application lifetime. It will be instantiated whenever another component is injected 
                 * and lists it as a dependency.
                 */
                export var INSTANCE = __INSTANCE;

                /**
                 * Factory injectables will not contain a constructor but will instead contain a method for obtaining an 
                 * instance, such as getInstance() or create(). It will be injected before the application loads, similar to a Static 
                 * injectable.
                 */
                export var FACTORY = __FACTORY;

                /**
                 * Class injectables are essentially a direct reference to a class's constructor. It may contain both 
                 * static and instance methods as well as a constructor for creating a new instance.
                 */
                export var CLASS = __CLASS;
        }
        /**
         * Adds a CSS animation denoted by its name. If you wish to also support legacy browsers, make sure to register a 
         * JS implementation as well.
         * @param {string} name The unique idenitifer of the animation.
         * @param {new (...args: any[]) => plat.ui.animations.CssAnimation} Type The constructor for the custom animation.
         * @param {Array<any>} dependencies? Any dependencies that need to be injected into the animation at 
         * instantiation.
         * @param {string} animationType The type of animation. Both the intended type and default value are 
         * CSS.
         */
        export function animation(name: string, Type: new (...args: any[]) => ui.animations.CssAnimation,
            dependencies?: Array<any>, animationType?: 'css'): typeof register;
        export function animation(name: string, Type: new (...args: any[]) => ui.animations.CssAnimation,
            dependencies?: Array<any>, animationType?: string): typeof register;
        /**
         * Adds a JS animation denoted by its name. If  Intended to be used when JS animation implementations for legacy browsers 
         * is desired.
         * @param {string} name The unique idenitifer of the animation.
         * @param {new (...args: any[]) => plat.ui.animations.JsAnimation} Type The constructor for the custom animation.
         * @param {Array<any>} dependencies? Any dependencies that need to be injected into the animation at 
         * instantiation.
         * @param {string} animationType The type of animation. Both the intended type and default value are 
         * JS.
         */
        export function animation(name: string, Type: new (...args: any[]) => ui.animations.JsAnimation,
            dependencies: Array<any>, animationType: 'js'): typeof register;
        export function animation(name: string, Type: new (...args: any[]) => ui.animations.JsAnimation,
            dependencies: Array<any>, animationType: string): typeof register;
        export function animation(name: string, Type: new (...args: any[]) => ui.animations.BaseAnimation,
            dependencies?: Array<any>, animationType?: string): typeof register {
            if (!isString(animationType)) {
                animationType = __CSS;
            } else {
                animationType = animationType.toLowerCase();
                if (!(animationType === animation.CSS || animationType === animation.JS)) {
                    throw new Error('Invalid animationType "' + animationType + '" during animation registration.');
                }
            }

            return add((animationType === __JS ? jsAnimationInjectors : animationInjectors),
                name, Type, dependencies, register.injectable.INSTANCE);
        }

        /**
         * Contains constants for animation type.
         */

        export module animation {
                /**
                 * A CSS animation.
                 */
                export var CSS = __CSS;

                /**
                 * A JavaScript animation.
                 */
                export var JS = __JS;
        }
    }
    var controlInjectors: plat.dependency.InjectorObject<plat.Control> = {};
    var viewControlInjectors: plat.dependency.InjectorObject<plat.ui.ViewControl> = {};
    var injectableInjectors: plat.dependency.InjectorObject<plat.dependency.Injector<any>> = {};
    var unregisteredInjectors: plat.dependency.InjectorObject<plat.dependency.Injector<any>> = {};
    var staticInjectors: plat.dependency.InjectorObject<plat.dependency.Injector<any>> = {};
    var animationInjectors: plat.dependency.InjectorObject<plat.ui.animations.BaseAnimation> = {};
    var jsAnimationInjectors: plat.dependency.InjectorObject<plat.ui.animations.BaseAnimation> = {};
    
    /**
     * Holds classes and interfaces related to dependency injection components in platypus.
     */
    export module dependency {


        /**
         * The Injector class is used for dependency injection. You can create an injector object,
         * specify dependencies and a constructor for your component. When the injector object is
         * 'injected' it will create a new instance of your component and pass in the dependencies
         * to the constructor.
         */
        export class Injector<T> {
            /**
             * Initializes all static injectors.
             */
            static initialize(): void {
                var injectors = staticInjectors,
                    keys = Object.keys(injectors),
                    length = keys.length;

                for (var i = 0; i < length; ++i) {
                    injectors[keys[i]].inject();
                }

                staticInjectors = {};
            }

            /**
             * Gathers and returns the array of listed dependencies.
             * @param {Array<any>} dependencies The array of dependencies specified 
             * by either their Constructor or their registered name.
             */
            static getDependencies(dependencies: Array<any>): Array<Injector<any>> {
                if (isNull(dependencies) || isEmpty(dependencies)) {
                    return [];
                }

                var deps: Array<Injector<any>> = [],
                    length = dependencies.length;

                for (var i = 0; i < length; ++i) {
                    deps.push(Injector.getDependency(dependencies[i]));
                }

                return deps;
            }

            /**
             * Finds and returns the dependency.
             * @param {any} dependency an object/string used to find the dependency.
             */
            static getDependency(dependency: any): Injector<any> {
                if (isNull(dependency) || dependency === __NOOP_INJECTOR) {
                    return Injector.__noop();
                } else if (Injector.isInjector(dependency)) {
                    return dependency;
                }

                return Injector.__locateInjector(dependency);
            }

            /**
             * Converts dependencies specified by their Constructors into 
             * equivalent dependencies specified by their registered string 
             * name.
             * @param {Array<any>} dependencies The array of dependencies specified 
             * by either their Constructor or their registered name.
             */
            static convertDependencies(dependencies: Array<any>): Array<string> {
                if (!isArray(dependencies)) {
                    return [];
                }
                var convert = Injector.convertDependency,
                    deps: Array<string> = [],
                    length = dependencies.length,
                    dependency: any,
                    value: string;

                for (var i = 0; i < length; ++i) {
                    deps.push(convert(dependencies[i]));
                }

                return deps;
            }

            /**
             * Converts a dependency specified by its Constructors into an
             * equivalent dependency specified by its registered string 
             * name.
             * @param {any} dependency The dependency specified 
             * by either a Constructor or a registered name.
             */
            static convertDependency(dependency: any): string {
                if (isNull(dependency)) {
                    return __NOOP_INJECTOR;
                }

                return Injector.__getInjectorName(dependency);
            }

            /**
             * Checks if the object being passed in fulfills the requirements for being an Injector.
             * @param {plat.dependency.Injector<any>} dependency The object to check.
             */
            static isInjector(dependency: Injector<any>): boolean {
                return isFunction(dependency.inject) &&
                    !isUndefined(dependency.type) &&
                    !isUndefined(dependency.name) &&
                    !isUndefined(dependency.Constructor);
            }

            /**
             * Gets the string name related to an injector.
             * @param {any} dependency The object to search for.
             */
            private static __getInjectorName(dependency: any): string {
                if (isNull(dependency)) {
                    return __NOOP_INJECTOR;
                } else if (isString(dependency)) {
                    return dependency;
                } else if (dependency === window) {
                    return __Window;
                } else if (dependency === window.document) {
                    return __Document;
                }

                var Constructor = dependency,
                    _inject = isObject(Constructor._inject) ? Constructor._inject : {};

                if (isString(Constructor.__injectorName)) {
                    dependency = Constructor.__injectorName;
                }

                if (!isString(dependency)) {
                    return <any>new Injector(dependency, Constructor, _inject.dependencies);
                }

                var find: (injectors: InjectorObject<any>) => Injector<any> =
                    Injector.__findInjector.bind(Injector, dependency),
                    injector = find(injectableInjectors) ||
                    find(unregisteredInjectors) ||
                    find(staticInjectors) ||
                    find(viewControlInjectors) ||
                    find(controlInjectors) ||
                    find(animationInjectors) ||
                    find(jsAnimationInjectors);

                if (!isObject(injector) && isString(dependency)) {
                    injector = unregisteredInjectors[dependency] = <Injector<any>>new Injector(dependency, Constructor, Constructor._inject.dependencies);
                }

                if (isObject(injector)) {
                    return injector.name;
                }

                return __NOOP_INJECTOR;
            }

            /**
             * Calls the injector's constructor with the associated dependencies.
             * @param {any} Constructor The Constructor to call.
             * @param {Array<any>} args The arguments to pass to the constructor.
             */
            private static __construct(Constructor: any, args: Array<any>): any {
                if (isNull(Constructor) || isNull(Constructor.prototype)) {
                    return Constructor;
                }
                var obj = Object.create(Constructor.prototype);

                Injector.__walk(obj, Object.getPrototypeOf(obj));

                var ret = obj.constructor.apply(obj, args);

                if (!isUndefined(ret)) {
                    return ret;
                }

                return obj;
            }

            /**
             * Walks up an object's prototype, injecting dependencies if they are 
             * registered on static '_inject' objects.
             * @param {any} obj The object to walk.
             * @param {any} proto the prototype of the object.
             */
            private static __walk(obj: any, proto: any): void {
                if (proto.constructor !== Object) {
                    Injector.__walk(obj, Object.getPrototypeOf(proto));
                }

                var Constructor = proto.constructor,
                    toInject = _clone(Constructor._inject, true);

                if (!isObject(toInject)) {
                    return;
                }

                var dependencies = acquire(map((value) => value, toInject)),
                    keys = Object.keys(toInject),
                    length = keys.length;

                for (var i = 0; i < length; ++i) {
                    obj[keys[i]] = dependencies[i];
                }
            }

            /**
             * Finds an injector object with the associated constructor.
             * @param {any} Constructor The Constructor to locate.
             */
            private static __locateInjector(Constructor: any): any {
                if (isNull(Constructor)) {
                    return;
                } else if (Constructor === window) {
                    return (<any>injectableInjectors)._window;
                } else if (Constructor === window.document) {
                    return (<any>injectableInjectors)._document;
                }

                var dependency: string = Constructor;

                if (isString(Constructor.__injectorName)) {
                    dependency = Constructor.__injectorName;
                }

                var find: (injectors: InjectorObject<any>) => Injector<any> =
                    Injector.__findInjector.bind(Injector, dependency),
                    injector = find(injectableInjectors) ||
                    find(unregisteredInjectors) ||
                    find(staticInjectors) ||
                    find(viewControlInjectors) ||
                    find(controlInjectors) ||
                    find(animationInjectors) ||
                    find(jsAnimationInjectors);

                if (!isObject(injector)) {
                    if (isFunction(Constructor)) {
                        injector = <Injector<any>>new Injector(dependency, Constructor, isObject(Constructor._inject) ? Constructor._injectorDependencies : []);

                        if (isString(dependency)) {
                            unregisteredInjectors[dependency] = injector;
                        } 
                    } else {
                        injector = Injector.__wrap(Constructor);
                    }
                }

                return injector;
            }

            /**
             * Finds an injector object with the associated constructor in the given InjectorObject.
             * @param {Function} Constructor The Function
             */
            private static __findInjector(Constructor: any, injectors: InjectorObject<any>) {
                if (isNull(Constructor)) {
                    return;
                } else if (Constructor === Injector || Constructor === __InjectorStatic) {
                    var ret = Injector.__wrap(Injector);
                    ret.name = __InjectorStatic;
                    return ret;
                } else if (isString(Constructor)) {
                    return injectors[Constructor] || injectors[(<string>Constructor).toLowerCase()];
                }

                var injector: Injector<any>,
                    keys = Object.keys(injectors),
                    length = keys.length;

                for (var i = 0; i < length; ++i) {
                    injector = injectors[keys[i]];

                    if (injector.Constructor === Constructor) {
                        return injector;
                    }
                }
            }

            /**
             * Once an injector is injected, it is wrapped to prevent further injection.
             * @param {any} value The injected value.
             */
            private static __wrap(value: any): Injector<any> {
                return <any>{
                    inject: () => value,
                    name: __WRAPPED_INJECTOR,
                    __dependencies: [],
                    Constructor: value
                };
            }

            /**
             * Returns an empty injector object.
             */
            private static __noop(): Injector<any> {
                return <any>{
                    inject: noop,
                    type: __NOOP_INJECTOR,
                    name: __NOOP_INJECTOR,
                    __dependencies: [],
                    Constructor: <any>noop
                };
            }

            /**
             * Determines if there is a circular dependency in a dependency tree.
             * @param {plat.dependency.Injector<any>} injector The starting point for the dependency tree search.
             */
            private static __findCircularReferences(injector: Injector<any>): string {
                if (!(isObject(injector) && isArray(injector.__dependencies))) {
                    return;
                }

                var source = injector.name,
                    dependencies = injector.__dependencies,
                    node: {
                        name: string;
                        dependencies: Array<string>;
                    },
                    stack: Array<typeof node> = [{
                        name: source,
                        dependencies: dependencies.slice(0)
                    }],
                    dependency: string,
                    locate = Injector.__locateInjector,
                    length: number;

                while (stack.length > 0) {
                    node = stack.pop();

                    dependencies = node.dependencies;
                    length = dependencies.length;

                    for (var i = 0; i < length; ++i) {
                        dependency = dependencies[i];

                        if (dependency === source) {
                            return node.name;
                        }

                        injector = locate(dependency);

                        if (!(isObject(injector) && isArray(injector.__dependencies))) {
                            continue;
                        }

                        stack.push({
                            name: injector.name,
                            dependencies: injector.__dependencies.slice(0)
                        });
                    }
                }
            }

            /**
             * The dependencies for this injector
             */
            private __dependencies: Array<string>;

            /**
             * The constructor for an injector. Converts any non-string dependencies to strings to support mocking Injectors during runtime.
             * @param {string} name The name of the injected type.
             * @param {new () => T} Constructor The constructor method for the component requiring the dependency 
             * injection.
             * @param {Array<any>} dependencies An array of strings specifying the injectable dependencies for the 
             * associated constructor.
             * @param {string} type The type of injector, used for injectables specifying a injectableType of 
             * STATIC, SINGLETON, FACTORY, INSTANCE, or CLASS. The default is SINGLETON.
             */
            constructor(public name: string, public Constructor: new () => T, dependencies?: Array<any>, public type: string = null) {
                var deps = this.__dependencies = Injector.convertDependencies(dependencies),
                    index = deps.indexOf(__NOOP_INJECTOR),
                    circularReference: string;

                Object.defineProperty(Constructor, '__injectorName', {
                    value: name,
                    enumerable: false,
                    configurable: true,
                    writable: true
                });

                Object.defineProperty(Constructor, '__injectorDependencies', {
                    value: deps.slice(0),
                    enumerable: false,
                    configurable: true,
                    writable: true
                });

                if (index > -1) {
                    var dependency = dependencies[index];

                    if (isNull(dependency)) {
                        throw new TypeError('The dependency for ' +
                            name + ' at index ' +
                            index + ' is undefined, did you forget to include a file?');
                    }

                    throw new TypeError('Could not resolve dependency ' +
                        dependency.slice(9, dependency.indexOf('(')) +
                        ' for ' +
                        name +
                        '. Are you using a static injectable Type?');
                }

                circularReference = Injector.__findCircularReferences(this);

                if (isString(circularReference)) {
                    throw new Error('Circular dependency detected from ' + this.name + ' to ' + circularReference + '.');
                }

                if (name === __AppStatic) {
                    var App: IAppStatic = <IAppStatic>(<any>this).inject();
                    this.__dependencies = deps;
                    App.start();
                }
            }

            /**
             * Gathers the dependencies for the Injector object and creates a new instance of the 
             * Constructor, passing in the dependencies in the order they were specified. If the 
             * Injector contains a Constructor for an injectable and the Constructor is registered 
             * as a SINGLE type it will only inject that injectable once.
             */
            inject(): T {
                var toInject: any = [],
                    type = this.type;

                var dependencies = this.__dependencies,
                    length = dependencies.length,
                    dependency: Injector<any>,
                    injectable: any;

                for (var i = 0; i < length; ++i) {
                    dependency = Injector.getDependency(dependencies[i]);
                    toInject.push(dependency.inject());
                }

                injectable = <T>Injector.__construct(this.Constructor, toInject);

                if (type === __SINGLETON || type === __FACTORY ||
                    type === __STATIC || type === __CLASS) {
                    this._wrapInjector(injectable);
                }

                return injectable;
            }

            /**
             * Wraps the injector with the instantiated value in the case of a 
             * SINGLE or STATIC type so that it does not re-instantiate.
             * @param {any} value The value to wrap
             */
            protected _wrapInjector(value: any): Injector<any> {
                this.inject = () => {
                    return <T>value;
                };

                return this;
            }
        }

        /**
         * An object whose values are all Injectors.
         */
        export interface InjectorObject<T> extends IObject<Injector<T>> { }

        /**
         * Publically exposes all the dependency injector objects.
         */

        export module injectors {
                /**
                 * An InjectorObject of Controls. 
                 * Contains all the registered controls for an application.
                 */
                export var control = controlInjectors;

                /**
                 * An InjectorObject of IBaseViewControls. 
                 * Contains all the registered view controls for an application.
                 */
                export var viewControl = viewControlInjectors;

                /**
                 * An InjectorObject of objects. Contains all the registered 
                 * injectables for an application.
                 */
                export var injectable = injectableInjectors;

                /**
                 * An InjectorObject of static objects. Contains all the registered 
                 * static injectables for an application. Once the injectables have been injected, they are removed from this object.
                 */
                export var staticInjectable = staticInjectors;

                /**
                 * An InjectorObject of animations. Can be either CSS or JS implementations.
                 */
                export var animation = animationInjectors;

                /**
                 * An InjectorObject  of animations. Should only contain JS implementations.
                 */
                export var jsAnimation = jsAnimationInjectors;
        }
    }
    if (!isUndefined(window)) {
        if (isUndefined((<any>window).plat)) {
            (<any>window).plat = plat;
        }

        if (isUndefined((<any>window).module)) {
            (<any>window).module = {};
        }
    }

    /**
     * Returns the requested injectable dependency.
     * @param {() => T} dependency The dependency Type to return.
     */
    export function acquire<T>(dependency: () => T): T;
    /**
     * Returns the requested injectable dependency.
     * @param {Function} dependency The dependency Type to return.
     */
    export function acquire(dependency: Function): any;
    /**
     * Returns the requested injectable dependency.
     * @param {Function} dependency An array of Types specifying the injectable dependencies.
     */
    export function acquire(dependencies: Array<Function>): Array<any>;
    /**
     * Returns the requested injectable dependency.
     * @param {string} dependency The injectable dependency type to return.
     */
    export function acquire(dependency: string): any;
    /**
     * Gathers dependencies and returns them as an array in the order they were requested.
     * @param {Array<string>} dependencies An array of strings specifying the injectable dependencies.
     */
    export function acquire(dependencies: Array<string>): Array<any>;
    /**
     * Gathers dependencies and returns them as an array in the order they were requested.
     * @param {Array<any>} dependencies An array of strings or Functions specifying the injectable dependencies.
     */
    export function acquire(dependencies: Array<any>): Array<any>;
    export function acquire(dependencies: any) {
        var deps: Array<dependency.Injector<any>>,
            array = isArray(dependencies);

        if (array) {
            deps = dependency.Injector.getDependencies(dependencies);
        } else {
            deps = dependency.Injector.getDependencies([dependencies]);
        }

        var length = deps.length,
            output: Array<any> = [];

        for (var i = 0; i < length; ++i) {
            output.push(deps[i].inject());
        }

        if (!array) {
            return output[0];
        }

        return output;
    }

    /**
     * Manages the throwing and consuming of errors and warnings.
     */
    export class Exception {
        /**
         * Method for sending a warning to all listeners. Will 
         * not throw an error.
         * @param {string} message The message to be sent to the listeners.
         * @param {number} type? Denotes the type of fatal exception.
         */
        static warn(message: string, type?: number): void {
            raise(message, type, false);
        }

        /**
         * Method for sending a fatal error to all listeners. Will
         * throw an error.
         * @param {Error} error The Error to be sent to all the listeners.
         * @param {number} type? Denotes the type of fatal exception. 
         */
        static fatal(error: Error, type?: number): void;
        /**
         * Method for sending a fatal message to all listeners. Will
         * throw an error.
         * @param {string} message The message to be sent to all the listeners.
         * @param {number} type? Denotes the type of fatal exception. 
         */
        static fatal(message: string, type?: number): void;
        static fatal(message: any, type?: number) {
            raise(message, type, true);
        }

        /**
         * Exception Type for parsing exceptions
         */
        static PARSE = 0;

        /**
         * Exception Type for compiling exceptions
         */
        static COMPILE = 1;

        /**
         * Exception Type for binding exceptions
         */
        static BIND = 2;

        /**
         * Exception Type for name exceptions
         */
        static NAME = 3;

        /**
         * Exception Type for navigation exceptions
         */
        static NAVIGATION = 4;

        /**
         * Exception Type for template exceptions
         */
        static TEMPLATE = 5;

        /**
         * Exception Type for ajax exceptions
         */
        static AJAX = 6;

        /**
         * Exception Type for context exceptions
         */
        static CONTEXT = 7;

        /**
         * Exception Type for event exceptions
         */
        static EVENT = 8;

        /**
         * Exception Type for injectable exceptions
         */
        static INJECTABLE = 9;

        /**
         * Exception Type for compat exceptions
         */
        static COMPAT = 10;

        /**
         * Exception Type for promise exceptions
         */
        static PROMISE = 11;

        /**
         * Exception Type for animation exceptions
         */
        static ANIMATION = 12;

        /**
         * Exception Type for individual control exceptions 
         * (e.g. using a particular control incorrectly).
         */
        static CONTROL = 13;
    }

    /**
     * The Type for referencing the '_Exception' injectable as a dependency.
     */
    export function IExceptionStatic(): IExceptionStatic {
        return Exception;
    }

    register.injectable(__ExceptionStatic, IExceptionStatic, null, __STATIC);

    /**
     * Manages the throwing and consuming of errors and warnings.
     */
    export interface IExceptionStatic {
        /**
         * Method for sending a warning to all listeners. Will 
         * not throw an error.
         * @param {string} message The message to be sent to the listeners.
         * @param {number} type? Denotes the type of fatal exception.
         */
        warn(message: string, type?: number): void;

        /**
         * Method for sending a fatal error to all listeners. Will
         * throw an error.
         * @param {Error} error The Error to be sent to all the listeners.
         * @param {number} type? Denotes the type of fatal exception.
         */
        fatal(error: Error, type?: number): void;
        /**
         * Method for sending a fatal message to all listeners. Will
         * throw an error.
         * @param {string} message The message to be sent to all the listeners.
         * @param {number} type? Denotes the type of fatal exception.
         */
        fatal(message: string, type?: number): void;

        /**
         * Exception Type for parsing exceptions
         */
        PARSE: number;

        /**
         * Exception Type for compiling exceptions
         */
        COMPILE: number;

        /**
         * Exception Type for binding exceptions
         */
        BIND: number;

        /**
         * Exception Type for name exceptions
         */
        NAME: number;

        /**
         * Exception Type for navigation exceptions
         */
        NAVIGATION: number;

        /**
         * Exception Type for template exceptions
         */
        TEMPLATE: number;

        /**
         * Exception Type for ajax exceptions
         */
        AJAX: number;

        /**
         * Exception Type for context exceptions
         */
        CONTEXT: number;

        /**
         * Exception Type for event exceptions
         */
        EVENT: number;

        /**
         * Exception Type for injectable exceptions
         */
        INJECTABLE: number;

        /**
         * Exception Type for compat exceptions
         */
        COMPAT: number;

        /**
         * Exception Type for promise exceptions
         */
        PROMISE: number;

        /**
         * Exception Type for animation exceptions
         */
        ANIMATION: number;

        /**
         * Exception Type for individual control exceptions
         * (e.g. using a particular control incorrectly).
         */
        CONTROL: number;
    }

    /**
     * A class for exceptions with platypus-specific names
     */
    class PlatException implements Error {
        /**
         * Creates a new PlatException
         * @param {string} message The message for the exception
         * @param {string} name The name of the exception
         */
        constructor(public message: string, public name: string) { }
    }

    /**
     * A class for errors with platypus-specific names
     */
    class PlatError implements Error {
        /**
         * The name of the error.
         */
        name = __platError;

        /**
         * Creates a new PlatError
         * @param {string} message? The message for the exception
         */
        constructor(public message?: string) {
            this.message = message || '';
        }
    }

    /**
     * Sets the PlatException and PlatError prototypes to the passed in Error type
     * @param {T} platError The prototype of the Error.
     */
    function setPrototypes<T extends Error>(platError?: T): void {
        PlatError.prototype = platError || Error.prototype;
        PlatException.prototype = new PlatError();
    }

    /**
     * Dispatches error events, and throws an Error if it is fatal.
     * @param {any} message Either a string or error to raise.
     * @param {boolean} isFatal? Whether or not the error is fatal.
     */
    function raise(message: any, type: number, isFatal?: boolean): void {
        var error: Error;

        if (message instanceof Error) {
            setPrototypes(Object.getPrototypeOf(message));
        } else if (PlatError.prototype !== Error.prototype) {
            setPrototypes();
        }
        error = new PlatException(message, '');
        switch (type) {
            case Exception.PARSE:
                error.name = __parseError;
                break;
            case Exception.BIND:
                error.name = __bindError;
                break;
            case Exception.COMPILE:
                error.name = __compileError;
                break;
            case Exception.NAME:
                error.name = __nameError;
                break;
            case Exception.NAVIGATION:
                error.name = __navigationError;
                break;
            case Exception.TEMPLATE:
                error.name = __templateError;
                break;
            case Exception.CONTEXT:
                error.name = __contextError;
                break;
            case Exception.EVENT:
                error.name = __eventError;
                break;
            case Exception.INJECTABLE:
                error.name = __injectableError;
                break;
            case Exception.COMPAT:
                error.name = __CompatError;
                break;
            default:
                error = new PlatError(message);
                break;
        }

        if (message instanceof Error) {
            var properties = Object.getOwnPropertyNames(message),
                length = properties.length;

            error.message = '';
            error = Object.create(error);

            for (var i = 0; i < length; ++i) {
                (<any>error)[properties[i]] = message[properties[i]];
            }

            (<any>error).stack = message.stack;
            (<any>error).code = message.code;
        }

        var ErrorEvent: events.IErrorEventStatic = acquire(__ErrorEventStatic);

        ErrorEvent.dispatch(__error, Exception, error);

        if (isFatal) {
            if (message instanceof Error) {
                throw message;
            }

            throw error;
        }
    }

    /**
     * A class containing boolean values signifying browser 
     * and/or platform compatibilities.
     */
    export class Compat {
        protected static _inject: any = {
            _window: __Window,
            _history: __History,
            _document: __Document
        };

        /**
         * The window injectable.
         */
        protected _window: Window;

        /**
         * The window.history injectable.
         */
        protected _history: History;

        /**
         * The document injectable.
         */
        protected _document: Document;

        /**
         * Determines if the browser is modern enough to correctly 
         * run PlatypusTS.
         */
        isCompatible: boolean;

        /**
         * Signifies whether or not Cordova is defined. If it is, 
         * we hook up ALM events to Cordova's functions.
         */
        cordova: boolean;

        /**
         * Signifies whether window.history.pushState is defined.
         */
        pushState: boolean;

        /**
         * Signifies whether the File API is supported.
         */
        fileSupported: boolean;

        /**
         * Signifies whether Require is present. If it is, we assume 
         * it is going to be used and leave the loading of the app up 
         * to the developer.
         */
        amd: boolean;

        /**
         * Signifies whether we are in the context of a Windows 8 app.
         */
        msApp: boolean;

        /**
         * Signifies whether we are in the context of a WinJS app.
         */
        winJs: boolean;

        /**
         * Signifies whether indexedDB exists on the window.
         */
        indexedDb: boolean;

        /**
         * Signifies whether Object.prototype.__proto__ exists.
         */
        proto: boolean;

        /**
         * Signifies whether Object.prototype.getPrototypeOf exists.
         */
        getProto: boolean;

        /**
         * Signifies whether Object.prototype.setPrototypeOf exists.
         */
        setProto: boolean;

        /**
         * Whether or not the current browser has touch events 
         * like touchstart, touchmove, touchend, etc.
         */
        hasTouchEvents: boolean;

        /**
         * Whether or not the current browser has pointer events 
         * like pointerdown, MSPointerMove, pointerup, etc.
         */
        hasPointerEvents: boolean;

        /**
         * Whether or not the current browser has touch events 
         * like MSPointerDown, touchmove, MSPointerUp, etc.
         */
        hasMsPointerEvents: boolean;

        /**
         * Whether or not the browser supports animations.
         */
        animationSupported: boolean;

        /**
         * Whether the platypus.css file was included or not.
         */
        platCss: boolean;

        /**
         * An object containing the correctly mapped touch events for the browser.
         */
        mappedEvents: IMappedTouchEvents;

        /**
         * An object containing the properly prefixed animation events. 
         * Undefined if animation isn't supported.
         */
        animationEvents: IAnimationEvents;

        /**
         * An object containing information regarding any potential vendor prefix.
         */
        vendorPrefix: IVendorPrefix;

        /**
         * The browser's requestAnimationFrame function if one exists. Otherwise undefined.
         */
        requestAnimationFrame: (callback: FrameRequestCallback) => number;

        /**
         * The browser's cancelAnimationFrame function if one exists. Otherwise undefined.
         */
        cancelAnimationFrame: (handle: number) => void;

        /**
         * The version of Internet Explorer being used. If not Internet Explorer, the value is undefined.
         */
        IE: number;

        /**
         * The version of Android being used. If not Android, the value is undefined.
         */
        ANDROID: number;

        /**
         * An object containing all event lookups.
         */
        private __events: IObject<boolean> = {};

        /**
         * Define everything.
         */
        constructor() {
            this.__defineBooleans();
            this.__defineMappedEvents();
            this.__defineAnimationEvents();
            this.__determineCss();
        }

        /**
         * Check whether or not an event exists.
         * @param {string} event The event to check the existence of.
         */
        hasEvent(event: string): boolean {
            var events = this.__events,
                eventExists = events[event];

            if (isUndefined(eventExists)) {
                var element = this._document.createElement('div');
                if (event === 'input' && this.IE === 9) {
                    eventExists = events[event] = false;
                } else {
                    eventExists = events[event] = !isUndefined((<any>element)[('on' + event)]);
                }
            }

            return eventExists;
        }

        /**
         * Define booleans.
         */
        private __defineBooleans(): void {
            var _window = this._window,
                navigator = _window.navigator || <Navigator>{},
                userAgent = (navigator.userAgent || '').toLowerCase(),
                history = this._history,
                def = (<any>_window).define,
                msA = (<any>_window).MSApp,
                winJs = (<any>_window).WinJS,
                android = parseInt((<any>/android (\d+)/.exec(userAgent) || [])[1], 10);

            this.isCompatible = isFunction(Object.defineProperty) && isFunction(this._document.querySelector);
            this.cordova = !isNull((<any>_window).cordova);
            this.pushState = !(isNull(history) || isNull(history.pushState));
            this.fileSupported = !(isUndefined((<any>_window).File) || isUndefined((<any>_window).FormData));
            this.amd = isFunction(def) && !isNull(def.amd);
            this.msApp = isObject(msA) && isFunction(msA.execUnsafeLocalFunction);
            this.winJs = isObject(winJs) && isObject(winJs.Application);
            this.indexedDb = !isNull(_window.indexedDB);
            this.proto = isObject((<any>{}).__proto__);
            this.getProto = isFunction(Object.getPrototypeOf);
            this.setProto = isFunction((<any>Object).setPrototypeOf);
            this.hasTouchEvents = !isUndefined((<any>_window).ontouchstart);
            this.hasPointerEvents = !!navigator.pointerEnabled;
            this.hasMsPointerEvents = !!navigator.msPointerEnabled;

            if (isNumber(android)) {
                this.ANDROID = android;
                return;
            }

            var ie = parseInt((<any>/msie (\d+)/.exec(userAgent) || [])[1], 10) ||
                parseInt((<any>(/trident\/.*; rv:(\d+)/.exec(userAgent) || []))[1], 10);
            if (isNumber(ie)) {
                this.IE = ie;
            }
        }

        /**
         * Define mapped events
         */
        private __defineMappedEvents(): void {
            if (this.hasPointerEvents) {
                this.mappedEvents = {
                    $touchstart: 'pointerdown',
                    $touchend: 'pointerup',
                    $touchmove: 'pointermove',
                    $touchcancel: 'pointercancel'
                };
            } else if (this.hasMsPointerEvents) {
                this.mappedEvents = {
                    $touchstart: 'MSPointerDown',
                    $touchend: 'MSPointerUp',
                    $touchmove: 'MSPointerMove',
                    $touchcancel: 'MSPointerCancel'
                };
            } else if (this.hasTouchEvents) {
                this.mappedEvents = {
                    $touchstart: 'touchstart',
                    $touchend: 'touchend',
                    $touchmove: 'touchmove',
                    $touchcancel: 'touchcancel'
                };
            } else {
                this.mappedEvents = {
                    $touchstart: 'mousedown',
                    $touchend: 'mouseup',
                    $touchmove: 'mousemove',
                    $touchcancel: null
                };
            }
        }

        /**
         * Define animation events
         */
        private __defineAnimationEvents(): void {
            var _window = this._window,
                documentElement = this._document.documentElement,
                styles = _window.getComputedStyle(documentElement, ''),
                prefix: string,
                jsSyntax: string;

            if (!isUndefined((<any>styles).OLink)) {
                prefix = 'o';
                jsSyntax = 'O';
            } else {
                var matches = Array.prototype.slice.call(styles).join('').match(/-(moz|webkit|ms)-/);
                prefix = (isArray(matches) && matches.length > 1) ? matches[1] : '';
                jsSyntax = prefix === 'ms' ? 'MS' : prefix[0].toUpperCase() + prefix.slice(1);
            }

            this.vendorPrefix = {
                lowerCase: prefix,
                css: prefix === '' ? '' : '-' + prefix + '-',
                upperCase: jsSyntax
            };

            this.requestAnimationFrame = _window.requestAnimationFrame || (<any>_window)[prefix + 'RequestAnimationFrame'];
            this.cancelAnimationFrame = _window.cancelAnimationFrame ||
            (<any>_window)[prefix + 'CancelRequestAnimationFrame'] ||
            (<any>_window)[prefix + 'CancelAnimationFrame'];

            var style = documentElement.style,
                animationSupported: boolean;
            if (animationSupported = !isUndefined(style.animation)) {
                this.animationEvents = {
                    $animation: 'animation',
                    $animationStart: 'animationstart',
                    $animationEnd: 'animationend',
                    $animationIteration: 'animationiteration',
                    $transition: 'transition',
                    $transitionStart: 'transitionstart',
                    $transitionEnd: 'transitionend'
                };
            } else if (animationSupported = !isUndefined((<any>style)[jsSyntax + 'Animation'])) {
                this.animationEvents = {
                    $animation: prefix + 'Animation',
                    $animationStart: prefix + 'AnimationStart',
                    $animationEnd: prefix + 'AnimationEnd',
                    $animationIteration: prefix + 'AnimationIteration',
                    $transition: prefix + 'Transition',
                    $transitionStart: prefix + 'TransitionStart',
                    $transitionEnd: prefix + 'TransitionEnd'
                };
            }

            this.animationSupported = animationSupported;
        }

        /**
         * Determines whether or not platypus css styles exist.
         */
        private __determineCss(): void {
            var _document = this._document,
                head = _document.head,
                element = _document.createElement('div');

            element.setAttribute(__Hide, '');
            head.insertBefore(element, null);

            var computedStyle = this._window.getComputedStyle(element),
                display = computedStyle.display,
                visibility = computedStyle.visibility;

            if (display === 'none' || visibility === 'hidden') {
                this.platCss = true;
            } else {
                this.platCss = false;
            }

            head.removeChild(element);
        }
    }

    register.injectable(__Compat, Compat);

    /**
     * Describes an object containing the correctly mapped touch events for the browser.
     */
    export interface ITouchMapping<T> extends IObject<T> {
        /**
         * An event type for touch start.
         */
        $touchstart: T;

        /**
         * An event type for touch end.
         */
        $touchend: T;

        /**
         * An event type for touch move.
         */
        $touchmove: T;

        /**
         * An event type for touch cancel.
         */
        $touchcancel: T;
    }

    /**
     * Describes an object containing the correctly mapped touch events for the browser.
     */
    export interface IMappedTouchEvents extends ITouchMapping<string> {
        /**
         * An event type for touch start.
         */
        $touchstart: string;

        /**
         * An event type for touch end.
         */
        $touchend: string;

        /**
         * An event type for touch move.
         */
        $touchmove: string;

        /**
         * An event type for touch cancel.
         */
        $touchcancel: string;
    }

    /**
     * Describes an object containing the properly prefixed animation events.
     */
    export interface IAnimationEvents extends IObject<string> {
        /**
         * The animation identifier.
         */
        $animation: string;

        /**
         * The animation start event.
         */
        $animationStart: string;

        /**
         * The animation end event.
         */
        $animationEnd: string;

        /**
         * The animation iteration event.
         */
        $animationIteration: string;

        /**
         * The transition identifier.
         */
        $transition: string;

        /**
         * The transition start event.
         */
        $transitionStart: string;

        /**
         * The transition end event.
         */
        $transitionEnd: string;
    }

    /**
     * Describes an object that contains information regarding the browser's 
     * vendor prefix.
     */
    export interface IVendorPrefix extends IObject<string> {
        /**
         * The lowercase representation of the browser's vendor prefix.
         */
        lowerCase: string;

        /**
         * The css representation of the browser's vendor prefix 
         * denoted by -{prefix}-.
         */
        css: string;

        /**
         * The common uppercase representation of the browser's vendor prefix 
         * generally denoted by it beginning with a capital letter or all capital 
         * in the case of MS.
         */
        upperCase: string;
    }

    /**
     * An extensible class defining common utilities and helper functions.
     */
    export class Utils {
        /**
         * An empty method for quickly creating dummy objects.
         */
        noop(): void { }

        /**
         * Allows you to extend the properties of an object with any number 
         * of other objects. If objects share properties, the last object in the
         * arguments will take precedence. This method is only a shallow copy of
         * all the source objects to the destination object.
         * @param {any} destination The destination object to extend.
         * @param {Array<any>} ...sources Any number of objects with which to extend the 
         * destination object.
         */
        extend(destination: any, ...sources: any[]): any {
            return extend.apply(null, [destination].concat(sources));
        }

        /**
         * Allows you to extend the properties of an object with any number 
         * of other objects. If objects share properties, the last object in the
         * arguments will take precedence. This method is a deep copy of
         * all the source objects to the destination object.
         * @param {any} destination The destination object to extend.
         * @param {Array<any>} ...sources Any number of objects with which to extend the 
         * destination object.
         */
        deepExtend(destination: any, ...sources: any[]): any {
            return extend.apply(null, [true, destination].concat(sources));
        }

        /**
         * Creates a copy of the passed-in object. If deep is true it will 
         * be a deep copy (duplicate), else nested objects/arrays will be copied by reference
         * and not duplicated.
         * @param {T} obj The object to clone.
         * @param {boolean} deep? Whether or not it is a deep clone.
         */
        clone<T>(obj: T, deep?: boolean): T {
            return _clone(obj, deep);
        }

        /**
         * Takes in anything and determines if it is a type of Object.
         * @param {any} obj Anything.
         */
        isObject(obj: any): boolean {
            return isObject(obj);
        }

        /**
         * Takes in anything and determines if it is a window object.
         * @param {any} obj Anything.
         */
        isWindow(obj: any): boolean {
            return isWindow(obj);
        }

        /**
         * Takes in anything and determines if it is a document object.
         * @param {any} obj Anything.
         */
        isDocument(obj: any): boolean {
            return isDocument(obj);
        }

        /**
         * Takes in anything and determines if it is a Node.
         * @param {any} obj Anything.
         */
        isNode(obj: any): boolean {
            return isNode(obj);
        }

        /**
         * Takes in anything and determines if it is a DocumentFragment.
         * @param {any} obj Anything.
         */
        isDocumentFragment(obj: any): boolean {
            return isDocumentFragment(obj);
        }

        /**
         * Takes in anything and determines if it is a string.
         * @param {any} obj Anything.
         */
        isString(obj: any): boolean {
            return isString(obj);
        }

        /**
         * Takes in anything and determines if it is a RegExp object.
         * @param {any} obj Anything.
         */
        isRegExp(obj: any): boolean {
            return isRegExp(obj);
        }

        /**
         * Takes in anything and determines if it is a Promise object.
         * @param {any} obj Anything.
         */
        isPromise(obj: any): boolean {
            return isPromise(obj);
        }

        /**
         * Takes in anything and determines if it is empty. Useful for
         * checking for empty strings, arrays, or objects without keys.
         * @param {any} obj Anything.
         * false otherwise.
         */
        isEmpty(obj: any): boolean {
            return isEmpty(obj);
        }

        /**
         * Takes in anything and determines if it is a boolean.
         * @param {any} obj Anything.
         */
        isBoolean(obj: any): boolean {
            return isBoolean(obj);
        }

        /**
         * Takes in anything and determines if it is a number.
         * @param {any} obj Anything.
         */
        isNumber(obj: any): boolean {
            return isNumber(obj);
        }

        /**
         * Takes in anything and determines if it is a function.
         * @param {any} obj Anything.
         */
        isFunction(obj: any): boolean {
            return isFunction(obj);
        }

        /**
         * Takes in anything and determines if it is null or undefined.
         * @param {any} obj Anything.
         */
        isNull(obj: any): boolean {
            return isNull(obj);
        }

        /**
         * Takes in anything and determines if it is undefined.
         * @param {any} obj Anything.
         */
        isUndefined(obj: any): boolean {
            return isUndefined(obj);
        }

        /**
         * Takes in anything and determines if it is an Array.
         * @param {any} obj Anything.
         */
        isArray(obj: any): boolean {
            return isArray(obj);
        }

        /**
         * Takes in anything and determines if it has array-like qualities.
         * @param {any} obj Anything.
         * Array, string, arguments, or NodeList), false otherwise.
         */
        isArrayLike(obj: any): boolean {
            return isArrayLike(obj);
        }

        /**
         * Takes in anything and determines if it is a Date object.
         * @param {any} obj Anything.
         */
        isDate(obj: any): boolean {
            return isDate(obj);
        }

        /**
         * Takes in an array and a function to evaluate the properties in the array.
         * Returns a filtered array of objects resulting from evaluating the function.
         * @param {plat.IListIterator<T, boolean>} iterator The iterator function to call with array's properties. 
         * Returns true if the property should be kept, false otherwise.
         * @param {Array<T>} array The Array to filter.
         * @param {any} context? An optional context to bind to the iterator.
         */
        filter<T>(iterator: IListIterator<T, boolean>, array: Array<T>, context?: any): Array<T>;
        /**
         * Takes in an object/array and a function to evaluate the properties in the object/array.
         * Returns a filtered array of objects resulting from evaluating the function.
         * @param {plat.IObjectIterator<T, boolean>} iterator The iterator function to call with array's properties. 
         * Returns true if the property should be kept, false otherwise.
         * @param {plat.IObject<T>} obj The object to filter.
         * @param {any} context? An optional context to bind to the iterator.
         */
        filter<T>(iterator: IObjectIterator<T, boolean>, obj: IObject<T>, context?: any): Array<T>;
        filter(iterator: (value: any, key: any, obj: any) => boolean, obj: any, context?: any): Array<any> {
            return filter(iterator, obj, context);
        }

        /**
         * Takes in a list and object containing key/value pairs to search for in the list.
         * @param {Object} properties An object containing key/value pairs to match with obj's values.
         * @param {Array<T>} array The list used for searching for properties.
         */
        where<T>(properties: Object, array: Array<T>): Array<T> {
            return where(properties, array);
        }

        /**
         * Takes in an Array and a function to iterate over. Calls the iterator function with every property
         * in the Array, then returns the object.
         * @param {plat.IListIterator<T, void>} iterator A method that takes in a value, index, and the object.
         * @param {Array<T>} array An Array.
         * @param {any} context? An optional context to bind to the iterator.
         */
        forEach<T>(iterator: IListIterator<T, void>, array: Array<T>, context?: any): Array<T>;
        /**
         * Takes in an Array and a function to iterate over. Calls the iterator function with every property
         * in the Array, then returns the object.
         * @param {plat.IObjectIterator<T, void>} iterator A method that takes in a value, index, and the object.
         * @param {plat.IObject<T>} obj An object.
         * @param {any} context? An optional context to bind to the iterator.
         */
        forEach<T>(iterator: IObjectIterator<T, void>, obj: IObject<T>, context?: any): IObject<T>;
        forEach(iterator: (value: any, key: any, obj: any) => void, obj: any, context?: any): any {
            return forEach(iterator, obj, context);
        }

        /**
         * Takes in an object and an iterator function. Calls the iterator with all the values in the object. The 
         * iterator can transform the object and return it. The returned values will be pushed to an Array and 
         * returned.
         * @param {plat.IListIterator<T, R>} iterator The transformation function.
         * @param {Array<T>} array An Array.
         * @param {any} context? An optional context to bind to the iterator.
         */
        map<T, R>(iterator: IListIterator<T, R>, array: Array<T>, context?: any): Array<R>;
        /**
         * Takes in an object and an iterator function. Calls the iterator with all the values in the object. The 
         * iterator can transform the object and return it. The returned values will be pushed to an Array and 
         * returned.
         * @param {(value: T, index: number, obj: any) => U} iterator The transformation function.
         * @param {plat.IObject<T>} obj An Object.
         * @param {any} context? An optional context to bind to the iterator.
         */
        map<T, R>(iterator: IObjectIterator<T, R>, obj: IObject<T>, context?: any): Array<R>;
        map(iterator: (value: any, key: any, obj: any) => any, obj: any, context?: any): Array<any> {
            return map<any, any>(iterator, obj, context);
        }

        /**
         * Takes in an array and an iterator function. Calls the iterator with all the values in the array. The 
         * iterator can return a promise the will resolve with the mapped value. The returned values will be pushed 
         * to an Array. A promise is returned that will resolve when all the iterators have resolved.
         * @param {plat.IListIterator<T, plat.async.IThenable<R>>} iterator The transformation function.
         * @param {Array<T>} array An array.
         * @param {any} context? An optional context to bind to the iterator.
         */
        mapAsync<T, R>(iterator: IListIterator<T, async.IThenable<R>>, array: Array<T>, context?: any): async.IThenable<Array<R>>;
        /**
         * Takes in an object and an iterator function. Calls the iterator with all the values in the object. The 
         * iterator can return a promise the will resolve with the mapped value. The returned values will be pushed 
         * to an Array. A promise is returned that will resolve when all the iterators have resolved.
         * @param {plat.IObjectIterator<T, plat.async.IThenable<R>>} iterator The transformation function.
         * @param {plat.IObject<T>} obj An Object.
         * @param {any} context? An optional context to bind to the iterator.
         */
        mapAsync<T, R>(iterator: IObjectIterator<T, async.IThenable<R>>, obj: IObject<T>, context?: any): plat.async.IThenable<Array<R>>;
        mapAsync<T, R>(iterator: (value: T, key: any, obj: any) => plat.async.IThenable<R>, obj: any,
            context?: any): plat.async.IThenable<Array<R>> {
            return mapAsync(iterator, obj, context);
        }

        /**
         * Takes in an array and an iterator function. Calls the iterator with all the values in the array. The 
         * iterator can return a promise the will resolve with the mapped value. The next value in the array will not be passed to 
         * the iterator until the previous promise fulfills.
         * @param {plat.IListIterator<T, plat.async.IThenable<R>>} iterator The transformation function.
         * @param {Array<T>} array An Array.
         * @param {any} context? An optional context to bind to the iterator.
         */
        mapAsyncInOrder<T, R>(iterator: IListIterator<T, async.IThenable<R>>, array: Array<T>,
            context?: any): plat.async.IThenable<Array<R>> {
            return mapAsyncInOrder(iterator, array, context);
        }

        /**
         * Takes in an array and an iterator function. Calls the iterator with all the values in the array in descending order. The 
         * iterator can return a promise the will resolve with the mapped value. The next value in the array will not be passed to 
         * the iterator until the previous promise fulfills.
         * @param {plat.IListIterator<T, plat.async.IThenable<R>>} iterator The transformation function.
         * @param {Array<T>} array An Array.
         * @param {any} context? An optional context to bind to the iterator.
         */
        mapAsyncInDescendingOrder<T, R>(iterator: IListIterator<T, async.IThenable<R>>, array: Array<T>,
            context?: any): plat.async.IThenable<Array<R>> {
            return mapAsyncInDescendingOrder(iterator, array, context);
        }

        /**
         * Takes in an object and a property to extract from all of the object's values. Returns an array of
         * the 'plucked' values.
         * @param {string} key The property to 'pluck' from each value in the array.
         * @param {Array<T>} array The array to pluck the key from
         */
        pluck<T extends {}>(key: string, array: Array<T>): Array<any> {
            return map<T, any>((value) => (<any>value)[key], array);
        }

        /**
         * Takes in an array and an iterator. Evaluates all the values in the array with the iterator.
         * Returns true if any of the iterators return true, otherwise returns false.
         * @param {plat.IListIterator<T, boolean>} iterator A method with which to evaluate all the values in obj.
         * @param {Array<T>} array An array.
         * @param {any} context? An optional context to bind to the iterator.
         */
        some<T>(iterator: IListIterator<T, boolean>, array: Array<T>, context?: any): boolean;
        /**
         * Takes in an array and an iterator. Evaluates all the values in the array with the iterator.
         * Returns true if any of the iterators return true, otherwise returns false.
         * @param {plat.IObjectIterator<T, boolean>} iterator A method with which to evaluate all the values in obj.
         * @param {plat.IObject<T>} obj An object.
         * @param {any} context? An optional context to bind to the iterator.
         */
        some<T>(iterator: IObjectIterator<T, boolean>, obj: IObject<T>, context?: any): boolean;
        some(iterator: (value: any, key: any, obj: any) => boolean, obj: any, context?: any): boolean {
            return some(iterator, obj, context);
        }

        /**
         * Takes in a method and array of arguments to pass to that method. Delays calling the method until 
         * after the current call stack is clear. Equivalent to a setTimeout with a timeout of 0.
         * @param {(...args: Array<any>) => void} method The method to call.
         * @param {Array<any>} args? The arguments to apply to the method.
         * @param {any} context? An optional context to bind to the method.
         */
        postpone(method: (...args: any[]) => void, args?: Array<any>, context?: any) {
            return defer(method, 0, args, context);
        }

        /**
         * Takes in a method and array of arguments to pass to that method. Delays calling the method until 
         * after the current call stack is clear. Equivalent to a setTimeout with the specified timeout value.
         * @param {(...args: Array<any>) => void} method The method to call.
         * @param {number} timeout The time (in milliseconds) to delay before calling the provided method
         * @param {Array<any>} args? The arguments to apply to the method.
         * @param {any} context? An optional context to bind to the method.
         */
        defer(method: (...args: any[]) => void, timeout: number, args?: Array<any>, context?: any) {
            return defer(method, timeout, args, context);
        }

        /**
         * Uses requestAnimationFrame if it is available, else it does a setTimeout.
         * @param {FrameRequestCallback} method The method to call when the request is fulfilled.
         * @param {any} context? An optional context to bind to the method.
         */
        requestAnimationFrame(method: FrameRequestCallback, context?: any): IRemoveListener {
            return requestAnimationFrameGlobal(method, context);
        }

        /**
         * Takes in a prefix and returns a unique identifier string with the prefix preprended. If no prefix
         * is specified, none will be prepended.
         * @param {string} prefix? A string prefix to prepend tothe unique ID.
         */
        uniqueId(prefix?: string) {
            return uniqueId(prefix);
        }

        /**
         * Takes in a spinal-case, dot.case, or snake_case string and returns 
         * a camelCase string. Also can turn a string into camelCase with space 
         * as a delimeter.
         * @param {string} str The spinal-case, dot.case, or snake_case string.
         */
        camelCase(str: string) {
            return camelCase(str);
        }
    }
    register.injectable(__Utils, Utils);

    /**
     * The Type for a Utils list iterator callback method.
     */
    export interface IListIterator<T, R> {
        /**
         * A method signature for IListIterator.
         * @param {T} value The value for an object during an iteration.
         * @param {number} index The index where the value can be found.
         * @param {Array<T>} list The array passed into the util method.
         */
        (value: T, index: number, list: Array<T>): R;
    }

    /**
     * The Type for a Utils object iterator callback method.
     */
    export interface IObjectIterator<T, R> {
        /**
         * A method signature for IObjectIterator.
         * @param {T} value The value for an object during an iteration.
         * @param {string} key The key where the value can be found.
         * @param {plat.IObject<T>} obj The object passed into the util method.
         */
        (value: T, key: string, obj: IObject<T>): R;
    }

    /**
     * The Type for referencing the '_window' injectable as a dependency. 
     * Used so that the Window can be mocked.
     */
    export function Window(): Window {
        return window;
    }

    register.injectable(__Window, Window);

    /**
     * The Type for referencing the '_document' injectable as a dependency. 
     * Used so that the Window can be mocked.
     */
    export function Document(_window?: Window): Document {
        return _window.document;
    }

    register.injectable(__Document, Document, [__Window]);

    /**
     * Holds classes and interfaces related to expression handling in platypus.
     */
    export module expressions {
        /**
         * A class for keeping track of commonly used regular expressions.
         */
        export class Regex {
            /**
             * A regular expression for finding markup in a string.
             */
            markupRegex: RegExp;

            /**
             * Finds the arguments in a method expression.
             * // outputs ["('foo', 'bar', 'baz')", "'foo', 'bar', 'baz'"]
             * exec("myFunction('foo', 'bar', 'baz')");
             */
            argumentRegex = /\((.*)\)/;

            /**
             * Given a string, finds the root alias name if that string is an
             * alias path.
             *   // outputs ['context']
             *   exec('@context.foo');
             * // outputs null
             * exec('@context');
             */
            aliasRegex = /[^@\.\[\(]+(?=[\.\[\(])/;

            /**
             * Finds '/*.html' or '/*.htm' in a url. Useful for removing 
             * the html file out of the url.
             * // outputs ['/index.html']
             * exec('http://localhost:8080/index.html');
             */
            initialUrlRegex = /\/[^\/]*\.(?:html|htm)/;

            /**
             * Finds a protocol delimeter in a string (e.g. ://).
             */
            protocolRegex = /:\/\//;

            /**
             * Looks for any invalid variable syntax.
             */
            invalidVariableRegex = /[^a-zA-Z0-9@_$]/;

            /**
             * Grabs the file name from a file path.
             */
            fileNameRegex = /.*(?:\/|\\)/;

            /**
             * Determines if a character is correlated with a shifted key code.
             */
            shiftedKeyRegex = /[A-Z!@#$%^&*()_+}{":?><|~]/;

            /**
             * Determines if a url is relative or absolute.
             */
            fullUrlRegex = /^(?:[a-z0-9\-]+:)(?:\/\/)?|(?:\/\/)/i;

            /**
             * Determines if an email address is valid.
             */
            validateEmail = new RegExp('^(([^<>()[\\]\\\.,;:\\s@\\"]+(\\.[^<>()[\\]\\\.,;:\\s@\\"]+)*)|' +
                '(\\".+\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|' +
                '(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$');

            /**
             * Determines if a telephone number is valid.
             */
            validateTelephone = /^\+?[0-9\.\-\s]*$/;

            /**
             * A regular expression for matching dynamic segments in a route.
             */
            dynamicSegmentsRegex = /^:([^\/]+)$/;

            /**
             * A regular expression for matching splat segments in a route.
             */
            splatSegmentRegex = /^\*([^\/]+)$/;

            /**
             * A regular expression for matching or removing all newline characters.
             */
            get newLineRegex(): RegExp {
                return /\r|\n/g;
            }

            /**
             * Finds optional parameters in a route string.
             * // outputs ['(/foo)', '/foo']
             * exec('(/foo)/bar');
             * // outputs ['(/foo)', '/foo']
             * exec('(/foo))');
             */
            get optionalRouteRegex(): RegExp {
                return /\((.*?)\)/g;
            }

            /**
             * Finds named parameters in a route string.
             * // outputs [':foo']
             * exec('/:foo/bar')
             * // outputs [':foo']
             * exec('(/:foo)/bar');
             */
            get namedParameterRouteRegex(): RegExp {
                return /(\(\?)?:\w+/g;
            }

            /**
             * Finds an alphanumeric wildcard match in a route string.
             * // outputs ['*bar']
             * exec('/foo/*bar/baz');
             */
            get wildcardRouteRegex(): RegExp {
                return /\*\w*/g;
            }

            /**
             * Finds invalid characters in a route string.
             * // outputs ['?']
             * exec('/foo/bar?query=baz');
             */
            get escapeRouteRegex(): RegExp {
                return /[\-{}\[\]+?.,\\\^$|#\s]/g;
            }

            /**
             * Finds delimeters for spinal-case, snake_case, and dot.case.
             * useful for converting to camelCase. Also can turn a string
             * into camelCase with space as a delimeter.
             * // outputs ['-o', '-', 'o']
             * exec('plat-options');
             * // outputs ['.c', '.', 'c']
             * exec('plat.config');
             * // outputs ['_v', '_', 'v']
             * exec('plat_var');
             * // outputs [' W', ' ', 'W']
             * exec('Hello World');
             */
            get camelCaseRegex(): RegExp {
                return /([\-_\.\s])(\w+?)/g;
            }

            /**
             * Finds all whitespace and newline characters 
             * not in string literals. Needs to be combined 
             * with string replace function using $1 argument.
             */
            get whiteSpaceRegex(): RegExp {
                return /("[^"]*?"|'[^']*?')|[\s\r\n\t\v]/g;
            }

            /**
             * Finds all single and double quotes.
             */
            get quotationRegex(): RegExp {
                return /'|"/g;
            }

            /**
             * The constructor for a Regex. Creates the markup regular expression.
             */
            constructor() {
                this.markupRegex = new RegExp(__startSymbol + '[\\S\\s]*' + __endSymbol);
            }
        }

        register.injectable(__Regex, Regex);

        /**
         * A class that is responsible for taking in a JavaScript expression string and
         * finding all of its tokens (i.e. delimiters, operators, etc).
         */
        export class Tokenizer {
            protected static _inject: any = {
                _Exception: __ExceptionStatic
            };

            /**
             * Reference to the IExceptionStatic injectable.
             */
            protected _Exception: IExceptionStatic;

            /**
             * The input string to tokenize.
             */
            protected _input: string;

            /**
             * The previous character during tokenization.
             */
            private __previousChar = '';
            /**
             * A regular expression for determining if a potential variable is valid syntax.
             */
            private __variableRegex = (<expressions.Regex>acquire(__Regex)).invalidVariableRegex;
            /**
             * A queue used for determining the output of the tokenization.
             */
            private __outputQueue: Array<IToken> = [];
            /**
             * A stack used for determining operator precedence and aiding with the evaluation 
             * operands.
             */
            private __operatorStack: Array<IToken> = [];
            /**
             * A collection used for determining argument count for certain operations.
             */
            private __argCount: Array<any> = [];
            /**
             * A collection used for determining argument count for certain object literal operations.
             */
            private __objArgCount: Array<number> = [];
            /**
             * The last character encountered while in an operation dealing with the colon operator. 
             * Needs to be an array due to the possibility of nested colon operations.
             */
            private __lastColonChar: Array<string> = [];
            /**
             * The last character encountered while in an operation dealing with commas. 
             * Needs to be an array due to the possibility of nested comma operations.
             */
            private __lastCommaChar: Array<string> = [];
        
            /**
             * Takes in an expression string and outputs a tokenized collection of 
             * ITokens.
             * @param {string} input The JavaScript expression string to tokenize.
             * ITokens.
             */
            createTokens(input: string): Array<IToken> {
                if (isNull(input)) {
                    return [];
                }

                this._input = input;

                var char: string,
                    length = input.length,
                    ternary = 0,
                    ternaryFound = false,
                    isSpace = this._isSpace,
                    isAlphaNumeric = this._isAlphaNumeric;

                for (var index = 0; index < length; index++) {
                    char = input[index];

                    // space
                    if (isSpace(char)) {
                        continue;
                    } else if (isAlphaNumeric(char)) {
                        index = this.__handleAplhaNumeric(index, char);
                    } else if (isDelimiter(char)) {
                        switch (char) {
                            case '.':
                                index = this.__handlePeriod(index, char);
                                break;
                            case '{':
                                this.__handleLeftBrace(char);
                                break;
                            case '}':
                                this.__handleRightBrace(char);
                                break;
                            case '[':
                                this.__handleLeftBracket(char);
                                break;
                            case ']':
                                this.__handleRightBracket(char);
                                break;
                            case '(':
                                this.__handleLeftParenthesis(char);
                                break;
                            case ')':
                                this.__handleRightParenthesis(char);
                                break;
                            case ',':
                                this.__handleComma(char);
                                break;
                            case '\'':
                            case '"':
                                index = this.__handleStringLiteral(index, char);
                                break;
                        }
                    } else if (isOperator(char)) {
                        switch (char) {
                            case '?':
                                ternaryFound = true;
                                ternary++;
                                this.__handleQuestion(char);
                                break;
                            case ':':
                                ternary = this.__handleColon(char, ternary);
                                break;
                            default:
                                index = this.__handleOtherOperator(index, char);
                        }
                        // semicolon throw error
                    } else if (char === ';') {
                        this._throwError('Unexpected semicolon');
                        return [];
                    }

                    this.__previousChar = char;
                }

                if (ternaryFound && (ternary > 0)) {
                    this._throwError('Improper ternary expression');
                    return [];
                } else if (this.__objArgCount.length > 0) {
                    this._throwError('Improper object literal');
                    return [];
                }

                this.__popRemainingOperators();
                var output = this.__outputQueue;
                this._resetTokenizer();

                return output;
            }

            /**
             * Determines character type.
             * @param {string} char The character to check.
             * @param {boolean} isNumberLike Whether or not the character resembles a number.
             */
            protected _checkType(char: string, isNumberLike: boolean): boolean {
                if (isNumberLike) {
                    return this._isNumeric(char);
                }

                return this._isAlphaNumeric(char);
            }
        
            /**
             * Looks ahead in the expression to group similar character types.
             * @param {string} char The current character in the expression string.
             * @param {number} index The current index in the expression string.
             * @param {boolean} isNumberLike Whether or not the character resembles a number.
             */
            protected _lookAhead(char: string, index: number, isNumberLike: boolean): string {
                var ch: string,
                    input = this._input,
                    maxLength = input.length;

                while (++index < maxLength) {
                    ch = input[index];
                    if (this._checkType(ch, isNumberLike)) {
                        char += ch;
                    } else {
                        break;
                    }
                }

                return char;
            }
        
            /**
             * Looks ahead in the expression to try and complete the 
             * current operator.
             * @param {string} char The operator to find.
             * @param {number} index The current index in the expression string.
             */
            protected _lookAheadForOperatorFn(char: string, index: number): string {
                var ch: string,
                    fn = char,
                    input = this._input,
                    maxLength = input.length;

                while (++index < maxLength) {
                    ch = input[index];
                    fn += ch;

                    if (isOperator(fn)) {
                        char = fn;
                    } else {
                        break;
                    }
                }

                return char;
            }
        
            /**
             * Looks ahead in the expression until it comes to the ending 
             * character to try and complete a particular sequence 
             * (e.g. - a string literal). Also strips the first and last 
             * characters of the result (i.e. removes the delimiters).
             * @param {string} endChar The ending character.
             * @param {number} index The current index in the expression string.
             * the first character and end character being looked ahead for.
             */
            protected _lookAheadForDelimiter(endChar: string, index: number): string {
                var char = '',
                    ch: string,
                    input = this._input,
                    maxLength = input.length;

                while ((++index < maxLength) && (ch = input[index]) !== endChar) {
                    char += ch;
                }

                return char;
            }
        
            /**
             * Pops the operator stack onto the output queue until a particular 
             * operator value is reached.
             * @param {plat.expressions.IToken} topOperator The top of the operator stack.
             * @param {string} char The operator value being searched for.
             * @param {string} error The error to throw in the case that the expression 
             * is invalid.
             */
            protected _popStackForVal(topOperator: IToken, char: string, error: string): void {
                var outputQueue = this.__outputQueue,
                    operatorStack = this.__operatorStack;

                while (topOperator.val !== char) {
                    outputQueue.push(operatorStack.shift());
                    topOperator = operatorStack[0];
                    if (operatorStack.length === 0) {
                        return this._throwError(error);
                    }
                }
            }
        
            /**
             * Check if the "val" property on an IToken 
             * is present in a particular character string.
             * @param {plat.expressions.IToken} obj The IToken 
             * with the "val" property to compare.
             * @param {string} char The char to compare with.
             */
            protected _isValEqual(obj: IToken, char: string): boolean {
                if (isNull(obj) || isNull(obj.val)) {
                    return isNull(char);
                } else if (obj.val === '') {
                    return char === '';
                }
                return char.indexOf(obj.val) !== -1;
            }
        
            /**
             * Check if the "val" property on an IToken 
             * is not present in a particular character string.
             * @param {plat.expressions.IToken} obj The IToken 
             * with the "val" property to compare.
             * @param {string} char The char to compare with.
             */
            protected _isValUnequal(obj: IToken, char: string): boolean {
                if (isNull(obj) || isNull(obj.val)) {
                    return !isNull(char);
                } else if (obj.val === '') {
                    return char !== '';
                }
                return char.indexOf(obj.val) === -1;
            }
        
            /**
             * Resets all the tokenizer's properties.
             */
            protected _resetTokenizer(): void {
                this._input = null;
                this.__previousChar = '';
                this.__outputQueue = [];
                this.__operatorStack = [];
                this.__argCount = [];
                this.__objArgCount = [];
                this.__lastColonChar = [];
                this.__lastCommaChar = [];
            }
        
            /**
             * Throws a fatal exception in the case of an error.
             * @param {string} error The error message to throw.
             */
            protected _throwError(error: string): void {
                var _Exception: IExceptionStatic = this._Exception;
                _Exception.fatal(error + ' in ' + this._input, _Exception.PARSE);
            }
        
            /**
             * Checks if a single character is numeric.
             * @param {string} char The character to check.
             */
            protected _isNumeric(char: string): boolean {
                return ('0' <= char && char <= '9');
            }
        
            /**
             * Checks if a single character is a space.
             * @param {string} char The character to check.
             */
            protected _isSpace(char: string): boolean {
                return (char === ' ' ||
                    char === '\r' ||
                    char === '\n' ||
                    char === '\t' ||
                    char === '\v' ||
                    char === '\u00A0');
            }
        
            /**
             * Checks if a single character is alphanumeric.
             * @param {string} char The character to check.
             */
            protected _isAlphaNumeric(char: string): boolean {
                return ('a' <= char && char <= 'z' ||
                    'A' <= char && char <= 'Z' ||
                    '0' <= char && char <= '9' ||
                    '@' === char ||
                    '_' === char ||
                    '$' === char);
            }
        
            /**
             * Checks if a string has proper JavaScript variable syntax.
             * @param {string} input The string to check.
             * JavaScript variable.
             */
            protected _isStringValidVariable(input: string): boolean {
                return !this.__variableRegex.test(input);
            }

            /**
             * Handles tokenizing an alphanumeric character.
             * @param {number} index The current index in the string being tokenized.
             * @param {string} char The current char.
             */
            private __handleAplhaNumeric(index: number, char: string): number {
                var isNumberLike = this._isNumeric(char),
                    lookAhead = this._lookAhead(char, index, isNumberLike);

                this.__outputQueue.push(isNumberLike ? ({ val: Number(lookAhead), args: 0 }) :
                    <IToken>({ val: lookAhead, args: -1 }));

                return index + lookAhead.length - 1;
            }

            /**
             * Handles tokenizing a "." character.
             * @param {number} index The current index in the string being tokenized.
             * @param {string} char The current char.
             */
            private __handlePeriod(index: number, char: string): number {
                var outputQueue = this.__outputQueue,
                    operatorStack = this.__operatorStack,
                    topOutputLength = outputQueue.length - 1,
                    previousChar = this.__previousChar,
                    lookAhead: string;

                // if output queue is null OR space or operator or ( or , before .
                if (topOutputLength < 0 ||
                    this._isSpace(previousChar) ||
                    !isNull(OPERATORS[previousChar]) ||
                    previousChar === '(' ||
                    previousChar === ',') {
                    lookAhead = this._lookAhead(char, index, true);
                    index += lookAhead.length - 1;
                    outputQueue.push({ val: parseFloat(lookAhead), args: 0 });
                } else if (!(isNull(outputQueue[topOutputLength]) ||
                    !isNumber(Number(outputQueue[topOutputLength].val)) ||
                    this._isValEqual(outputQueue[topOutputLength - 1], char))) {
                    lookAhead = this._lookAhead(char, index, true);
                    index += lookAhead.length - 1;
                    outputQueue[topOutputLength].val += parseFloat(lookAhead);
                } else if (this._isValEqual(operatorStack[0], char)) {
                    outputQueue.push({ val: char, args: 0 });
                } else {
                    operatorStack.unshift({ val: char, args: 0 });
                }

                return index;
            }
            /**
             * Handles tokenizing a "{" character.
             * @param {string} char The current char.
             */
            private __handleLeftBrace(char: string): void {
                this.__operatorStack.unshift({ val: char, args: 0 });
                this.__objArgCount.push(0);
                this.__lastColonChar.push(char);
                this.__lastCommaChar.push(char);
            }
            /**
             * Handles tokenizing a "}" character.
             * @param {string} char The current char.
             */
            private __handleRightBrace(char: string): void {
                var operatorStack = this.__operatorStack,
                    topOperator = operatorStack[0],
                    lastArgCount = this.__objArgCount.pop();

                if (isNull(topOperator)) {
                    return this._throwError('Improper object literal');
                }

                this._popStackForVal(topOperator, '{', 'Improper object literal');

                // pop left brace off stack
                operatorStack.shift();

                this.__lastColonChar.pop();
                this.__lastCommaChar.pop();

                this.__outputQueue.push({ val: '{}', args: lastArgCount });
            }
            /**
             * Handles tokenizing a "[" character.
             * @param {string} char The current char.
             */
            private __handleLeftBracket(char: string): void {
                var previousChar = this.__previousChar,
                    operatorStack = this.__operatorStack;

                if (this._isValEqual(operatorStack[0], '.')) {
                    this.__outputQueue.push(operatorStack.shift());
                }

                operatorStack.unshift({ val: char, args: 0 });

                this.__argCount.push({
                    num: 0,
                    isArray: !(previousChar === ']' ||
                        previousChar === ')' ||
                        this._isAlphaNumeric(previousChar))
                });

                this.__lastCommaChar.push(char);
            }
            /**
             * Handles tokenizing a "]" character.
             * @param {string} char The current char.
             */
            private __handleRightBracket(char: string): void {
                var operatorStack = this.__operatorStack,
                    topOperator = operatorStack[0],
                    lastArgCountObj = this.__argCount.pop();

                if (isNull(topOperator) || isNull(lastArgCountObj)) {
                    return this._throwError('Brackets mismatch');
                }

                if (!lastArgCountObj.isArray) {
                    lastArgCountObj.num--;
                }

                this._popStackForVal(topOperator, '[', 'Brackets mismatch');

                // pop left bracket off stack
                operatorStack.shift();

                this.__lastCommaChar.pop();
                // check if function on top of stack
                this.__outputQueue.push({
                    val: '[]',
                    args: (this.__previousChar === '[') ? -1 : lastArgCountObj.num + 1
                });
            }
            /**
             * Handles tokenizing a "(" character.
             * @param {string} char The current char.
             */
            private __handleLeftParenthesis(char: string): void {
                var previousChar = this.__previousChar,
                    operatorStack = this.__operatorStack;

                if (this._isAlphaNumeric(previousChar) || previousChar === ']' || previousChar === ')') {
                    var outputQueue = this.__outputQueue,
                        topOutput = outputQueue[outputQueue.length - 1];

                    if (this._isValEqual(topOutput, '[]')) {
                        operatorStack.unshift(outputQueue.pop());
                        operatorStack.unshift(outputQueue.pop());
                    } else if (!(this._isValEqual(topOutput, '()') || this._isNumeric(topOutput.val))) {
                        operatorStack.unshift(outputQueue.pop());
                    }

                    this.__argCount.push({ num: 0 });
                }

                operatorStack.unshift({ val: char, args: 0 });
                this.__lastCommaChar.push(char);
            }
            /**
             * Handles tokenizing a ")" character.
             * @param {string} char The current char.
             */
            private __handleRightParenthesis(char: string): void {
                var operatorStack = this.__operatorStack,
                    topOperator = operatorStack[0],
                    localArgCountObj = this.__argCount.pop();

                if (isNull(topOperator)) {
                    return this._throwError('Parentheses mismatch');
                }

                this._popStackForVal(topOperator, '(', 'Parentheses mismatch');

                // pop left parenthesis off stack
                operatorStack.shift();

                this.__lastCommaChar.pop();

                // check if function on top of stack
                if (!isNull(localArgCountObj)) {
                    var localArgNum = localArgCountObj.num;
                    if (this.__previousChar === '(') {
                        if (this.__removeFnFromStack(localArgNum)) {
                            this.__outputQueue.push({
                                val: '()',
                                args: 0
                            });
                        }
                        return;
                    } else if (this.__removeFnFromStack(localArgNum + 1)) {
                        this.__outputQueue.push({
                            val: '()',
                            args: (localArgNum + 1)
                        });
                    }
                }
            }
            /**
             * Handles tokenizing a "," character.
             * @param {string} char The current char.
             */
            private __handleComma(char: string): void {
                var lastCommaArray = this.__lastCommaChar,
                    lastCommaArg = lastCommaArray[lastCommaArray.length - 1];

                if (lastCommaArg === '(' || lastCommaArg === '[') {
                    var argCountArray = this.__argCount,
                        length = argCountArray.length;

                    if (length > 0) {
                        // increment deepest fn count (don't need to increment obj count because we increment with colon)
                        argCountArray[length - 1].num++;
                    } else {
                        return this._throwError('Mismatch with ' + lastCommaArg);
                    }
                }

                var topOperator = this.__operatorStack[0];
                if (isNull(topOperator)) {
                    return this._throwError('Unexpected comma');
                }

                this._popStackForVal(topOperator, lastCommaArg, 'Unexpected comma');
            }
            /**
             * Handles tokenizing a string literal.
             * @param {number} index The current index in the string being tokenized.
             * @param {string} char The current char.
             */
            private __handleStringLiteral(index: number, char: string): number {
                var lookAhead = this._lookAheadForDelimiter(char, index),
                    operatorStack = this.__operatorStack;

                if (this._isValEqual(operatorStack[0], '([')) {
                    operatorStack.unshift({ val: lookAhead, args: 0 });
                } else {
                    this.__outputQueue.push({ val: lookAhead, args: 0 });
                }
                return index + lookAhead.length + 1;
            }

            /**
             * Handles tokenizing a "?" character.
             * @param {string} char The current char.
             */
            private __handleQuestion(char: string): void {
                this.__lastColonChar.push(char);
                this.__determinePrecedence(char);
            }
            /**
             * Handles tokenizing a ":" character.
             * @param {string} char The current char.
             * @param {number} ternary The current ternary counter. Increments when a ternary is found, 
             * decrements when a ternary is completed. It can be very useful when there is nested ternaries.
             */
            private __handleColon(char: string, ternary: number): number {
                var lastColonCharArray = this.__lastColonChar,
                    lastColonCharacter = lastColonCharArray[lastColonCharArray.length - 1],
                    outputQueue = this.__outputQueue;

                if (lastColonCharacter === '?') {
                    var operatorStack = this.__operatorStack,
                        topOperator = operatorStack[0];

                    if (isNull(topOperator)) {
                        this._throwError('Ternary mismatch');
                        return;
                    }

                    ternary--;
                    // pop latest colon char off queue
                    lastColonCharArray.pop();

                    this._popStackForVal(topOperator, '?', 'Ternary mismatch');

                    outputQueue.push(operatorStack.shift());
                    operatorStack.unshift({ val: char, args: -2 });
                } else if (lastColonCharacter === '{') {
                    var objArgCount = this.__objArgCount,
                        outputLast = outputQueue.length - 1;

                    objArgCount[objArgCount.length - 1]++;

                    if (outputLast < 0) {
                        this._throwError('Unexpected colon');
                        return;
                    }

                    outputQueue[outputLast].args = 1;
                } else {
                    this._throwError('Unexpected colon');
                    return;
                }

                return ternary;
            }
            /**
             * Handles tokenizing all other operators.
             * @param {number} index The current index in the string being tokenized.
             * @param {string} char The current char.
             */
            private __handleOtherOperator(index: number, char: string): number {
                var lookAhead = this._lookAheadForOperatorFn(char, index);
                this.__determinePrecedence(lookAhead);

                return index + lookAhead.length - 1;
            }
            /**
             * Pops operators left on the operator stack onto the output queue 
             * checking for mismatches.
             */
            private __popRemainingOperators(): void {
                var outputQueue = this.__outputQueue,
                    operatorStack = this.__operatorStack,
                    topOperator: IToken,
                    topOperatorVal: any;

                while (operatorStack.length > 0) {
                    topOperator = operatorStack.shift();
                    topOperatorVal = topOperator.val;
                    if (topOperatorVal === '(' || topOperatorVal === ')') {
                        return this._throwError('Parentheses mismatch');
                    }

                    outputQueue.push(topOperator);
                }
            }

            /**
             * Grabs essential token details for a given operator.
             * @param {string} operator The operator whose details are being requested.
             * operator including precedence, associativity, and an evaluation function denoted as 
             * an ITokenDetails object.
             */
            private __determineOperator(operator: string): ITokenDetails {
                switch (operator) {
                    case '+':
                    case '-':
                        if (this.__outputQueue.length === 0 || isOperator(this.__previousChar)) {
                            return OPERATORS['u' + operator];
                        }
                    default:
                        return OPERATORS[operator];
                }
            }
            /**
             * Determines the precedence of a given operator in relation to other operators 
             * in the operator stack and places it in the operator stack.
             * @param {string} operator The operator whose precedence is being determined.
             */
            private __determinePrecedence(operator: string): void {
                var determined = false,
                    operatorFn = this.__determineOperator(operator),
                    operatorPrecedence = operatorFn.precedence,
                    isLtR = operatorFn.associativity === 'ltr',
                    operatorStack = this.__operatorStack,
                    outputQueue = this.__outputQueue,
                    firstArrayOperator: ITokenDetails,
                    firstArrayVal: any;

                if (operatorStack.length === 0) {
                    operatorStack.unshift({ val: operator, args: operatorFn.fn.length - 2 });
                    return;
                }

                do {
                    firstArrayVal = operatorStack[0].val;
                    if (firstArrayVal === '.') {
                        outputQueue.push(operatorStack.shift());
                        continue;
                    }

                    firstArrayOperator = OPERATORS[firstArrayVal];
                    if (!(isNull(firstArrayOperator) ||
                        !(firstArrayOperator.precedence < operatorPrecedence ||
                            (isLtR && firstArrayOperator.precedence === operatorPrecedence)))) {
                        outputQueue.push(operatorStack.shift());
                    } else {
                        operatorStack.unshift({ val: operator, args: operatorFn.fn.length - 2 });
                        return;
                    }
                } while (operatorStack.length > 0);

                operatorStack.unshift({ val: operator, args: operatorFn.fn.length - 2 });
            }
            /**
             * Removes a reference to a function that is present in the operator stack and places 
             * it in the output queue.
             * @param {number} argCount The current local argument count used with functions, 
             * arrays, and object literals.
             */
            private __removeFnFromStack(argCount: number): boolean {
                var outputQueue = this.__outputQueue,
                    operatorStack = this.__operatorStack,
                    topOperator = operatorStack[0],
                    isValEqual = this._isValEqual,
                    isValUnequal = this._isValUnequal,
                    fnToken: IToken,
                    atLeastOne = false;

                while (!isNull(topOperator) &&
                    isValUnequal(topOperator, '([') &&
                    (this._isStringValidVariable(topOperator.val) ||
                        isValEqual(topOperator.val, '.[]') ||
                        isAccessor(topOperator.val))) {
                    fnToken = operatorStack.shift();
                    if (!(fnToken.args !== -1 || isValEqual(fnToken, '.[]'))) {
                        fnToken.args = -2;
                    }
                    outputQueue.push(fnToken);
                    topOperator = operatorStack[0];
                    atLeastOne = true;
                }

                if (!(atLeastOne || isValUnequal(outputQueue[outputQueue.length - argCount - 1], '()'))) {
                    atLeastOne = true;
                }

                return atLeastOne;
            }
        }

        register.injectable(__Tokenizer, Tokenizer);
    
        /**
         * Describes a single token in a string expression.
         */
        export interface IToken {
            /**
             * The string or number value of the token.
             */
            val: any;
        
            /**
             * Denotes the type of token, as well as the number
             * of arguments for a function if it is the token.
             * If -2: Denotes a function name unless indexed into with [] or a ternary expression.
             * If -1: Denotes a variable or empty array literal.
             * If 0: Denotes a number, keyword, object indexer (.[]), string literal,
             *  function with 0 arguments, or empty object literal
             * If 1: Denotes a function type with 1 argument, a property on an object literal,
             *  an object literal with 1 property, or an array literal with 1 entry.
             * If > 1: Denotes a function type with args arguments, an object literal with
             *  args properties, or an array literal with args entries.
             */
            args: number;
        }
    
        /**
         * Provides all the necessary details on how to evaluate a token.
         */
        export interface ITokenDetails {
            /**
             * The precedence that this token takes with respect to the 
             * evaluation order.
             */
            precedence: number;
        
            /**
             * Whether or not the token associates with the expression on
             * their left or right.
             */
            associativity: string;
        
            /**
             * A function used to evaluate an operator expression.
             */
            fn: Function;
        }

        /**
         * A class for parsing JavaScript expression strings and creating 
         * IParsedExpressions.
         */
        export class Parser {
            protected static _inject: any = {
                _tokenizer: __Tokenizer,
                _Exception: __ExceptionStatic
            };

            /**
             * Reference to the Tokenizer injectable.
             */
            protected _tokenizer: Tokenizer;

            /**
             * Reference to the IExceptionStatic injectable.
             */
            protected _Exception: IExceptionStatic;

            /**
             * A single expression's token representation created by a Tokenizer.
             */
            protected _tokens: Array<IToken> = [];

            /**
             * An expression cache. Used so that a JavaScript expression is only ever parsed once.
             */
            private __cache: IObject<IParsedExpression> = {};
            /**
             * A dynamically built string array that represents the evaluation function.
             */
            private __codeArray: Array<string> = [];
            /**
             * A list of all the identifiers discovered in the JavaScript expression string.
             */
            private __identifiers: Array<string> = [];
            /**
             * A temporary list of identifiers found used to build and evaluate each actual identifier.
             */
            private __tempIdentifiers: Array<string> = [];
            /**
             * An object whose keys represent a list of all unique aliases found in the JavaScript expression string.
             */
            private __aliases: IObject<boolean> = {};

            /**
             * Parses a JavaScript expression string.
             * @param {string} expression The JavaScript expression string to parse.
             * information about the expression as well as a way to evaluate its value.
             */
            parse(expression: string): IParsedExpression {
                var parsedObject = this.__cache[expression];

                if (!isNull(parsedObject)) {
                    return parsedObject;
                }

                this._tokens = this._tokenizer.createTokens(expression);

                parsedObject = this._evaluate(expression);

                var identifiers = parsedObject.identifiers;
                if (identifiers.length === 0) {
                    var noModel = parsedObject.evaluate(null);
                    parsedObject.evaluate = () => noModel;
                }

                this.__cache[expression] = parsedObject;

                return parsedObject;
            }

            /**
             * If a key is passed in, it clears that single value in the expression cache. If no 
             * key is present, the entire expression cache will be cleared.
             * @param {string} key? An optional key that will clear its stored value in the expression 
             * cache if passed in.
             */
            clearCache(key?: string): void {
                if (isString(key)) {
                    deleteProperty(this.__cache, key);
                    return;
                }

                this.__cache = {};
            }

            /**
             * Evaluate the current IToken array.
             * @param {string} expression The JavaScript expression to evaluate.
             * information about the expression as well as a way to evaluate its value.
             */
            protected _evaluate(expression: string): IParsedExpression {
                var tokens = this._tokens,
                    length = tokens.length,
                    tempIdentifiers = this.__tempIdentifiers,
                    codeArray = this.__codeArray,
                    useLocalContext = false,
                    tokenObj: IToken,
                    token: any,
                    args: number;

                for (var index = 0; index < length; index++) {
                    tokenObj = tokens[index];
                    token = tokenObj.val;
                    args = tokenObj.args;

                    // check if its an accessor
                    if (isAccessor(token)) {
                        switch (token) {
                            case '()':
                                useLocalContext = this.__handleFunction(index, args, useLocalContext);
                                break;
                            case '{}':
                                codeArray.push(this.__convertObject(args));
                                tempIdentifiers.push('.');
                                break;
                            default:
                                // handle empty array
                                if (args < 0) {
                                    codeArray.push('[]');
                                    tempIdentifiers.push('.');
                                    // handle array literal
                                } else if (args > 0) {
                                    codeArray.push(this.__convertArrayLiteral(args));
                                    tempIdentifiers.push('.');
                                } else {
                                    useLocalContext = this.__indexIntoObject(index, token, useLocalContext);
                                }
                                break;
                        }
                        // check if its an operator
                    } else if (isOperator(token)) {
                        // check if string literal
                        if (args === 0) {
                            codeArray.push(this.__convertPrimitive(index, token, args));
                        } else {
                            switch (token) {
                                case '?':
                                    this.__handleQuestion();
                                    break;
                                case ':':
                                    this.__handleColon();
                                    break;
                                case '+':
                                case '-':
                                    if (args === 1) {
                                        token = 'u' + token;
                                    }
                                default:
                                    this.__handleOperator(token, args);
                                    break;
                            }
                        }
                        // its either function, object, or primitive
                    } else {
                        // potential function or object to index into
                        if (args < 0) {
                            codeArray.push(this.__convertFunction(index, token, useLocalContext));
                            // primitive
                        } else {
                            codeArray.push(this.__convertPrimitive(index, token, args));
                        }
                    }
                }

                // move the rest of the tempIdentifiers to the identifiers
                this._popRemainingIdentifiers();
                // make the identifiers array unqiue entries only
                this._makeIdentifiersUnique();

                var parsedExpression: IParsedExpression = {
                    evaluate: <(context: any, aliases?: IObject<any>) => any>new Function(__CONTEXT, __ALIASES,
                        'var initialContext;' +
                        'return ' + (codeArray.length === 0 ? ('"' + expression + '"') : codeArray.join('')) + ';'),
                    expression: expression,
                    identifiers: this.__identifiers.slice(0),
                    aliases: Object.keys(this.__aliases)
                };

                // reset parser's properties
                this._resetParser();

                return parsedExpression;
            }

            /**
             * Handles a token that is a primitive value.
             * @param {number} index The current index in the IToken array.
             * @param {string} token The current IToken value.
             * @param {number} args The current IToken args.
             */
            private __convertPrimitive(index: number, token: string, args: number): string {
                if (args > 0) {
                    this.__tempIdentifiers.push('.');
                    return token;
                }

                var castTokenIsNumberLike = isNumber(Number(token)),
                    peek = this._peek(index),
                    isPeekIndexer = !(isNull(peek) || peek.args >= 1),
                    isValEqual = this._isValEqual;

                if (isKeyword(token) ||
                    (isString(token) &&
                    (castTokenIsNumberLike ||
                    this._isValUnequal(peek, '[]()') ||
                    (isValEqual(peek, '[]') &&
                    !isPeekIndexer)))) {
                    this.__tempIdentifiers.push('.');
                    return '"' + token + '"';
                } else {
                    if (!castTokenIsNumberLike ||
                        (isValEqual(peek, '.[]') &&
                        isPeekIndexer)) {
                        this.__tempIdentifiers.push(token);
                    } else {
                        this.__tempIdentifiers.push('.');
                    }
                    return token;
                }
            }
            /**
             * Handles a potential function or object that needs to be indexed into.
             * @param {number} index The current index in the IToken array.
             * @param {string} token The current IToken value.
             * @param {boolean} useLocalContext Whether or not we need to use an already parsed object as the current context.
             */
            private __convertFunction(index: number, token: string, useLocalContext: boolean): string {
                if (token[0] === '@') {
                    this.__aliases[token.slice(1)] = true;
                } else if (isKeyword(token)) {
                    this.__tempIdentifiers.push('.');
                    return token;
                }

                var nextToken = this._peek(index),
                    isValEqual = this._isValEqual;

                if (isValEqual(this._tokens[index - 1], '()') && isValEqual(nextToken, '.[]')) {
                    this.__tempIdentifiers.push('.');
                } else {
                    this.__tempIdentifiers.push(token);
                }

                if (!isNull(nextToken)) {
                    switch (nextToken.val) {
                        case '.':
                        case '()':
                            return token;
                        default:
                            if (!useLocalContext) {
                                return '(initialContext = (' + this.__findInitialContext.toString() + ')(context,aliases,"' + token + '"))';
                            }
                            break;
                    }
                } else {
                    return '(initialContext = (' + this.__findInitialContext.toString() + ')(context,aliases,"' + token + '"))';
                }
            }
            /**
             * Handles an object literal.
             * @param {number} args The current IToken args.
             */
            private __convertObject(args: number): string {
                var identifiers = this.__identifiers,
                    tempIdentifiers = this.__tempIdentifiers,
                    codeArray = this.__codeArray,
                    j = 0,
                    key: string,
                    codeStr = '{',
                    tempIdentifier: string,
                    temp: string;

                while (j++ < args) {
                    temp = codeArray.pop();
                    key = codeArray.pop();
                    codeStr += ',"' + key + '":' + temp;

                    if (tempIdentifiers.length > 1) {
                        tempIdentifier = tempIdentifiers.pop();
                        // pop the key's tempIdentifier
                        tempIdentifiers.pop();
                        if (tempIdentifier !== '.') {
                            identifiers.push(tempIdentifier);
                        }
                    }
                }

                return codeStr.replace(',', '') + '}';
            }
            /**
             * Handles an Array literal.
             * @param {number} args The current IToken args.
             */
            private __convertArrayLiteral(args: number): string {
                var identifiers = this.__identifiers,
                    tempIdentifiers = this.__tempIdentifiers,
                    codeArray = this.__codeArray,
                    j = 0,
                    tempStr = '',
                    tempIdentifier: string;

                while (j++ < args) {
                    tempStr = codeArray.pop() + ',' + tempStr;

                    if (tempIdentifiers.length > 0) {
                        tempIdentifier = tempIdentifiers.pop();
                        if (tempIdentifier !== '.') {
                            identifiers.push(tempIdentifier);
                        }
                    }
                }

                return '[' + tempStr.slice(0, -1) + ']';
            }

            /**
             * Handles an accessor type function token "()".
             * @param {number} index The current index in the IToken array.
             * @param {number} args The current IToken args.
             * @param {boolean} useLocalContext Whether or not we need to use an already parsed object as the current context.
             */
            private __handleFunction(index: number, args: number, useLocalContext: boolean): boolean {
                var identifiers = this.__identifiers,
                    tempIdentifiers = this.__tempIdentifiers,
                    codeArray = this.__codeArray,
                    j = 0,
                    previousToken = this._lookBack(index),
                    grabFnName = !isNull(previousToken) && (previousToken.args === -2 || this._isValEqual(previousToken, '.[]')),
                    tempStr = '',
                    tempIdentifier: string,
                    fnName = '',
                    identifierFnName = '',
                    codeStr: string,
                    pushedIdentifier = false;

                if (grabFnName) {
                    fnName = codeArray.pop();
                    identifierFnName = tempIdentifiers.pop();
                }

                while (j++ < args) {
                    tempStr = codeArray.pop() + ',' + tempStr;

                    if (tempIdentifiers.length > 0) {
                        tempIdentifier = tempIdentifiers.pop();
                        if (tempIdentifier !== '.') {
                            identifiers.push(tempIdentifier);
                            pushedIdentifier = true;
                        }
                    }
                }

                if (args > 0) {
                    codeStr = '.call(initialContext || context,' + tempStr.slice(0, tempStr.length - 1) + ')';
                } else {
                    codeStr = '.call(initialContext || context)';
                }

                if (useLocalContext) {
                    useLocalContext = false;
                    if (codeArray.length > 0) {
                        var context = codeArray.pop(),
                            lastIndex = tempIdentifiers.length - 1;

                        if (!(lastIndex < 0 || tempIdentifiers[lastIndex] === '.' || identifierFnName === '')) {
                            tempIdentifiers[lastIndex] += '.' + identifierFnName;
                            identifiers.push(tempIdentifiers.pop());
                            // check fn name is not null, pushed an identifier, and the context is not an array literal
                        } else if (!(identifierFnName === '' ||
                            !pushedIdentifier ||
                            context[0] === '[' ||
                            context[context.length - 1] === ']')) {
                            identifiers[identifiers.length - 1] += '.' + identifierFnName;
                        }

                        if (isEmpty(fnName)) {
                            codeStr = context + codeStr;
                        } else {
                            codeStr = '((' + this.__indexIntoContext.toString() + ')(' + context + ',"' +
                            fnName + '") || (function () {}))' + codeStr;
                        }
                    } else {
                        this._throwError('Improper expression or context');
                    }
                } else {
                    if (grabFnName) {
                        codeStr = '(initialContext = ((' + this.__findInitialContext.toString() + ')(context,aliases,"' +
                        fnName + '") || (function () {}))' + codeStr + ')';

                        identifiers.push(fnName);
                    } else {
                        codeStr = codeArray.pop() + codeStr;
                    }
                }

                codeArray.push(codeStr);

                var length = tempIdentifiers.length;
                if (this._isValEqual(this._peek(index), '[]') && length > 0 && tempIdentifiers[length - 1] !== '.') {
                    identifiers.push(tempIdentifiers.pop());
                }

                return useLocalContext;
            }
            /**
             * Handles an accessor type token that is for indexing (i.e. "." or "[]").
             * @param {number} index The current index in the IToken array.
             * @param {string} token The current IToken value.
             * @param {boolean} useLocalContext Whether or not we need to use an already parsed object as the current context.
             */
            private __indexIntoObject(index: number, token: string, useLocalContext: boolean): boolean {
                var isValEqual = this._isValEqual;

                if (isValEqual(this._peek(index), '()')) {
                    return true;
                }

                var codeArray = this.__codeArray,
                    codeStr = codeArray.pop(),
                    identifiers = this.__identifiers,
                    tempIdentifiers = this.__tempIdentifiers,
                    previousToken = this._lookBack(index),
                    identifierIndexer = tempIdentifiers.pop(),
                    hasIdentifierIndexer = !isNull(identifierIndexer),
                    lastIndex: number;

                if (hasIdentifierIndexer && identifierIndexer[0] === '@') {
                    codeStr = '(' + this.__indexIntoContext.toString() + ')(' + codeArray.pop() + ',' + codeStr + ')';
                    identifiers.push(identifierIndexer);
                    if (tempIdentifiers.length > 0) {
                        identifiers.push(tempIdentifiers.pop());
                    }
                } else if (isValEqual(previousToken, '++--()[]*/%?:>=<=&&||!===')) {
                    codeStr = '(' + this.__indexIntoContext.toString() + ')(' + codeArray.pop() + ',' + codeStr + ')';
                    tempIdentifiers.push('.');
                } else if (token === '[]' && !(isNull(previousToken) || previousToken.args >= 0)) {
                    codeStr = '(' + this.__indexIntoContext.toString() + ')(' + codeArray.pop() + ',' + codeStr + ')';

                    lastIndex = tempIdentifiers.length - 1;
                    if (lastIndex >= 0) {
                        if (tempIdentifiers[lastIndex] !== '.') {
                            identifiers.push(tempIdentifiers.pop());
                        }
                    }

                    identifiers.push(identifierIndexer);
                } else {
                    codeStr = '(' + this.__indexIntoContext.toString() + ')(' + codeArray.pop() + ',"' + codeStr + '")';

                    lastIndex = tempIdentifiers.length - 1;
                    if (lastIndex >= 0) {
                        if (tempIdentifiers[lastIndex] !== '.') {
                            tempIdentifiers[lastIndex] += '.' + identifierIndexer;
                        }
                    } else if (hasIdentifierIndexer && identifierIndexer !== '.' && token !== '.') {
                        identifiers.push(identifierIndexer);
                    }
                }

                codeArray.push(codeStr);

                return useLocalContext;
            }

            /**
             * Handles the "?" operator.
             */
            private __handleQuestion(): void {
                var identifiers = this.__identifiers,
                    tempIdentifiers = this.__tempIdentifiers,
                    codeArray = this.__codeArray,
                    temp = codeArray.pop(),
                    tempIdentifier: string;

                for (var i = 0; i < 2; i++) {
                    if (tempIdentifiers.length > 0) {
                        tempIdentifier = tempIdentifiers.pop();
                        if (tempIdentifier !== '.') {
                            identifiers.push(tempIdentifier);
                        }
                    } else {
                        break;
                    }
                }

                codeArray.push(codeArray.pop() + '?' + temp);
            }
            /**
             * Handles the ":" operator.
             */
            private __handleColon(): void {
                var identifiers = this.__identifiers,
                    tempIdentifiers = this.__tempIdentifiers,
                    codeArray = this.__codeArray,
                    temp = codeArray.pop(),
                    tempIdentifier: string;

                for (var i = 0; i < 2; i++) {
                    if (tempIdentifiers.length > 0) {
                        tempIdentifier = tempIdentifiers.pop();
                        if (tempIdentifier !== '.') {
                            identifiers.push(tempIdentifier);
                        }
                    } else {
                        break;
                    }
                }

                codeArray.push(codeArray.pop() + ':' + temp);
            }
            /**
             * Handles all other operators.
             * @param {string} token The current IToken value.
             * @param {number} args The current IToken args.
             */
            private __handleOperator(token: string, args: number): void {
                var identifiers = this.__identifiers,
                    tempIdentifiers = this.__tempIdentifiers,
                    codeArray = this.__codeArray,
                    j = 0,
                    tempStr = '',
                    tempIdentifier: string;

                while (j++ < args) {
                    tempStr = 'function (context, aliases) { return ' + codeArray.pop() + '; }' + ',' + tempStr;

                    if (tempIdentifiers.length > 0) {
                        tempIdentifier = tempIdentifiers.pop();
                        if (tempIdentifier !== '.') {
                            identifiers.push(tempIdentifier);
                        }
                    }
                }

                codeArray.push(
                    '(' + OPERATORS[token].fn.toString() + ')(context, aliases,' + tempStr.slice(0, tempStr.length - 1) + ')'
                    );
            }

            /**
             * Safely finds an initial context.
             * @param {any} context The context object.
             * @param {any} aliases Any aliases that may exist.
             * @param {string} token The property used to find the initial context.
             */
            private __findInitialContext(context: any, aliases: any, token: string): any {
                if (token[0] === '@' && aliases !== null && typeof aliases === 'object') {
                    return aliases[token.slice(1)];
                } else if (context !== null && typeof context === 'object') {
                    return context[token];
                }
            }
            /**
             * Safely drills down into a specified context with a given token.
             * @param {any} context The context object.
             * @param {string} token The property used to drill into the context.
             */
            private __indexIntoContext(context: any, token: string): any {
                if (context !== null && typeof context === 'object') {
                    return context[token];
                }
            }

            /**
             * Peek at the next IToken.
             * @param {number} index The index before the desired IToken 
             * in the array.
             * in the IToken array.
             */
            protected _peek(index: number): IToken {
                return this._tokens[index + 1];
            }

            /**
             * Look back at the previous IToken.
             * @param {number} index The index after the desired IToken 
             * in the array.
             * in the IToken array.
             */
            protected _lookBack(index: number): IToken {
                return this._tokens[index - 1];
            }

            /**
             * Evaluate and remove the leftover identifiers.
             */
            protected _popRemainingIdentifiers(): void {
                var identifiers = this.__identifiers,
                    tempIdentifiers = this.__tempIdentifiers,
                    last: string;

                while (tempIdentifiers.length > 0) {
                    last = tempIdentifiers.pop();
                    if (last !== '.') {
                        identifiers.push(last);
                    }
                }
            }

            /**
             * Remove duplicate identifiers.
             */
            protected _makeIdentifiersUnique(): void {
                var identifiers = this.__identifiers,
                    uniqueIdentifiers: Array<string> = [],
                    uniqueIdentifierObject: IObject<boolean> = {},
                    identifier: string;

                while (identifiers.length > 0) {
                    identifier = identifiers.pop();
                    if (!uniqueIdentifierObject[identifier]) {
                        uniqueIdentifierObject[identifier] = true;
                        uniqueIdentifiers.push(identifier);
                    }
                }

                this.__identifiers = uniqueIdentifiers;
            }

            /**
             * Check if the "val" property on an IToken 
             * is present in a particular character string.
             * @param {plat.expressions.IToken} obj The IToken 
             * with the "val" property to compare.
             * @param {string} char The char to compare with.
             */
            protected _isValEqual(obj: IToken, char: string): boolean {
                if (isNull(obj) || isNull(obj.val)) {
                    return isNull(char);
                } else if (obj.val === '') {
                    return char === '';
                }
                return char.indexOf(obj.val) !== -1;
            }

            /**
             * Check if the "val" property on an IToken 
             * is not present in a particular character string.
             * @param {plat.expressions.IToken} obj The IToken 
             * with the "val" property to compare.
             * @param {string} char The char to compare with.
             */
            protected _isValUnequal(obj: any, char: string): boolean {
                if (isNull(obj) || isNull(obj.val)) {
                    return !isNull(char);
                } else if (obj.val === '') {
                    return char !== '';
                }
                return char.indexOf(obj.val) === -1;
            }

            /**
             * Resets all the parser's properties.
             */
            protected _resetParser(): void {
                this._tokens = [];
                this.__codeArray = [];
                this.__identifiers = [];
                this.__tempIdentifiers = [];
                this.__aliases = {};
            }

            /**
             * Throws a fatal exception in the case of an error.
             * @param {string} error The error message to throw.
             */
            protected _throwError(error: string): void {
                var _Exception: IExceptionStatic = this._Exception;
                _Exception.fatal(error, _Exception.PARSE);
            }
        }

        register.injectable(__Parser, Parser);

        /**
         * Describes an object that is the result of parsing a JavaScript expression string. It contains detailed 
         * information about the expression as well as a way to evaluate the expression with a context.
         */
        export interface IParsedExpression {
            /**
             * A method for evaluating an expression with a context.
             * @param {any} context? The primary context for evaluation.
             * @param {IObject<any>} aliases? An object containing resource alias values. 
             * All property keys must never begin with '@'.
             */
            evaluate(context?: any, aliases?: IObject<any>): any;

            /**
             * The original expression string.
             */
            expression: string;

            /**
             * Contains all the identifiers found in an expression. Useful for determining
             * properties to watch on a context.
             */
            identifiers: Array<string>;

            /**
             * Contains all the aliases (denoted without '@' as the first character) for this 
             * IParsedExpression.
             */
            aliases: Array<string>;

            /**
             * Specifies whether or not you want to do a one-time binding on identifiers 
             * for this expression. Typically this is added to a clone of this 
             * IParsedExpression.
             */
            oneTime?: boolean;
        }
    }
    /**
     * Holds classes and interfaces related to web components in platypus.
     */
    export module web {
        /**
         * The Type for referencing the '_history' injectable as a dependency. 
         * Used so that the window.history can be mocked.
         */
        export function Location(_window?: Window): Location {
            return _window.location;
        }

        register.injectable(__Location, Location, [__Window]);

        /**
         * The class that handles all interaction with the browser.
         */
        export class Browser {
            protected static _inject: any = {
                _EventManager: __EventManagerStatic,
                _compat: __Compat,
                _regex: __Regex,
                _window: __Window,
                _location: __Location,
                _history: __History,
                _dom: __Dom
            };

            /**
             * The IBrowserConfig injectable object.
             */
            static config: IBrowserConfig = {
                NONE: 'none',
                HASH: 'hash',
                STATE: 'state',
                routingType: 'hash',
                hashPrefix: '!',
                baseUrl: ''
            };

            /**
             * Reference to the IEventManagerStatic injectable.
             */
            protected _EventManager: events.IEventManagerStatic;

            /**
             * Reference to the Compat injectable.
             */
            protected _compat: Compat;

            /**
             * Reference to the Regex injectable.
             */
            protected _regex: expressions.Regex;

            /**
             * Reference to the Window injectable.
             */
            protected _window: Window;

            /**
             * Reference to the Location injectable.
             */
            protected _location: Location;

            /**
             * Reference to the History injectable.
             */
            protected _history: History;

            /**
             * Reference to the Dom injectable.
             */
            protected _dom: ui.Dom;

            /**
             * Keeps a history stack if using a windows store app.
             */
            protected _stack: Array<string>;

            /**
             * A unique string identifier.
             */
            uid: string = uniqueId(__Plat);

            /**
             * The browser's current URL.
             */
            private __currentUrl: string;

            /**
             * The browser's last URL.
             */
            private __lastUrl = this._location.href;

            /**
             * Whether or not the browser is in an initialization state.
             */
            private __initializing = false;

            /**
             * The constructor for a Browser. Assigns a uid and subscribes to the 'beforeLoad' event.
             */
            constructor() {
                this._EventManager.on(this.uid, __beforeLoad, this.initialize, this);

                if (this._compat.msApp) {
                    this._stack = [];
                }
            }

            /**
             * Initializes the Browser instance, trims the url, and 
             * adds events for popstate and hashchange.
             */
            initialize(): void {
                var $config = Browser.config,
                    _compat = this._compat;

                this._EventManager.dispose(this.uid);

                if ($config.routingType === $config.NONE) {
                    return;
                }

                this.__initializing = true;

                acquire(__UrlUtilsInstance);

                var url = this.url(),
                    trimmedUrl = url,
                    changed = this._urlChanged.bind(this),
                    _dom = this._dom,
                    _window = this._window;

                if (trimmedUrl !== url) {
                    this.url(trimmedUrl, true);
                }

                if (_compat.pushState) {
                    _dom.addEventListener(_window, __POPSTATE, changed, false);
                }

                _dom.addEventListener(_window, __HASHCHANGE, changed, false);

                this.__initializing = false;
            }

            /**
             * Sets or gets the current _window.location
             * @param {string} url? The URL to set the location to.
             * @param {boolean} replace? Whether or not to replace the current URL in 
             * the history.
             */
            url(url?: string, replace?: boolean): string {
                var location = this._location;

                if (isString(url) && this.__lastUrl !== url) {
                    if (isArray(this._stack)) {
                        this._stack.push(location.href);
                    }

                    this._setUrl(url, replace);
                }

                return this.__currentUrl || location.href;
            }

            /**
             * Navigates back in the browser history
             * @param {number} length=1 The length to go back
             */
            back(length?: number): void {
                if (!isNumber(length)) {
                    length = 1;
                }

                var _stack = this._stack;

                if (isArray(_stack) && _stack.length > 1) {
                    this._stack = _stack = _stack.slice(0, _stack.length - (length - 1));
                    this.url(_stack.pop());
                    _stack.pop();
                    return;
                }

                this._history.go(-length);
            }

            /**
             * Navigates forward in the browser history
             * @param {number} length=1 The length to go forward
             */
            forward(length?: number): void {
                if (!isNumber(length)) {
                    length = 1;
                }

                this._history.go(length);
            }

            /**
             * Creates a new UrlUtils object.
             * @param url? The URL to associate with the new UrlUtils 
             * instance.
             */
            urlUtils(url?: string): UrlUtils {
                url = url || this.url();

                var _urlUtils: UrlUtils = acquire(__UrlUtilsInstance),
                    _config = Browser.config;

                if (_config.routingType === _config.HASH) {
                    url = url.replace(new RegExp('#' + (_config.hashPrefix || '') + '/?'), '');
                }

                _urlUtils.initialize(url);

                return _urlUtils;
            }

            /**
             * Checks to see if the requested URL is cross domain.
             * @param url The URL to verify whether or not it's cross domain.
             */
            isCrossDomain(url: string): boolean {
                if (!isString(url)) {
                    return false;
                }

                var urlUtils = this.urlUtils(url),
                    locationUtils = this.urlUtils();

                // check for protocol:host:port mismatch
                return urlUtils.protocol !== locationUtils.protocol ||
                    urlUtils.hostname !== locationUtils.hostname ||
                    urlUtils.port !== locationUtils.port;
            }

            /**
             * The event to fire in the case of a URL change. It kicks 
             * off a 'urlChanged' direct event notification.
             * @param url The URL to verify whether or not it's cross domain.
             */
            protected _urlChanged(): void {
                if (this.__initializing) {
                    return;
                }

                this.__currentUrl = null;
                var url = this.url(),
                    $config = Browser.config;

                if (this.__lastUrl === url ||
                    ($config.routingType === $config.STATE &&
                    url.indexOf(this.__lastUrl + '#') > -1)) {
                    return;
                }

                this.__lastUrl = url;

                var $manager = this._EventManager;
                $manager.dispatch(__urlChanged,
                    this,
                    $manager.DIRECT,
                    [this.urlUtils()]);
            }

            /**
             * Checks for the existence of pushState and 
             * sets the browser URL accordingly.
             * @param {string} url The URL to set.
             * @param {boolean} replace? Whether or not to replace the 
             * current URL in the history.
             */
            protected _setUrl(url: string, replace?: boolean): void {
                url = this.formatUrl(url);

                var utils = this.urlUtils(url),
                    baseUrl = Browser.config.baseUrl,
                    _history = this._history,
                    _location = this._location;

                if (utils.href.indexOf(baseUrl) === -1) {
                    _location.href = url;
                    return;
                }

                // make sure URL is absolute
                if (!this._regex.fullUrlRegex.test(url) && url[0] !== '/') {
                    url = baseUrl + url;
                }

                if (this._compat.pushState) {
                    if (replace) {
                        _history.replaceState(null, '', url);
                    } else {
                        _history.pushState(null, '', url);
                    }

                    if (!this.__initializing) {
                        this._urlChanged();
                    }
                } else {
                    this.__currentUrl = url;
                    if (replace) {
                        _location.replace(url);
                    } else {
                        _location.href = url;
                    }
                }
            }

            /**
             * Formats the URL in the case of HASH routing.
             * @param url The URL to format.
             */
            formatUrl(url: string): string {
                var $config = Browser.config,
                    baseUrl = $config.baseUrl,
                    isLocal = !this._regex.fullUrlRegex.test(url) || url.indexOf($config.baseUrl) > -1;

                if (url === $config.baseUrl) {
                    return url;
                }

                if (url[0] === '/') {
                    url = url.slice(1);
                }

                if (isLocal && $config.routingType === $config.HASH) {
                    var hasProtocol = url.indexOf(this.urlUtils().protocol) !== -1,
                        prefix = $config.hashPrefix || '',
                        append = '#' + prefix,
                        hashRegex = new RegExp('#' + prefix + '|#/');

                    if (url[url.length - 1] !== '/' && url.indexOf('?') === -1) {
                        url += '/';
                    }

                    if (hasProtocol && !hashRegex.test(url)) {
                        url = url + '#' + prefix + '/';
                    } else if (!hashRegex.test(url)) {
                        url = '#' + prefix + ((url[0] !== '/') ? '/' : '') + url;
                    }
                }

                if (isLocal && url.indexOf($config.baseUrl) === -1) {
                    url = $config.baseUrl + url;
                }

                return url;
            }
        }

        register.injectable(__Browser, Browser);

        /**
         * The Type for referencing the '_browserConfig' injectable as a dependency.
         */
        export function IBrowserConfig(): IBrowserConfig {
            return Browser.config;
        }

        register.injectable(__BrowserConfig, IBrowserConfig);

        /**
         * Specifies configuration properties for the Browser  
         * injectable.
         */
        export interface IBrowserConfig {
            /**
             * Specifies that the application will not be doing 
             * url-based routing.
             */
            NONE: string;

            /**
             * Specifies that the application wants to use hash-based 
             * routing.
             */
            HASH: string;

            /**
             * Specifies that the application wants to use the HTML5 
             * popstate method for managing routing. If the browser 
             * does not support HTML5 popstate events, hash routing 
             * will be used instead.
             * Note: In 'state' mode, the web server must be configured to 
             * route every url to the root url.
             */
            STATE: string;

            /**
             * Allows you to define how your app will route. There are
             * three modes, NONE ('none'), HASH ('hash'), and STATE ('state'). 
             * In NONE, the application will not be responding to 
             * url changes.
             * In HASH, the application will use a hash prefix and 
             * all navigation will be managed with hash changes.
             * In STATE mode, the application will use the 'popstate' 
             * event and will be able to manage routes. The web server 
             * must be configured to route every URL to the root URL if 
             * using STATE mode.
             * The default mode is NONE.
             */
            routingType: string;

            /**
             * If routingType is set to HASH ('hash'), this value will be 
             * appended to the '#' at the beginning of every route. The 
             * default prefix is '!', meaning each path will be '#!/<path>'.
             */
            hashPrefix: string;

            /**
             * Specifies the base URL used to normalize URL routing.
             */
            baseUrl: string;
        }

        /**
         * Deals with obtaining detailed information about an 
         * associated URL.
         */
        export class UrlUtils {
            protected static _inject: any = {
                _EventManager: __EventManagerStatic,
                _document: __Document,
                _window: __Window,
                _compat: __Compat,
                _regex: __Regex,
                _browserConfig: __BrowserConfig
            };

            /**
             * Helps with URL initialization through it's href attribute.
             */
            private static __urlUtilsElement: HTMLAnchorElement;
            /**
             * Creates a query object out of the URL's query search string.
             * @param {string} search The URL's query search string.
             * representing the query string.
             */
            private static __getQuery(search: string): IObject<string> {
                return deserializeQuery(search);
            }

            /**
             * Obtains the base URL for the app/site for doing STATE type routing.
             * @param {string} url The initial URL passed into the Browser.
             */
            private static __getBaseUrl(url: string): string {
                var _regex = acquire(__Regex),
                    origin = (<any>window.location).origin,
                    protocol = window.location.protocol,
                    host = window.location.host;

                if (protocol === 'file:' || protocol.indexOf('wmapp') > -1 || protocol.indexOf('ms-appx') > -1) {
                    origin = window.location.href;
                } else if(isUndefined(origin)) {
                    origin = window.location.protocol + '//' + window.location.host;
                }

                origin = origin.replace(_regex.initialUrlRegex, '');

                return origin.split('?')[0].split('#')[0] + '/';
            }

            /**
             * Reference to the Document injectable.
             */
            protected _document: Document;

            /**
             * Reference to the Window injectable.
             */
            protected _window: Window;
            /**
             * Reference to the Compat injectable.
             */
            protected _compat: Compat;

            /**
             * Reference to the Regex injectable.
             */
            protected _regex: expressions.Regex;

            /**
             * Reference to the IBrowserConfig injectable.
             */
            protected _browserConfig: IBrowserConfig;

            /**
             * The whole associated URL.
             */
            href: string;

            /**
             * The protocol scheme of the URL, including the final ':' of the associated URL.
             */
            protocol: string;

            /**
             * The hostname and port of the associated URL.
             */
            host: string;

            /**
             * The domain of the associated URL.
             */
            hostname: string;

            /**
             * The port number of the associated URL.
             */
            port: string;

            /**
             * The additional path value in the associated URL preceded by a '/'. 
             * Removes the query string.
             */
            pathname: string;

            /**
             * A '?' followed by the included parameters in the associated URL.
             */
            search: string;

            /**
             * A '#' followed by the included hash fragments in the associated URL.
             */
            hash: string;

            /**
             * The username specified before the domain name in the associated URL.
             */
            username: string;

            /**
             * The password specified before the domain name in the associated URL.
             */
            password: string;

            /**
             * The origin of the associated URL (its protocol, domain, and port).
             */
            origin: string;

            /**
             * An object containing keyed query arguments from the associated URL.
             */
            query: any;

            /**
             * The constructor for a UrlUtils instance. 
             * Handles parsing the initial URL and obtain the base URL if necessary.
             */
            constructor() {
                var $config = this._browserConfig;
                if (isEmpty($config.baseUrl) || !this._regex.fullUrlRegex.test($config.baseUrl)) {
                    var url = this._window.location.href,
                        trimmedUrl = url.replace(this._regex.initialUrlRegex, '/'),
                        baseUrl = $config.baseUrl;

                    if (isString(baseUrl)) {
                        if (baseUrl.indexOf('/') === 0) {
                            baseUrl = baseUrl.slice(1);
                        }
                    } else {
                        baseUrl = '';
                    }

                    baseUrl = UrlUtils.__getBaseUrl(trimmedUrl) + baseUrl;

                    while (baseUrl[baseUrl.length - 1] === '/') {
                        baseUrl = baseUrl.slice(0, -1);
                    }

                    $config.baseUrl = baseUrl + '/';
                }
            }

            /**
             * Initializes and defines properties using 
             * the input url.
             * @param {string} url The input to associate with this UrlUtils instance.
             */
            initialize(url: string): void {
                url = url || '';

                var element = UrlUtils.__urlUtilsElement ||
                    (UrlUtils.__urlUtilsElement = this._document.createElement('a')),
                    _browserConfig = this._browserConfig;

                // always make local urls relative to start page.
                if (url[0] === '/' && url.indexOf('//') !== 0) {
                    url = url.slice(1);
                }

                // Always append the baseUrl if this is not a full-url
                if (!this._regex.fullUrlRegex.test(url)) {
                    url = _browserConfig.baseUrl + url;
                }

                element.setAttribute('href', url);
                url = element.href;

                // we need to do this twice for cerain browsers (e.g. win8)
                element.setAttribute('href', url);
                url = element.href;

                var protocol = element.protocol ? element.protocol.replace(/:$/, '') : '';

                this.href = url;
                this.protocol = element.protocol ? element.protocol.replace(/:$/, '') : '';
                this.host = element.host;
                this.search = element.search ? element.search.replace(/^\?/, '') : '';
                this.hash = element.hash ? element.hash.replace(/^#/, '') : '';
                this.hostname = element.hostname;
                this.port = element.port;

                var path: string;

                if (!isEmpty(_browserConfig.baseUrl)) {
                    path = url.replace(_browserConfig.baseUrl, '/');
                } else {
                    path = (element.pathname.charAt(0) === '/')
                    ? element.pathname
                    : '/' + element.pathname;
                }

                path = path.replace(this._regex.initialUrlRegex, '/');

                this.pathname = path.split('?')[0].split('#')[0];
                this.query = UrlUtils.__getQuery(this.search);
            }

            /**
             * A toString function implementation for the UrlUtils class.
             */
            toString(): string {
                return this.href;
            }
        }
        register.injectable(__UrlUtilsInstance, UrlUtils, null, __INSTANCE);
    }
    /**
     * Holds all classes and interfaces related to async components in platypus.
     */
    export module async {
        /**
         * Takes in a generic type corresponding to the fullfilled success type. 
         */
        export class Promise<R> implements IThenable<R> {
            /**
             * Holds all the subscriber promises
             */
            private __subscribers: Array<any>;

            /**
             * The state of the promise (fulfilled/rejected)
             */
            private __state: State;

            /**
             * The return detail of a promise.
             */
            private __detail: any;

            /**
             * The configuration for creating asynchronous promise flushing.
             */
            static config = {
                /**
                 * Handles asynchronous flushing of callbacks. If the callback queue is of 
                 * length 1, then we need to schedule a flush. Afterward, any additional 
                 * callbacks added to the queue will be flushed accordingly.
                 */
                async: (callback: (arg?: IThenable<any>) => void, arg?: IThenable<any>) => {
                    var length = queue.push([callback, arg]);
                    if (length === 1) {
                        scheduleFlush();
                    }
                }
            };

            /**
             * Returns a promise that fulfills when every item in the array is fulfilled.
             * Casts arguments to promises if necessary. The result argument of the 
             * returned promise is an array containing the fulfillment result arguments 
             * in-order. The rejection argument is the rejection argument of the 
             * first-rejected promise.
             * @param {Array<plat.async.IThenable<R>>} promises An array of promises, although every argument is potentially
             * cast to a promise meaning not every item in the array needs to be a promise.
             */
            static all<R>(promises: Array<IThenable<R>>): IThenable<Array<R>>;
            /**
             * Returns a promise that fulfills when every item in the array is fulfilled.
             * Casts arguments to promises if necessary. The result argument of the 
             * returned promise is an array containing the fulfillment result arguments 
             * in-order. The rejection argument is the rejection argument of the 
             * first-rejected promise.
             * @param {Array<R>} promises An array of objects, if an object is not a promise, it will be cast.
             */
            static all<R>(promises: Array<R>): IThenable<Array<R>>;
            static all(promises: Array<any>): IThenable<Array<any>> {
                if (!isArray(promises)) {
                    return Promise.all([promises]);
                }

                return new Promise<Array<any>>((resolve: (value?: Array<any>) => void, reject: (reason?: any) => void) => {
                    var results: Array<any> = [],
                        remaining = promises.length,
                        promise: Promise<any>;

                    if (remaining === 0) {
                        resolve(<any>[]);
                    }

                    function resolver(index: number) {
                        return (value: any) => resolveAll(index, value);
                    }

                    function resolveAll(index: number, value: any) {
                        results[index] = value;
                        if (--remaining === 0) {
                            resolve(<any>results);
                        }
                    }

                    for (var i = 0; i < promises.length; i++) {
                        promise = promises[i];

                        if (isPromise(promise)) {
                            promise.then(resolver(i), reject);
                        } else {
                            resolveAll(i, promise);
                        }
                    }
                });
            }

            /**
             * Returns a promise that fulfills as soon as any of the promises fulfill,
             * or rejects as soon as any of the promises reject (whichever happens first).
             * @param {Array<plat.async.IThenable<R>>} promises An Array of promises to 'race'.
             * promises fulfilled.
             */
            static race<R>(promises: Array<IThenable<R>>): IThenable<R>;
            /**
             * Returns a promise that fulfills as soon as any of the promises fulfill,
             * or rejects as soon as any of the promises reject (whichever happens first).
             * @param {Array<R>} promises An Array of anything to 'race'. Objects that aren't promises will
             * be cast.
             * promises fulfilled.
             */
            static race<R>(promises: Array<R>): IThenable<R>;
            static race(promises: Array<any>): IThenable<any> {
                if (!isArray(promises)) {
                    return Promise.race([promises]);
                }

                return new Promise<any>((resolve: (value: any) => any, reject: (error: any) => any) => {
                    var promise: Promise<any>;

                    for (var i = 0; i < promises.length; i++) {
                        promise = promises[i];

                        if (promise && typeof promise.then === 'function') {
                            promise.then(resolve, reject);
                        } else {
                            resolve(<any>promise);
                        }
                    }
                });
            }

            /**
             * Returns a promise that resolves immediately.
             */
            static resolve(): IThenable<void>;
            /**
             * Returns a promise that resolves with the input value.
             * @param {R} value The value to resolve.
             */
            static resolve<R>(value: R): IThenable<R>;
            static resolve<R>(value?: R): IThenable<R> {
                return new Promise<R>((resolve: (value: R) => any, reject: (reason: any) => any) => {
                    resolve(value);
                });
            }

            /**
             * Returns a promise that rejects with the input value.
             * @param {any} error The value to reject.
             */
            static reject(error?: any): IThenable<any> {
                return new Promise<any>((resolve: (value: any) => any, reject: (error: any) => any) => {
                    reject(error);
                });
            }

            /**
             * Invokes the resolve function for a promise. Handles error catching.
             * @param {plat.async.IResolveFunction<R>} resolveFunction The resolve function to invoke.
             * @param {plat.async.Promise<R>} promise The promise on which to invoke the resolve function.
             */
            private static __invokeResolveFunction<R>(resolveFunction: IResolveFunction<R>,
                promise: Promise<R>): void {
                function resolvePromise(value?: any) {
                    Promise.__resolve<R>(promise, value);
                }

                function rejectPromise(reason?: any) {
                    Promise.__reject(promise, reason);
                }

                try {
                    resolveFunction(resolvePromise, rejectPromise);
                } catch (e) {
                    rejectPromise(e);
                }
            }

            /**
             * Invokes a callback for a promise with the specified detail.
             * @param {plat.async.State} settled The state of the promise.
             * @param {any} promise The promise object.
             * @param {(response: any) => void} callback The callback to invoke.
             * @param {any} detail The details to pass to the callback.
             */
            private static __invokeCallback(settled: State, promise: any, callback: (response: any) => void, detail: any): void {
                var hasCallback = isFunction(callback),
                    value: any,
                    error: Error,
                    succeeded: boolean,
                    failed: boolean;

                if (hasCallback) {
                    try {
                        value = callback(detail);
                        succeeded = true;
                    } catch (e) {
                        failed = true;
                        error = e;
                    }
                } else {
                    value = detail;
                    succeeded = true;
                }

                if (Promise.__handleThenable<any>(promise, value)) {
                    return;
                } else if (hasCallback && succeeded) {
                    Promise.__resolve<any>(promise, value);
                } else if (failed) {
                    Promise.__reject(promise, error);
                } else if (settled === State.FULFILLED) {
                    Promise.__resolve<any>(promise, value);
                } else if (settled === State.REJECTED) {
                    Promise.__reject(promise, value);
                }
            }

            /**
             * Publishes the promise details to all the subscribers for a promise.
             * @param {any} promise The promise object.
             * @param {plat.async.State} settled The state of the promise.
             */
            private static __publish(promise: Promise<any>, settled: State): void {
                var subscribers = promise.__subscribers,
                    detail = promise.__detail,
                    child: any,
                    callback: () => void;

                for (var i = 0; i < subscribers.length; i += 3) {
                    child = subscribers[i];
                    callback = subscribers[i + settled];

                    Promise.__invokeCallback(settled, child, callback, detail);
                }

                promise.__subscribers = null;
            }

            /**
             * Publishes a promises that has been fulfilled.
             * @param {any} promise The promise object.
             */
            private static __publishFulfillment(promise: any): void {
                Promise.__publish(promise, promise.__state = State.FULFILLED);
            }

            /**
             * Publishes a promises that has been rejected.
             * @param {any} promise The promise object.
             */
            private static __publishRejection(promise: any): void {
                Promise.__publish(promise, promise.__state = State.REJECTED);
            }

            /**
             * Asynchronously rejects a promise
             * @param {any} promise The promise object.
             * @param {any} reason The detail of the rejected promise.
             */
            private static __reject(promise: any, reason: any): void {
                if (promise.__state !== State.PENDING) {
                    return;
                }
                promise.__state = State.SEALED;
                promise.__detail = reason;

                Promise.config.async(Promise.__publishRejection, promise);
            }

            /**
             * Asynchronously fulfills a promise
             * @param {plat.async.Promise<R>} promise The promise object.
             * @param {any} value The detail of the fulfilled promise.
             */
            private static __fulfill<R>(promise: Promise<R>, value: any): void {
                if (promise.__state !== State.PENDING) {
                    return;
                }
                promise.__state = State.SEALED;
                promise.__detail = value;

                Promise.config.async(Promise.__publishFulfillment, promise);
            }

            /**
             * Asynchronously fulfills a promise, allowing for promise chaining.
             * @param {plat.async.Promise<R>} promise The promise object.
             * @param {any} value The detail of the fulfilled promise.
             */
            private static __resolve<R>(promise: Promise<R>, value: any): void {
                if (promise === value) {
                    Promise.__fulfill(promise, value);
                } else if (!Promise.__handleThenable<R>(promise, value)) {
                    Promise.__fulfill(promise, value);
                }
            }

            /**
             * Handles chaining promises together, when a promise is returned from within a then handler.
             * @param {plat.async.Promise<R>} promise The promise object.
             * @param {plat.async.Promise<R>} value The next promise to await.
             */
            private static __handleThenable<R>(promise: Promise<R>, value: Promise<R>): boolean {
                var resolved: boolean;

                try {
                    if (promise === value) {
                        throw new TypeError('A promises callback cannot return the same promise.');
                    }

                    if (isPromise(value)) {
                        value.then.call(value, (val: any) => {
                            if (resolved) {
                                return true;
                            }
                            resolved = true;

                            if (value !== val) {
                                Promise.__resolve<R>(promise, val);
                            } else {
                                Promise.__fulfill<R>(promise, val);
                            }
                        }, (val: any) => {
                            if (resolved) {
                                return true;
                            }
                            resolved = true;

                            Promise.__reject(promise, val);
                        });

                        return true;
                    }
                } catch (error) {
                    if (resolved) {
                        return true;
                    }
                    Promise.__reject(promise, error);
                    return true;
                }

                return false;
            }

            /**
             * Adds a child promise to the parent's subscribers.
             * @param {plat.async.Promise<any>} parent The parent promise.
             * @param {plat.async.Promise<any>} value The child promise.
             * @param {(success: any) => any} onFullfilled The fulfilled method for the child.
             * @param {(error: any) => any} onRejected The rejected method for the child.
             */
            private static __subscribe(parent: Promise<any>, child: IThenable<any>,
                onFulfilled: (success: any) => any, onRejected: (error: any) => any): void {
                var subscribers = parent.__subscribers;
                var length = subscribers.length;

                subscribers[length] = child;
                subscribers[length + State.FULFILLED] = onFulfilled;
                subscribers[length + State.REJECTED] = onRejected;
            }

            /**
             * An ES6 implementation of the Promise API. Useful for asynchronous programming.
             * Takes in 2 generic types corresponding to the fullfilled success and error types. 
             * The error type (U) should extend Error in order to get proper stack tracing.
             * @param {plat.async.IResolveFunction<R>} resolveFunction A IResolveFunction for fulfilling/rejecting the Promise.
             */
            constructor(resolveFunction: IResolveFunction<R>) {
                var _Exception: IExceptionStatic;
                if (!isFunction(resolveFunction)) {
                    throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
                }

                if (!(this instanceof Promise)) {
                    throw new TypeError('Failed to construct "Promise": ' +
                        'Please use the "new" operator, this object constructor cannot be called as a function.');
                }

                this.__subscribers = [];

                Promise.__invokeResolveFunction<R>(resolveFunction, this);
            }

            /**
             * Takes in two methods, called when/if the promise fulfills/rejects.
             * @param {(success: R) => plat.async.IThenable<U>} onFulfilled A method called when/if the promise fulills. If undefined the next
             * onFulfilled method in the promise chain will be called.
             * @param {(error: any) => plat.async.IThenable<U>} onRejected A method called when/if the promise rejects. If undefined the next
             * onRejected method in the promise chain will be called.
             */
            then<U>(onFulfilled: (success: R) => IThenable<U>, onRejected?: (error: any) => IThenable<U>): IThenable<U>;
            /**
             * Takes in two methods, called when/if the promise fulfills/rejects.
             * @param {(success: R) => plat.async.IThenable<U>} onFulfilled A method called when/if the promise fulills. If undefined the next
             * onFulfilled method in the promise chain will be called.
             * @param {(error: any) => U} onRejected A method called when/if the promise rejects. If undefined the next
             * onRejected method in the promise chain will be called.
             */
            then<U>(onFulfilled: (success: R) => IThenable<U>, onRejected?: (error: any) => U): IThenable<U>;
            /**
             * Takes in two methods, called when/if the promise fulfills/rejects.
             * @param {(success: R) => U} onFulfilled A method called when/if the promise fulills. If undefined the next
             * onFulfilled method in the promise chain will be called.
             * @param {(error: any) => plat.async.IThenable<U>} onRejected A method called when/if the promise rejects. If undefined the next
             * onRejected method in the promise chain will be called.
             */
            then<U>(onFulfilled: (success: R) => U, onRejected?: (error: any) => IThenable<U>): IThenable<U>;
            /**
             * Takes in two methods, called when/if the promise fulfills/rejects.
             * @param {(success: R) => U} onFulfilled A method called when/if the promise fulills. If undefined the next
             * onFulfilled method in the promise chain will be called.
             * @param {(error: any) => U} onRejected A method called when/if the promise rejects. If undefined the next
             * onRejected method in the promise chain will be called.
             */
            then<U>(onFulfilled: (success: R) => U, onRejected?: (error: any) => U): IThenable<U>;
            then<U>(onFulfilled: (success: R) => any, onRejected?: (error: any) => any): IThenable<U> {
                var promise = this;

                var thenPromise = <IThenable<U>>new (<any>this).constructor(() => { }, this);

                if (this.__state) {
                    var callbacks = arguments;
                    Promise.config.async(() => {
                        Promise.__invokeCallback(promise.__state, thenPromise, callbacks[promise.__state - 1], promise.__detail);
                    });
                } else {
                    Promise.__subscribe(this, thenPromise, onFulfilled, onRejected);
                }

                return thenPromise;
            }

            /**
             * A wrapper method for Promise.then(undefined, onRejected);
             * @param {(error: any) => plat.async.IThenable<U>} onRejected A method called when/if the promise rejects. If undefined the next
             * onRejected method in the promise chain will be called.
             */
            catch<U>(onRejected: (error: any) => IThenable<U>): IThenable<U>;
            /**
             * A wrapper method for Promise.then(undefined, onRejected);
             * @param {(error: any) => U} onRejected A method called when/if the promise rejects. If undefined the next
             * onRejected method in the promise chain will be called.
             */
            catch<U>(onRejected: (error: any) => U): IThenable<U>;
            catch<U>(onRejected: (error: any) => any): IThenable<U> {
                return this.then(null, onRejected);
            }

            /**
             * Outputs the Promise as a readable string.
             */
            toString() {
                return '[object Promise]';
            }
        }

        /**
         * Describes a chaining function that fulfills when the previous link is complete and is 
         * able to be caught in the case of an error.
         */
        export interface IThenable<R> {
            /**
             * Takes in two methods, called when/if the promise fulfills/rejects.
             * @param {(success: R) => plat.async.IThenable<U>} onFulfilled A method called when/if the promise fulills. If undefined the next
             * onFulfilled method in the promise chain will be called.
             * @param {(error: any) => plat.async.IThenable<U>} onRejected? A method called when/if the promise rejects. If undefined the next
             * onRejected method in the promise chain will be called.
             */
            then<U>(onFulfilled: (success: R) => IThenable<U>, onRejected?: (error: any) => IThenable<U>): IThenable<U>;
            /**
             * Takes in two methods, called when/if the promise fulfills/rejects.
             * @param {(success: R) => plat.async.IThenable<U>} onFulfilled A method called when/if the promise fulills. If undefined the next
             * onFulfilled method in the promise chain will be called.
             * @param {(error: any) => U} onRejected? A method called when/if the promise rejects. If undefined the next
             * onRejected method in the promise chain will be called.
             */
            then<U>(onFulfilled: (success: R) => IThenable<U>, onRejected?: (error: any) => U): IThenable<U>;
            /**
             * Takes in two methods, called when/if the promise fulfills/rejects.
             * @param {(success: R) => U} onFulfilled A method called when/if the promise fulills. If undefined the next
             * onFulfilled method in the promise chain will be called.
             * @param {(error: any) => plat.async.IThenable<U>} onRejected? A method called when/if the promise rejects. If undefined the next
             * onRejected method in the promise chain will be called.
             */
            then<U>(onFulfilled: (success: R) => U, onRejected?: (error: any) => IThenable<U>): IThenable<U>;
            /**
             * Takes in two methods, called when/if the promise fulfills/rejects.
             * @param {(success: R) => U} onFulfilled A method called when/if the promise fulills. If undefined the next
             * onFulfilled method in the promise chain will be called.
             * @param {(error: any) => U} onRejected? A method called when/if the promise rejects. If undefined the next
             * onRejected method in the promise chain will be called.
             */
            then<U>(onFulfilled: (success: R) => U, onRejected?: (error: any) => U): IThenable<U>;

            /**
             * A wrapper method for Promise.then(undefined, onRejected);
             * @param {(error: any) => plat.async.IThenable<U>} onRejected A method called when/if the promise rejects. If undefined the next
             * onRejected method in the promise chain will be called.
             */
            catch<U>(onRejected: (error: any) => IThenable<U>): IThenable<U>;
            /**
             * A wrapper method for Promise.then(undefined, onRejected);
             * @param {(error: any) => U} onRejected A method called when/if the promise rejects. If undefined the next
             * onRejected method in the promise chain will be called.
             */
            catch<U>(onRejected: (error: any) => U): IThenable<U>;
        }

        enum State {
            PENDING = <any>(void 0),
            SEALED = 0,
            FULFILLED = 1,
            REJECTED = 2
        };

        var browserGlobal: any = (typeof window !== 'undefined') ? window : {},
            BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;

        // node
        function useNextTick(): () => void {
            return () => {
                process.nextTick(flush);
            };
        }

        function useMutationObserver(): () => void {
            var observer = new BrowserMutationObserver(flush),
                _document = acquire(__Document),
                _window = acquire(__Window),
                element = _document.createElement('div');

            observer.observe(element, { attributes: true });

            _window.addEventListener('unload', () => {
                observer.disconnect();
                observer = null;
            }, false);

            return () => {
                element.setAttribute('drainQueue', 'drainQueue');
            };
        }

        function useSetTimeout(): () => void {
            var global: any = global,
                local = (typeof global !== 'undefined') ? global : this;

            return () => {
                local.setTimeout(flush, 1);
            };
        }

        var queue: Array<any> = [];
        function flush(): void {
            var tuple: Array<(response: any) => void>,
                callback: (response: any) => void,
                arg: any;

            for (var i = 0; i < queue.length; i++) {
                tuple = queue[i];
                callback = tuple[0];
                arg = tuple[1];
                callback(arg);
            }
            queue = [];
        }

        var process: any = process,
            scheduleFlush: () => void;

        // decide what async method to use to triggering processing of queued callbacks:
        if (typeof process !== 'undefined' && {}.toString.call(process) === '[object process]') {
            scheduleFlush = useNextTick();
        } else if (BrowserMutationObserver) {
            scheduleFlush = useMutationObserver();
        } else {
            scheduleFlush = useSetTimeout();
        }

        /**
         * Describes a function passed into the constructor for a Promise. The function allows you to
         * resolve/reject the Promise.
         */
        export interface IResolveFunction<R> {
            /**
             * A function which allows you to resolve/reject a Promise.
             * @param resolve A method for resolving a Promise. If you pass in a 'thenable' argument 
             * (meaning if you pass in a Promise-like object), then the promise will resolve with the 
             * outcome of the object. Else the promise will resolve with the argument.
             * @param reject A method for rejecting a promise. The argument should be an instancof Error
             * to assist with debugging. If a method in the constructor for a Promise throws an error, 
             * the promise will reject with the error.
             */
            (resolve: (value?: R) => void, reject: (reason?: any) => void): void;
        }

        /**
         * The Type for referencing the '_Promise' injectable as a dependency.
         */
        export function IPromise(_window?: any): IPromise {
            if (!isNull(_window.Promise) &&
                isFunction(_window.Promise.all) &&
                isFunction(_window.Promise.race) &&
                isFunction(_window.Promise.resolve) &&
                isFunction(_window.Promise.reject)) {
                return _window.Promise;
            }
            return Promise;
        }

        register.injectable(__Promise, IPromise, [__Window], __CLASS);

        /**
         * The injectable reference for the ES6 Promise implementation.
         */
        export interface IPromise {
            /**
             * An ES6 implementation of the Promise API. Useful for asynchronous programming.
             * Takes in 2 generic types corresponding to the fullfilled success and error types. 
             * The error type (U) should extend Error in order to get proper stack tracing.
             * @param {plat.async.IResolveFunction<R>} resolveFunction A IResolveFunction for fulfilling/rejecting the Promise.
             */
            new <R>(resolveFunction: IResolveFunction<R>): IThenable<R>;

            /**
             * Returns a promise that fulfills when every item in the array is fulfilled.
             * Casts arguments to promises if necessary. The result argument of the
             * returned promise is an array containing the fulfillment result arguments
             * in-order. The rejection argument is the rejection argument of the
             * first-rejected promise.
             * @param {Array<plat.async.IThenable<R>>} promises An array of promises, although every argument is potentially
             * cast to a promise meaning not every item in the array needs to be a promise.
             */
            all<R>(promises: Array<IThenable<R>>): IThenable<Array<R>>;
            /**
             * Returns a promise that fulfills when every item in the array is fulfilled.
             * Casts arguments to promises if necessary. The result argument of the 
             * returned promise is an array containing the fulfillment result arguments 
             * in-order. The rejection argument is the rejection argument of the 
             * first-rejected promise.
             * @param {Array<R>} promises An array of objects, if an object is not a promise, it will be cast.
             */
            all<R>(promises: Array<R>): IThenable<Array<R>>;

            /**
             * Returns a promise that fulfills as soon as any of the promises fulfill,
             * or rejects as soon as any of the promises reject (whichever happens first).
             * @param {Array<plat.async.IThenable<R>>} promises An Array of promises to 'race'.
             * promises fulfilled.
             */
            race<R>(promises: Array<IThenable<R>>): IThenable<R>;
            /**
             * Returns a promise that fulfills as soon as any of the promises fulfill,
             * or rejects as soon as any of the promises reject (whichever happens first).
             * @param {Array<R>} promises An Array of anything to 'race'. Objects that aren't promises will
             * be cast.
             * promises fulfilled.
             */
            race<R>(promises: Array<R>): IThenable<R>;

            /**
             * Returns a promise that resolves immediately.
             */
            resolve(): IThenable<void>;
            /**
             * Returns a promise that resolves with the input value.
             * @param {R} value The value to resolve.
             */
            resolve<R>(value: R): IThenable<R>;

            /**
             * Returns a promise that rejects with the input value.
             * @param {any} value The value to reject.
             */
            reject(error?: any): IThenable<any>;
        }

        /**
         * HttpRequest provides a wrapper for the XMLHttpRequest object. Allows for
         * sending AJAX requests to a server. This class does not support 
         * synchronous requests.
         */
        export class HttpRequest {
            /**
             * The timeout ID associated with the specified timeout
             */
            clearTimeout: plat.IRemoveListener;

            /**
             * The created XMLHttpRequest
             */
            xhr: XMLHttpRequest;

            /**
             * The JSONP callback name
             */
            jsonpCallback: string;

            protected static _inject: any = {
                _Exception: __ExceptionStatic,
                _browser: __Browser,
                _window: __Window,
                _document: __Document,
                _config: __HttpConfig,
                _compat: __Compat
            };

            /**
             * The plat.IExceptionStatic injectable instance
             */
            protected _Exception: IExceptionStatic;

            /**
             * The plat.web.Browser injectable instance
             */
            protected _browser: web.Browser;

            /**
             * The injectable instance of type Window
             */
            protected _window: Window;

            /**
             * The injectable instance of type Document
             */
            protected _document: Document;

            /**
             * The configuration for an HTTP Request
             */
            protected _config: IHttpConfig;

            /**
             * The injectable instance of Compat
             */
            protected _compat: Compat;

            /**
             * Whether or not the browser supports the File API.
             */
            private __fileSupported: boolean;

            /**
             * The configuration for the specific HTTP Request
             */
            private __options: IHttpConfig;

            /**
             * The constructor for a HttpRequest.
             */
            constructor() {
                this.__fileSupported = this._compat.fileSupported
            }

            /**
             * Initializes the HttpRequest with options.
             * @param {plat.async.IHttpConfig} options The IHttpConfigStatic used to customize this HttpRequest.
             */
            initialize(options: IHttpConfig) {
                this.__options = extend({}, this._config, options);
            }

            /**
             * Executes an XMLHttpRequest and resolves an IAjaxPromise upon completion.
             */
            execute<R>(): AjaxPromise<R> {
                var options = this.__options,
                    url = options.url;

                if (!isString(url) || isEmpty(url.trim())) {
                    return this._invalidOptions();
                }

                options.url = this._browser.urlUtils(url).toString();

                var isCrossDomain = options.isCrossDomain || false,
                    xDomain = false;

                // check if forced cross domain call or cors is not supported (IE9)
                if (isCrossDomain) {
                    xDomain = true;
                } else {
                    this.xhr = new XMLHttpRequest();
                    if (isUndefined(this.xhr.withCredentials)) {
                        xDomain = this._browser.isCrossDomain(url);
                    }
                }

                if (xDomain) {
                    this.xhr = null;
                    this.jsonpCallback = options.jsonpCallback || uniqueId(__JSONP_CALLBACK);
                    return this.executeJsonp();
                }

                return this._sendXhrRequest();
            }

            /**
             * Executes an JSONP request and resolves an IAjaxPromise upon completion.
             */
            executeJsonp<R>(): AjaxPromise<R> {
                var options = this.__options,
                    url = options.url;

                if (!isString(url) || isEmpty(url.trim())) {
                    return this._invalidOptions();
                }

                options.url = this._browser.urlUtils(url).toString();
                if (isNull(this.jsonpCallback)) {
                    this.jsonpCallback = options.jsonpCallback || uniqueId(__Callback);
                }

                var promise = new AjaxPromise((resolve, reject) => {
                    var _window = <any>this._window,
                        _document = this._document,
                        scriptTag = _document.createElement('script'),
                        jsonpCallback = this.jsonpCallback,
                        jsonpIdentifier = options.jsonpIdentifier || 'callback';

                    scriptTag.src = url + ((url.indexOf('?') > -1) ? '&' : '?') + jsonpIdentifier + '=' + jsonpCallback;

                    var oldValue = _window[jsonpCallback];
                    _window[jsonpCallback] = (response: any) => {
                        // clean up
                        if (isFunction(this.clearTimeout)) {
                            this.clearTimeout();
                        }

                        _document.head.removeChild(scriptTag);
                        if (isUndefined(oldValue)) {
                            deleteProperty(_window, jsonpCallback);
                        } else {
                            _window[jsonpCallback] = oldValue;
                        }

                        // call callback
                        resolve({
                            response: response,
                            // ok
                            status: 200
                        });
                    };

                    _document.head.appendChild(scriptTag);

                    var timeout = options.timeout;
                    if (isNumber(timeout) && timeout > 0) {
                        // we first postpone to avoid always timing out when debugging, though this is not
                        // a foolproof method.
                        this.clearTimeout = postpone(() => {
                            this.clearTimeout = defer(() => {
                                reject(new AjaxError({
                                    response: 'Request timed out in ' + timeout + 'ms for ' + url,
                                    // request timeout
                                    status: 408
                                }));
                                _window[jsonpCallback] = noop;
                            }, timeout - 1);
                        });
                    }
                });

                promise.initialize(this);

                return promise;
            }

            /**
             * A wrapper for the XMLHttpRequest's onReadyStateChanged callback.
             * return true in the case of a success and false in the case of 
             * an error.
             */
            protected _xhrOnReadyStateChange(): boolean {
                var xhr = this.xhr;
                if (xhr.readyState === 4) {
                    var status = xhr.status;

                    if (status === 0) {
                        var response = xhr.response;
                        if (isNull(response)) {
                            try {
                                response = xhr.responseText;
                            } catch (e) { }
                        }

                        // file protocol issue **Needs to be tested more thoroughly**
                        // ok if response is not empty, Not Found otherwise
                        if (!isEmpty(response)) {
                            return true;
                        }

                        return false;
                    }

                    // 304 is not modified
                    if ((status >= 200 && status < 300) || status === 304) {
                        return true;
                    } else {
                        return false;
                    }
                }
                // else {} TODO: add progress for xhr if we choose to add progress to AjaxPromise
            }

            /**
             * The function that initializes and sends the XMLHttpRequest.
             * formatted IAjaxResponse and rejects if there is a problem with an 
             * IAjaxError.
             */
            protected _sendXhrRequest(): AjaxPromise<any> {
                var xhr = this.xhr,
                    options = this.__options,
                    method = options.method,
                    url = options.url,
                    promise = new AjaxPromise((resolve, reject) => {
                        xhr.onreadystatechange = () => {
                            var success = this._xhrOnReadyStateChange();

                            if (isNull(success)) {
                                return;
                            }

                            var response = this._formatResponse(options.responseType, success);

                            if (success) {
                                resolve(response);
                            } else {
                                reject(new AjaxError(response));
                            }

                            this.xhr = options = null;
                        };

                        if (!isString(method)) {
                            var _Exception: IExceptionStatic = this._Exception;
                            _Exception.warn('AjaxOptions method was not of type string. Defaulting to "GET".', _Exception.AJAX);
                            method = 'GET';
                        }

                        xhr.open(
                            method.toUpperCase(),
                            url,
                        // synchronous XHR not supported
                            true,
                            options.user,
                            options.password
                            );

                        var responseType = options.responseType;
                        if (!(this.__fileSupported || responseType === '' || responseType === 'text')) {
                            responseType = '';
                        }

                        xhr.responseType = responseType;
                        xhr.withCredentials = options.withCredentials;

                        var mimeType = options.overrideMimeType,
                            data = options.data;

                        if (isString(mimeType) && !isEmpty(mimeType)) {
                            xhr.overrideMimeType(mimeType);
                        }

                        if (isNull(data) || data === '') {
                            // no data exists so set headers and send request
                            this.__setHeaders();
                            xhr.send();
                        } else {
                            var transforms = options.transforms || [],
                                length = transforms.length,
                                contentType = options.contentType,
                                contentTypeExists = isString(contentType) && !isEmpty(contentType);

                            if (length > 0) {
                                // if data transforms defined, assume they're going to take care of 
                                // any and all transformations.
                                for (var i = 0; i < length; ++i) {
                                    data = transforms[i](data, xhr);
                                }

                                // if contentType exists, assume they did not set it in 
                                // their headers as well
                                if (contentTypeExists) {
                                    xhr.setRequestHeader('Content-Type', contentType);
                                }

                                this.__setHeaders();
                                xhr.send(data);
                            } else if (isObject(data)) {
                                // if isObject and contentType exists we want to transform the data
                                if (contentTypeExists) {
                                    var contentTypeLower = contentType.toLowerCase();
                                    if (contentTypeLower.indexOf('x-www-form-urlencoded') !== -1) {
                                        // perform an encoded form transformation
                                        data = this.__serializeFormData();
                                        // set Content-Type header because we're assuming they didn't set it 
                                        // in their headers object
                                        xhr.setRequestHeader('Content-Type', contentType);
                                        this.__setHeaders();
                                        xhr.send(data);
                                    } else if (contentTypeLower.indexOf('multipart/form-data') !== -1) {
                                        // need to check if File is a supported object
                                        if (this.__fileSupported) {
                                            // use FormData
                                            data = this.__appendFormData();
                                            // do not set the Content-Type header due to modern browsers 
                                            // setting special headers for multipart/form-data
                                            this.__setHeaders();
                                            xhr.send(data);
                                        } else {
                                            // use iframe trick for older browsers (do not send a request)
                                            // this case is the reason for this giant, terrible, nested if-else statement
                                            this.__submitFramedFormData().then((response) => {
                                                resolve(response);
                                            }, () => {
                                                    this.xhr = null;
                                                });
                                        }
                                    } else {
                                        // assume stringification is possible
                                        data = JSON.stringify(data);
                                        // set Content-Type header because we're assuming they didn't set it 
                                        // in their headers object
                                        xhr.setRequestHeader('Content-Type', contentType);
                                        this.__setHeaders();
                                        xhr.send(data);
                                    }
                                } else {
                                    // contentType does not exist so simply set defined headers and send raw data
                                    this.__setHeaders();
                                    xhr.send(data);
                                }
                            } else {
                                // if contentType exists set Content-Type header because we're assuming they didn't set it 
                                // in their headers object
                                if (contentTypeExists) {
                                    xhr.setRequestHeader('Content-Type', contentType);
                                }

                                this.__setHeaders();
                                xhr.send(data);
                            }
                        }

                        var timeout = options.timeout;
                        if (isNumber(timeout) && timeout > 0) {
                            // we first postpone to avoid always timing out when debugging, though this is not
                            // a foolproof method.
                            this.clearTimeout = postpone(() => {
                                this.clearTimeout = defer(() => {
                                    reject(new AjaxError({
                                        response: 'Request timed out in ' + timeout + 'ms for ' + options.url,
                                        status: xhr.status,
                                        getAllResponseHeaders: () => { return xhr.getAllResponseHeaders(); },
                                        xhr: xhr
                                    }));

                                    xhr.onreadystatechange = null;
                                    xhr.abort();
                                    this.xhr = null;
                                }, timeout - 1);
                            });
                        }
                    });

                promise.initialize(this);

                return promise;
            }

            /**
             * Returns a promise that is immediately rejected due to an error.
             * with an IAjaxError
             */
            protected _invalidOptions(): AjaxPromise<any> {
                return new AjaxPromise((resolve, reject) => {
                    var _Exception: IExceptionStatic = this._Exception;
                    _Exception.warn('Attempting a request without specifying a url', _Exception.AJAX);
                    reject(new AjaxError({
                        response: 'Attempting a request without specifying a url',
                        status: null,
                        getAllResponseHeaders: null,
                        xhr: null
                    }));
                });
            }

            /**
             * The function that formats the response from the XMLHttpRequest.
             * @param {string} responseType The user designated responseType
             * @param {boolean} success Signifies if the response was a success
             * the requester.
             */
            protected _formatResponse(responseType: string, success: boolean): IAjaxResponse<any> {
                var xhr = this.xhr,
                    status = xhr.status,
                    response = xhr.response;

                // need to try, catch instead of boolean short circuit because chrome doesn't like checking 
                // responseText when the responseType is anything other than empty or 'text'
                if (isNull(response)) {
                    try {
                        response = xhr.responseText;
                    } catch (e) { }
                }

                if (status === 0) {
                    // file protocol issue **Needs to be tested more thoroughly**
                    // ok if response empty, Not Found otherwise
                    status = success ? 200 : 404;
                }

                xhr.onreadystatechange = null;

                if (isFunction(this.clearTimeout)) {
                    this.clearTimeout();
                }

                if (responseType === 'json' && isString(response)) {
                    try {
                        response = JSON.parse(response);
                    } catch (e) { }
                }

                return {
                    response: response,
                    status: status,
                    getAllResponseHeaders: () => { return xhr.getAllResponseHeaders(); },
                    xhr: xhr
                };
            }

            /**
             * Sets the headers for an XMLHttpRequest
             */
            private __setHeaders(): void {
                var headers = this.__options.headers,
                    keys = Object.keys(headers || {}),
                    xhr = this.xhr,
                    length = keys.length,
                    key: string,
                    i: number;

                for (i = 0; i < length; ++i) {
                    key = keys[i];
                    xhr.setRequestHeader(key, headers[key]);
                }
            }

            /**
             * Serializes multipart form data in an XMLHttpRequest as a string.
             */
            private __serializeFormData(): string {
                var data = this.__options.data,
                    keys = Object.keys(data),
                    key: string,
                    val: any,
                    formBuffer: Array<string> = [];

                while (keys.length > 0) {
                    key = keys.pop();
                    val = data[key];
                    if (isNull(val)) {
                        val = '';
                    } else if (isObject(val)) {
                        // may throw a fatal error but this is an invalid case
                        var _Exception: IExceptionStatic = this._Exception;
                        _Exception.warn('Invalid form entry with key "' + key + '" and value "' + val, _Exception.AJAX);
                        val = JSON.stringify(val);
                    }

                    formBuffer.push(encodeURIComponent(key) + '=' + encodeURIComponent(val));
                }

                return formBuffer.join('&').replace(/%20/g, '+');
            }

            /**
             * Creates FormData to add to the XMLHttpRequest.
             */
            private __appendFormData(): FormData {
                var data = this.__options.data,
                    formData = new FormData(),
                    keys = Object.keys(data),
                    key: string,
                    val: any;

                while (keys.length > 0) {
                    key = keys.pop();
                    val = data[key];
                    if (isNull(val)) {
                        formData.append(key, '');
                    } else if (isObject(val)) {
                        if (isFile(val)) {
                            formData.append(key, val, val.name || val.fileName || 'blob');
                        } else {
                            // may throw a fatal error but this is an invalid case
                            var _Exception: IExceptionStatic = this._Exception;
                            _Exception.warn('Invalid form entry with key "' + key + '" and value "' + val, _Exception.AJAX);
                            formData.append(key, JSON.stringify(val));
                        }
                    } else {
                        formData.append(key, val);
                    }
                }

                return formData;
            }

            /**
             * Handles submitting multipart form data using an iframe.
             */
            private __submitFramedFormData(): IThenable<IAjaxResponse<any>> {
                var options = this.__options,
                    data = options.data,
                    url = options.url,
                    _document = this._document,
                    $body = _document.body,
                    Promise: IPromise = acquire(__Promise),
                    form = _document.createElement('form'),
                    iframe = _document.createElement('iframe'),
                    iframeName = uniqueId('iframe_target'),
                    keys = Object.keys(data),
                    key: string;

                iframe.name = form.target = iframeName;
                iframe.src = 'javascript:false;';
                form.enctype = form.encoding = 'multipart/form-data';
                form.action = url;
                form.method = 'POST';
                form.style.display = 'none';

                while (keys.length > 0) {
                    key = keys.pop();
                    form.insertBefore(this.__createInput(key, data[key]), null);
                }

                return new Promise<IAjaxResponse<any>>((resolve, reject) => {
                    this.xhr.abort = () => {
                        iframe.onload = null;
                        $body.removeChild(form);
                        $body.removeChild(iframe);
                        reject();
                    };

                    iframe.onload = () => {
                        var content = iframe.contentDocument.body.innerHTML;

                        $body.removeChild(form);
                        $body.removeChild(iframe);

                        resolve({
                            response: content,
                            status: 200,
                            getAllResponseHeaders: () => ''
                        });

                        this.xhr = iframe.onload = null;
                    };

                    $body.insertBefore(form, null);
                    $body.insertBefore(iframe, null);
                    form.submit();
                });
            }

            /**
             * Creates input for form data submissions.
             */
            private __createInput(key: string, val: any): HTMLInputElement {
                var _document = this._document,
                    _Exception: IExceptionStatic = this._Exception,
                    input = <HTMLInputElement>_document.createElement('input');

                input.type = 'hidden';
                input.name = key;

                if (isNull(val)) {
                    input.value = '';
                } else if (isObject(val)) {
                    // check if val is an pseudo File
                    if (isFunction(val.slice) && !(isUndefined(val.name) || isUndefined(val.path))) {
                        var fileList = _document.querySelectorAll('input[type="file"][name="' + key + '"]'),
                            length = fileList.length;
                        // if no inputs found, stringify the data
                        if (length === 0) {
                            _Exception.warn('Could not find input[type="file"] with [name="' + key +
                                '"]. Stringifying data instead.', _Exception.AJAX);
                            input.value = JSON.stringify(val);
                        } else if (length === 1) {
                            input = <HTMLInputElement>fileList[0];
                            // swap nodes
                            var clone = input.cloneNode(true);
                            input.parentNode.insertBefore(clone, input);
                        } else {
                            // rare case but may have multiple forms with file inputs 
                            // that have the same name
                            var fileInput: HTMLInputElement,
                                path = val.path;
                            while (length-- > 0) {
                                fileInput = <HTMLInputElement>fileList[length];
                                if (fileInput.value === path) {
                                    input = fileInput;
                                    // swap nodes
                                    var inputClone = input.cloneNode(true);
                                    input.parentNode.insertBefore(inputClone, input);
                                    break;
                                }
                            }

                            // could not find the right file
                            if (length === -1) {
                                _Exception.warn('Could not find input[type="file"] with [name="' + key + '"] and [value="' +
                                    val.path + '"]. Stringifying data instead.', _Exception.AJAX);
                                input.value = JSON.stringify(val);
                            }
                        }
                    } else {
                        // may throw a fatal error but this is an invalid case
                        _Exception.warn('Invalid form entry with key "' + key + '" and value "' + val, _Exception.AJAX);
                        input.value = JSON.stringify(val);
                    }
                } else {
                    input.value = val;
                }

                return input;
            }
        }

        /**
         * Describes an object which contains Ajax configuration properties.
         */
        export interface IHttpConfig extends IJsonpConfig {
            /**
             * The HTTP method type of XmlHttpRequest such as 'GET', 'POST', 'PUT', 
             * 'DELETE', etc. Ignored for non-HTTP urls. Defaults to 'GET'.
             */
            method?: string;

            /**
             * The number of milliseconds a request can take before 
             * automatically being terminated. A value of 0 
             * means there is no timeout.
             */
            timeout?: number;

            /**
             * An optional user string for the XmlHttpRequest
             */
            user?: string;

            /**
             * An optional password string for the XmlHttpRequest
             */
            password?: string;

            /**
             * The XMLHttpRequestResponseType. The response should 
             * still be checked when received due to browser 
             * incompatibilities. If a browser does not support a 
             * response type it will return the value as a string. 
             * The response type does not affect JSONP callback 
             * arguments.
             */
            responseType?: string;

            /**
             * The Content-Type header for XMLHttpRequest when 
             * data is being sent. The default is 
             * 'application/json;charset=utf-8;'.
             */
            contentType?: string;

            /**
             * A string to override the MIME type returned by the server.
             */
            overrideMimeType?: string;

            /**
             * A key/value pair object where the key is a DOMString header key
             * and the value is the DOMString header value.
             */
            headers?: IObject<any>;

            /**
             * Indicates whether or not cross-site Access-Control requests 
             * should be made using credentials such as cookies or 
             * authorization headers. The default is false.
             */
            withCredentials?: boolean;

            /**
             * The request payload
             */
            data?: any;

            /**
             * An array of data transform functions that fire in order and consecutively 
             * pass the returned result from one function to the next.
             */
            transforms?: Array<IHttpTransformFunction>;

            /**
             * Forces a JSONP, cross-domain request when set to true.
             * The default is false.
             */
            isCrossDomain?: boolean;
        }

        /**
         * A function that is used to transform XMLHttpRequest data.
         */
        export interface IHttpTransformFunction {
            /**
             * The method signature for IHttpTransformFunction.
             * @param {any} data The data for the XMLHttpRequest.
             * @param {XMLHttpRequest} xhr The XMLHttpRequest for the data.
             */
            (data: any, xhr: XMLHttpRequest): any;
        }

        /**
         * Describes an object which contains JSONP configuration properties.
         */
        export interface IJsonpConfig {
            /**
             * The url for the JSONP callback 
             * (without the `?{callback}={callback_name}` parameter in the url) 
             * or for the XmlHttpRequest.
             */
            url: string;

            /**
             * The identifier the server uses to get the name of the JSONP
             * callback. The default is 'callback' as seen in 
             * http://www.platyfi.com/data?callback=plat_fnName.
             */
            jsonpIdentifier?: string;

            /**
             * A specified name for the JSONP callback (in case the server has 
             * it hardcoded and/or does not get it from the given url). The 
             * default is a unique plat id generated separately for 
             * each JSONP callback seen as 'plat_callback00' in
             * http://www.platyfi.com/data?callback=plat_callback00.
             */
            jsonpCallback?: string;
        }

        /**
         * Describes an object that is the response to an AJAX request.
         */
        export interface IAjaxResponse<R> {
            /**
             * The AJAX response or responseText. The response should 
             * be checked when received due to browser 
             * incompatibilities with responseType. If a browser does 
             * not support a response type it will return the value as 
             * a string.
             */
            response: R;

            /**
             * The XHR status. Resolves as 200 for JSONP.
             */
            status: number;

            /**
             * A method for getting the XHR response headers.
             */
            getAllResponseHeaders?: () => string;

            /**
             * The XMLHttpRequest object associated with the AJAX call
             */
            xhr?: XMLHttpRequest;
        }

        /**
         * Describes the AjaxPromise's resolve function
         */
        export interface IAjaxResolveFunction<R> {
            /**
             * The method signature for an IAjaxResolveFunction.
             * @param {(value?: plat.async.IAjaxResponse<R>) => any} resolve The function to call when the 
             * AJAX call has successfully fulfilled.
             * @param {(reason?: plat.async.AjaxError) => any} reject The function to call when the 
             * AJAX call fails.
             */
            (resolve: (value?: IAjaxResponse<R>) => any, reject: (reason?: AjaxError) => any): void;
        }

        /**
         * A class that forms an Error object with an IAjaxResponse.
         */
        export class AjaxError implements Error, IAjaxResponse<any> {
            /**
             * The name of the Error ('AjaxError')
             */
            name: string = 'AjaxError';

            /**
             * The Error message
             */
            message: string;

            /**
             * The response from the XMLHttpRequest
             */
            response: any;

            /**
             * The status code from the XMLHttpRequest
             */
            status: number;

            /**
             * A method for getting the XHR response headers.
             */
            getAllResponseHeaders: () => string;

            /**
             * The XMLHttpRequest object associated with the AJAX call
             */
            xhr: XMLHttpRequest;

            /**
             * The constructor for an AjaxError.
             * @param {plat.async.IAjaxResponse} response The IAjaxResponse object.
             */
            constructor(response: IAjaxResponse<any>) {
                Error.apply(this);
                this.response = this.message = response.response;
                this.status = response.status;
                this.getAllResponseHeaders = response.getAllResponseHeaders;
                this.xhr = response.xhr;
            }

            /**
             * Outputs a formatted string describing the AjaxError.
             */
            toString(): string {
                var response = this.response,
                    responseText = response;

                if (isObject(response) && !response.hasOwnProperty('toString')) {
                    responseText = JSON.stringify(response);
                }

                return 'Request failed with status: ' + this.status + ' and response: ' + responseText;
            }
        }

        // have to bypass TS flags in order to properly extend Error
        (<any>AjaxError).prototype = Error.prototype;

        /**
         * Describes a type of Promise that fulfills with an IAjaxResponse 
         * and can be optionally cancelled.
         */
        export class AjaxPromise<R> extends Promise<IAjaxResponse<R>> implements IAjaxThenable<IAjaxResponse<R>> {
            /**
             * The Window object.
             */
            protected _window: Window = acquire(__Window);

            /**
             * The HttpRequest object.
             */
            private __http: HttpRequest;

            /**
             * The constructor method for the {@link plat.async.AjaxPromise}.
             * @param {plat.async.IAjaxResolveFunction} resolveFunction The promise resolve function.
             */
            constructor(resolveFunction: IAjaxResolveFunction<R>);
            /**
             * The constructor method for the {@link plat.async.AjaxPromise}.
             * @param {plat.async.IAjaxResolveFunction} resolveFunction The promise resolve function.
             * @param {any} promise The promise object to allow for cancelling the {@link plat.async.AjaxPromise}.
             */
            constructor(resolveFunction: IAjaxResolveFunction<R>, promise: any);
            constructor(resolveFunction: IAjaxResolveFunction<R>, promise?: any) {
                super(resolveFunction);
                if (!isNull(promise)) {
                    this.__http = promise.__http;
                }
            }

            /**
             * A method to initialize this AjaxPromise, passing it the
             * associated IHttpRequest.
             * @param {plat.async.HttpRequest} http The http request for this promise.
             */
            initialize(http: HttpRequest) {
                if (isObject(http) && isNull(this.__http)) {
                    this.__http = http;
                }
            }

            /**
             * A method to cancel the AJAX call associated with this AjaxPromise.
             */
            cancel(): void {
                var http = this.__http,
                    xhr = http.xhr,
                    jsonpCallback = http.jsonpCallback;

                if (isFunction(http.clearTimeout)) {
                    http.clearTimeout();
                }

                if (!isNull(xhr)) {
                    xhr.onreadystatechange = null;
                    xhr.abort();
                    http.xhr = null;
                } else if (!isNull(jsonpCallback)) {
                    (<any>this._window)[jsonpCallback] = noop;
                }

                (<any>this).__subscribers = [];
            }

            /**
             * Takes in two methods, called when/if the promise fulfills/rejects.
             * next then method in the promise chain.
             * @param {(success: plat.async.IAjaxResponse<R>) => plat.async.IAjaxThenable<U>} onFulfilled A method called when/if 
             * the promise fulfills. If undefined the next onFulfilled method in the promise chain will be called.
             * @param {(error: plat.async.AjaxError) => plat.async.IAjaxThenable<U>} onRejected A method called when/if the promise rejects. 
             * If undefined the next onRejected method in the promise chain will be called.
             */
            then<U>(onFulfilled: (success: IAjaxResponse<R>) => U,
                onRejected?: (error: AjaxError) => any): IAjaxThenable<U>;
            /**
             * Takes in two methods, called when/if the promise fulfills/rejects.
             * next then method in the promise chain.
             * @param {(success: plat.async.IAjaxResponse<R>) => plat.async.IAjaxThenable<U>} onFulfilled A method called when/if 
             * the promise fulfills. If undefined the next onFulfilled method in the promise chain will be called.
             * @param {(error: plat.async.AjaxError) => U} onRejected A method called when/if the promise rejects. 
             * If undefined the next onRejected method in the promise chain will be called.
             */
            then<U>(onFulfilled: (success: IAjaxResponse<R>) => IThenable<U>,
                onRejected?: (error: AjaxError) => IThenable<U>): IAjaxThenable<U>;
            /**
             * Takes in two methods, called when/if the promise fulfills/rejects.
             * next then method in the promise chain.
             * @param {(success: plat.async.IAjaxResponse<R>) => U} onFulfilled A method called when/if the promise fulfills. 
             * If undefined the next onFulfilled method in the promise chain will be called.
             * @param {(error: plat.async.AjaxError) => plat.async.IAjaxThenable<U>} onRejected A method called when/if the promise rejects. 
             * If undefined the next onRejected method in the promise chain will be called.
             */
            then<U>(onFulfilled: (success: IAjaxResponse<R>) => IThenable<U>,
                onRejected?: (error: AjaxError) => any): IAjaxThenable<U>;
            /**
             * Takes in two methods, called when/if the promise fulfills/rejects.
             * next then method in the promise chain.
             * @param {(success: plat.async.IAjaxResponse<R>) => U} onFulfilled A method called when/if the promise fulfills. 
             * If undefined the next onFulfilled method in the promise chain will be called.
             * @param {(error: plat.async.AjaxError) => U} onRejected A method called when/if the promise rejects. 
             * If undefined the next onRejected method in the promise chain will be called.
             */
            then<U>(onFulfilled: (success: IAjaxResponse<R>) => U,
                onRejected?: (error: AjaxError) => IThenable<U>): IAjaxThenable<U>;
            then<U>(onFulfilled: (success: IAjaxResponse<R>) => U,
                onRejected?: (error: AjaxError) => any): IAjaxThenable<U> {
                return <IAjaxThenable<U>><any>super.then<U>(onFulfilled, onRejected);
            }

            /**
             * A wrapper method for Promise.then(undefined, onRejected);
             * @param {(error: any) => plat.async.IAjaxThenable<U>} onRejected A method called when/if the promise rejects. 
             * If undefined the next onRejected method in the promise chain will be called.
             */
            catch<U>(onRejected: (error: any) => IAjaxThenable<U>): IAjaxThenable<U>;
            /**
             * A wrapper method for Promise.then(undefined, onRejected);
             * @param {(error: any) => U} onRejected A method called when/if the promise rejects. If undefined the next
             * onRejected method in the promise chain will be called.
             */
            catch<U>(onRejected: (error: any) => U): IAjaxThenable<U>;
            catch<U>(onRejected: (error: any) => any): IAjaxThenable<U> {
                return <IAjaxThenable<U>><any>super.catch<U>(onRejected);
            }
        }

        /**
         * Describes a type of IThenable that can optionally cancel it's associated AJAX call.
         */
        export interface IAjaxThenable<R> extends IThenable<R> {
            /**
             * A method to cancel the AJAX call associated with this {@link plat.async.AjaxPromise}.
             */
            cancel(): void;

            /**
             * Takes in two methods, called when/if the promise fulfills/rejects.
             * next then method in the promise chain.
             * @param {(success: R) => plat.async.IAjaxThenable<U>} onFulfilled A method called when/if the promise fulfills. 
             * If undefined the next onFulfilled method in the promise chain will be called.
             * @param {(error: any) => plat.async.IAjaxThenable<U>} onRejected A method called when/if the promise rejects. 
             * If undefined the next onRejected method in the promise chain will be called.
             */
            then<U>(onFulfilled: (success: R) => IThenable<U>, onRejected?: (error: any) => IThenable<U>): IAjaxThenable<U>;
            /**
             * Takes in two methods, called when/if the promise fulfills/rejects.
             * next then method in the promise chain.
             * @param {(success: R) => plat.async.IAjaxThenable<U>} onFulfilled A method called when/if the promise fulfills. 
             * If undefined the next onFulfilled method in the promise chain will be called.
             * @param {(error: any) => U} onRejected A method called when/if the promise rejects. 
             * If undefined the next onRejected method in the promise chain will be called.
             */
            then<U>(onFulfilled: (success: R) => IThenable<U>, onRejected?: (error: any) => U): IAjaxThenable<U>;
            /**
             * Takes in two methods, called when/if the promise fulfills/rejects.
             * next then method in the promise chain.
             * @param {(success: R) => U} onFulfilled A method called when/if the promise fulfills. 
             * If undefined the next onFulfilled method in the promise chain will be called.
             * @param {(error: any) => plat.async.IAjaxThenable<U>} onRejected A method called when/if the promise rejects. 
             * If undefined the next onRejected method in the promise chain will be called.
             */
            then<U>(onFulfilled: (success: R) => U, onRejected?: (error: any) => IThenable<U>): IAjaxThenable<U>;
            /**
             * Takes in two methods, called when/if the promise fulfills/rejects.
             * next then method in the promise chain.
             * @param {(success: R) => U} onFulfilled A method called when/if the promise fulfills. 
             * If undefined the next onFulfilled method in the promise chain will be called.
             * @param {(error: any) => U} onRejected A method called when/if the promise rejects. 
             * If undefined the next onRejected method in the promise chain will be called.
             */
            then<U>(onFulfilled: (success: R) => U, onRejected?: (error: any) => U): IAjaxThenable<U>;

            /**
             * A wrapper method for Promise.then(undefined, onRejected);
             * @param {(error: any) => plat.async.IAjaxThenable<U>} onRejected A method called when/if the promise rejects. 
             * If undefined the next onRejected method in the promise chain will be called.
             */
            catch<U>(onRejected: (error: any) => IThenable<U>): IAjaxThenable<U>;
            /**
             * A wrapper method for Promise.then(undefined, onRejected);
             * @param {(error: any) => U} onRejected A method called when/if the promise rejects. 
             * If undefined the next onRejected method in the promise chain will be called.
             */
            catch<U>(onRejected: (error: any) => U): IAjaxThenable<U>;
        }

        /**
         * Describes an object that provides value mappings for XMLHttpRequestResponseTypes
         */
        export interface IHttpResponseType {
            /**
             * The default response type (empty string)
             */
            DEFAULT: string;

            /**
             * The arrayBuffer type ('arrayBuffer')
             */
            ARRAYBUFFER: string;

            /**
             * The blob type ('blob')
             */
            BLOB: string;

            /**
             * The document type ('document')
             */
            DOCUMENT: string;

            /**
             * The json type ('json')
             */
            JSON: string;

            /**
             * The text type ('text')
             */
            TEXT: string;
        }

        /**
         * Describes an object that provides Content-Type mappings for Http POST requests.
         */
        export interface IHttpContentType {
            /**
             * Standard denotation for form encoded data. All objects are converted 
             * to string key-value pairs.
             */
            ENCODED_FORM: string;

            /**
             * Standard denotation for JavaScript Object Notation (JSON).
             */
            JSON: string;

            /**
             * Standard denotation for a multi-part Webform. Associated with 
             * an entype of 'multipart/form-data'.
             */
            MULTIPART_FORM: string;

            /**
             * Standard denotation for arbitrary binary data.
             */
            OCTET_STREAM: string;

            /**
             * Standard denotation for XML files.
             */
            XML: string;

            /**
             * Standard denotation for textual data.
             */
            PLAIN_TEXT: string;

            /**
             * Standard denotation for HTML.
             */
            HTML: string;
        }

        /**
         * The instantiated class of the injectable for making 
         * AJAX requests.
         */
        export class Http {
            /**
             * Default Http config
             */
            static config: IHttpConfig = {
                url: null,
                method: 'GET',
                responseType: '',
                transforms: [],
                headers: {},
                withCredentials: false,
                timeout: null,
                jsonpIdentifier: 'callback',
                contentType: 'application/json;charset=utf-8'
            };

            /**
             * Provides value mappings for XMLHttpRequestResponseTypes
             */
            responseType: IHttpResponseType = {
                DEFAULT: '',
                ARRAYBUFFER: 'arraybuffer',
                BLOB: 'blob',
                DOCUMENT: 'document',
                JSON: 'json',
                TEXT: 'text'
            };

            /**
             * Provides Content-Type mappings for Http POST requests.
             */
            contentType: IHttpContentType = {
                ENCODED_FORM: 'application/x-www-form-urlencoded;charset=utf-8',
                JSON: 'application/json;charset=utf-8',
                MULTIPART_FORM: 'multipart/form-data',
                OCTET_STREAM: 'application/octet-stream;charset=utf-8',
                XML: 'application/xml;charset=utf-8',
                PLAIN_TEXT: 'text/plain',
                HTML: 'text/html'
            };

            /**
             * A wrapper method for the Http class that creates and executes a new Http with
             * the specified IHttpConfig. This function will check if 
             * XMLHttpRequest level 2 is present, and will default to JSONP if it isn't and 
             * the request is cross-domain.
             * @param {plat.async.IHttpConfig} options The IHttpConfig for either the XMLHttpRequest 
             * or the JSONP callback.
             * or rejected, will return an IAjaxResponse object.
             */
            ajax<R>(options: IHttpConfig): AjaxPromise<R> {
                var request: HttpRequest = acquire(HttpRequest);
                request.initialize(options);
                return request.execute<R>();
            }

            /**
             * A direct method to force a cross-domain JSONP request.
             * @param {plat.async.IJsonpConfig} options The IJsonpConfig 
             * IAjaxResponse object.
             */
            jsonp<R>(options: IJsonpConfig): AjaxPromise<R> {
                var request: HttpRequest = acquire(HttpRequest);
                request.initialize(options);
                return request.executeJsonp<R>();
            }

            /**
             * Makes an ajax request, specifying responseType: 'json'.
             * @param {plat.async.IHttpConfig} options The IHttpConfig 
             * for either the XMLHttpRequest or the JSONP callback.
             * will return an IAjaxResponse object, with the response 
             * being a parsed JSON object (assuming valid JSON).
             */
            json<R>(options: IHttpConfig): AjaxPromise<R> {
                var request: HttpRequest = acquire(HttpRequest);
                request.initialize(extend({}, options, { responseType: 'json' }));
                return request.execute<R>();
            }
        }

        register.injectable(__Http, Http);

        /**
         * The Type for referencing the '_httpConfig' injectable as a dependency.
         */
        export function IHttpConfig(): IHttpConfig {
            return Http.config;
        }

        register.injectable(__HttpConfig, IHttpConfig);
    }
    /**
     * Holds classes and interfaces related to storage in platypus.
     */
    export module storage {
        /**
         * The keyed collection of all created Caches in the 
         * ICacheFactory.
         */
        var caches: IObject<Cache<any>> = {};
        /**
         * Internal storage for all the items stored in each Cache.
         */
        var internalCaches: any = {};

        /**
         * A Cache class, for use with the ICacheFactory injectable. 
         * Used for storing objects. Takes in a generic type corresponding to the type of objects it contains.
         */
        export class Cache<T> {
            /**
             * Method for creating a new cache object. Takes a generic type to denote the
             * type of objects stored in the new cache.  If a cache with the same ID already exists
             * in the ICacheFactory, a new cache will not be created.
             * @param {string} id The ID of the new Cache.
             * @param {plat.storage.ICacheOptions} options ICacheOptions 
             * for customizing the Cache.
             */
            static create<T>(id: string, options?: ICacheOptions): Cache<T> {
                var cache: Cache<T> = caches[id];

                if (isNull(cache)) {
                    cache = caches[id] = new Cache<T>(id, options);
                }

                return cache;
            }

            /**
             * Gets a cache out of the ICacheFactory if it exists.
             * @param {string} id The identifier used to search for the cache.
             */
            static fetch<T>(id: string): Cache<T> {
                return caches[id];
            }

            /**
             * Clears the ICacheFactory and all of its caches.
             */
            static clear(): void {
                var keys = Object.keys(caches),
                    length = keys.length;

                for (var i = 0; i < length; ++i) {
                    caches[keys[i]].clear();
                }

                caches = <IObject<Cache<any>>>{};
            }

            /**
             * The size of this cache specified by its ID.
             */
            private __size: number;
            /**
             * The ID of this cache.
             */
            private __id: string;
            /**
             * The options for this cache.
             */
            private __options: ICacheOptions;

            /**
             * The constructor for a Cache.
             * @param {string} id The id to use to retrieve the cache from the ICacheFactory.
             * @param {plat.storage.ICacheOptions} options The ICacheOptions for customizing the cache.
             */
            constructor(id: string, options?: ICacheOptions) {
                this.__id = id;
                this.__options = options;
                this.__size = 0;

                if (isNull(options)) {
                    this.__options = {
                        timeout: 0
                    };
                }

                internalCaches[id] = {};
            }

            /**
             * Retrieves the ICacheInfo about this cache 
             * (i.e. ID, size, options)
             */
            info(): ICacheInfo {
                return {
                    id: this.__id,
                    size: this.__size,
                    options: this.__options
                };
            }
        
            /**
             * Method for inserting an object into an Cache.
             * @param {string} key The key to use for storage/retrieval of the object.
             * @param {T} value The value to store with the associated key.
             */
            put(key: string, value: T): T {
                var val = internalCaches[this.__id][key];
                internalCaches[this.__id][key] = value;

                if (isUndefined(val)) {
                    this.__size++;
                }

                var timeout = this.__options.timeout;

                if (isNumber(timeout) && timeout > 0) {
                    defer(<(key?: string) => void>this.remove, timeout, [key], this);
                }

                return value;
            }
        
            /**
             * Method for retrieving an object from an Cache.
             * @param key The key to search for in an Cache.
             */
            read(key: string): T {
                return internalCaches[this.__id][key];
            }
        
            /**
             * Method for removing an object from an Cache.
             * @param {string} key The key to remove from the Cache.
             */
            remove(key: string): void {
                deleteProperty(internalCaches[this.__id], key);
                this.__size--;
            }
        
            /**
             * Method for clearing an Cache, removing all of its keys.
             */
            clear(): void {
                internalCaches[this.__id] = {};
                this.__size = 0;
            }
        
            /**
             * Method for removing an ICache from the ICacheFactory.
             */
            dispose(): void {
                this.clear();
                deleteProperty(caches, this.__id);
            }
        }

        /**
         * The Type for referencing the '_CacheFactory' injectable as a dependency.
         */
        export function ICacheFactory(): ICacheFactory {
            return Cache;
        }

        register.injectable(__CacheFactory, ICacheFactory, null, __FACTORY);
    
        /**
         * Used to manage all the defined caches for the current application session.
         */
        export interface ICacheFactory {
            /**
             * Method for creating a new cache object. Takes a generic type to denote the
             * type of objects stored in the new cache.  If a cache with the same ID already exists
             * in the ICacheFactory, a new cache will not be created.
             * @param {string} id The ID of the new Cache.
             * @param {plat.storage.ICacheOptions} options ICacheOptions 
             * for customizing the Cache.
             */
            create<T>(id: string, options?: ICacheOptions): Cache<T>;

            /**
             * Gets a cache out of the ICacheFactory if it exists.
             * @param {string} id The identifier used to search for the cache.
             */
            fetch<T>(id: string): Cache<T>;

            /**
             * Clears the ICacheFactory and all of its caches.
             */
            clear(): void;
        }
    
        /**
         * A cache for persisting NodeManager trees.
         */
        export var managerCache = Cache.create<processing.NodeManager>('__managerCache');

        /**
         * The Type for referencing the '_managerCache' injectable as a dependency.
         */
        export function IManagerCache(): typeof managerCache {
            return managerCache;
        }

        register.injectable(__ManagerCache, IManagerCache);
    
        /**
         * Options for a cache.
         */
        export interface ICacheOptions {
            /**
             * Specifies a timeout for a cache value. When a value 
             * is put in the cache, it will be valid for the given
             * period of time (in milliseconds). After the timeout 
             * is reached, the value will automatically be removed
             * from the cache.
             */
            timeout?: number;
        }
    
        /**
         * Contains information about an Cache.
         */
        export interface ICacheInfo {
            /**
             * A unique id for the Cache object, used to 
             * retrieve the ICache out of the CacheFactory.
             */
            id: string;
        
            /**
             * Represents the number of items in the Cache.
             */
            size: number;
        
            /**
             * Represents the ICacheOptions that the 
             * Cache is using.
             */
            options: ICacheOptions;
        }

        /**
         * Used for caching compiled nodes. This class will
         * clone a template when you put it in the cache. It will
         * also clone the template when you retrieve it.
         */
        export class TemplateCache extends Cache<async.IThenable<DocumentFragment>> {
            protected static _inject: any = {
                _Promise: __Promise,
                _Exception: __ExceptionStatic
            };

            /**
             * Reference to the IPromise injectable.
             */
            protected _Promise: async.IPromise;

            /**
             * Reference to the IExceptionStatic injectable.
             */
            protected _Exception: IExceptionStatic;

            /**
             * The constructor for a TemplateCache. Creates a new Cache  
             * with the ID "__templateCache".
             */
            constructor() {
                super('__templateCache');
            }
        
            /**
             * Stores a Node in the cache as a DocumentFragment.
             * @param {string} key The key to use for storage/retrieval of the object.
             * @param {Node} value The Node.
             * DocumentFragment containing the input Node.
             */
            put(key: string, value: Node): async.IThenable<DocumentFragment>;
            /**
             * Stores a IPromise in the cache.
             * @param {string} key The key to use for storage/retrieval of the object.
             * @param {plat.async.IThenable<Node>} value Promise that 
             * should resolve with a Node.
             * the input Promise resolves.
             */
            put(key: string, value: async.IThenable<Node>): async.IThenable<DocumentFragment>;
            put(key: string, value: any): async.IThenable<DocumentFragment> {
                var Promise = this._Promise;
                super.put(key, Promise.resolve<DocumentFragment>(value));

                if (isDocumentFragment(value)) {
                    value = value.cloneNode(true);
                } else if (isNode(value)) {
                    var fragment = document.createDocumentFragment();
                    fragment.appendChild(value.cloneNode(true));
                    value = fragment;
                }

                return Promise.resolve<DocumentFragment>(value);
            }
        
            /**
             * Method for retrieving a Node from this cache. The DocumentFragment that resolves from the returned 
             * Promise will be cloned to avoid manipulating the cached template.
             * @param {string} key The key to search for in this cache.
             * Returns undefined for a cache miss.
             */
            read(key: string): async.IThenable<DocumentFragment> {
                var promise: async.IThenable<DocumentFragment> = super.read(key);

                if (isNull(promise)) {
                    return <any>this._Promise.reject(null);
                }

                return promise.then((node) => {
                    return this.put(key, node);
                }, (error: Error) => {
                    var _Exception: IExceptionStatic = this._Exception;
                    _Exception.warn('Error retrieving template from promise.', _Exception.TEMPLATE);
                    return <DocumentFragment>null;
                });
            }
        }

        register.injectable(__TemplateCache, TemplateCache);

        /**
         * A base class for storing data with a designated storage type.
         */
        export class BaseStorage {
            [key: string]: any;

            /**
             * Reference to HTML5 localStorage.
             */
            protected _storage: Storage;

            /**
             * The constructor for a BaseStorage.
             */
            constructor(storage: Storage) {
                this._storage = storage;

                forEach((value, key) => {
                    this[key] = value;
                }, storage);
            }

            /**
             * Returns the number of items in storage.
             */
            get length(): number {
                return this._storage.length;
            }
        
            /**
             * Clears storage, deleting all of its keys.
             */
            clear(): void {
                this._storage.clear();
            }
        
            /**
             * Gets an item out of storage with the assigned key.
             * @param {string} key The key of the item to retrieve from storage.
             */
            getItem<T>(key: string): T {
                return this._storage.getItem(key);
            }
        
            /**
             * Allows for iterating over storage keys with an index. When
             * called with an index, it will return the key at that index in 
             * storage.
             * @param {number} index The index used to retrieve the associated key.
             */
            key(index: number): string {
                return this._storage.key(index);
            }
        
            /**
             * Searches in storage for an item and removes it if it 
             * exists.
             * @param {string} key The key of the item to remove from storage.
             */
            removeItem(key: string): void {
                this._storage.removeItem(key);
            }
        
            /**
             * Adds data to storage with the designated key.
             * @param {string} key The key of the item to store in storage.
             * @param {any} data The data to store in storage with the key.
             */
            setItem(key: string, data: any): void {
                this._storage.setItem(key, data);
                this[key] = this.getItem(key);
            }
        }

        /**
         * A class used to wrap HTML5 localStorage into an injectable.
         */
        export class LocalStorage extends BaseStorage {
            constructor() {
                super((<Window>plat.acquire(__Window)).localStorage);
            }
        }

        register.injectable(__LocalStorage, LocalStorage);

        /**
         * A class for wrapping SessionStorage as an injectable.
         */
        export class SessionStorage extends BaseStorage {
            constructor() {
                super((<Window>plat.acquire(__Window)).sessionStorage);
            }
        }

        register.injectable(__SessionStorage, SessionStorage);
    }
    /* tslint:disable:no-unused-variable */
    /**
     * An object used to create ITokenDetails for every operator.
     */
    var OPERATORS: plat.IObject<plat.expressions.ITokenDetails> = {
        'u+': {
            precedence: 4, associativity: 'rtl',
            fn: (context: any, aliases: any,
                a: (context: any, aliases: any) => any): any => +a(context, aliases)
        },
        '+': {
            precedence: 6, associativity: 'ltr',
            fn: (context: any, aliases: any,
                a: (context: any, aliases: any) => any,
                b: (context: any, aliases: any) => any): any => a(context, aliases) + b(context, aliases)
        },
        'u-': {
            precedence: 4, associativity: 'rtl',
            fn: (context: any, aliases: any,
                a: (context: any, aliases: any) => any): any => -a(context, aliases)
        },
        '-': {
            precedence: 6, associativity: 'ltr',
            fn: (context: any, aliases: any,
                a: (context: any, aliases: any) => any,
                b: (context: any, aliases: any) => any): any => a(context, aliases) - b(context, aliases)
        },
        '*': {
            precedence: 5, associativity: 'ltr',
            fn: (context: any, aliases: any,
                a: (context: any, aliases: any) => any,
                b: (context: any, aliases: any) => any): any => a(context, aliases) * b(context, aliases)
        },
        '/': {
            precedence: 5, associativity: 'ltr',
            fn: (context: any, aliases: any,
                a: (context: any, aliases: any) => any,
                b: (context: any, aliases: any) => any): any => a(context, aliases) / b(context, aliases)
        },
        '%': {
            precedence: 5, associativity: 'ltr',
            fn: (context: any, aliases: any,
                a: (context: any, aliases: any) => any,
                b: (context: any, aliases: any) => any): any => a(context, aliases) % b(context, aliases)
        },
        '?': {
            precedence: 15, associativity: 'rtl',
            fn: (): void => undefined
        },
        ':': {
            precedence: 15, associativity: 'rtl',
            fn: (): void => undefined
        },
        '>': {
            precedence: 8, associativity: 'ltr',
            fn: (context: any, aliases: any,
                a: (context: any, aliases: any) => any,
                b: (context: any, aliases: any) => any): any => a(context, aliases) > b(context, aliases)
        },
        '<': {
            precedence: 8, associativity: 'ltr',
            fn: (context: any, aliases: any,
                a: (context: any, aliases: any) => any,
                b: (context: any, aliases: any) => any): any => a(context, aliases) < b(context, aliases)
        },
        '!': {
            precedence: 4, associativity: 'rtl',
            fn: (context: any, aliases: any,
                a: (context: any, aliases: any) => any): any => !a(context, aliases)
        },
        '~': {
            precedence: 4, associativity: 'rtl',
            fn: (context: any, aliases: any,
                a: (context: any, aliases: any) => any): any => ~a(context, aliases)
        },
        '&': {
            precedence: 10, associativity: 'ltr',
            fn: (context: any, aliases: any,
                a: (context: any, aliases: any) => any,
                b: (context: any, aliases: any) => any): any => a(context, aliases) & b(context, aliases)
        },
        '|': {
            precedence: 12, associativity: 'ltr',
            fn: (context: any, aliases: any,
                a: (context: any, aliases: any) => any,
                b: (context: any, aliases: any) => any): any => a(context, aliases) | b(context, aliases)
        },
        '>>': {
            precedence: 7, associativity: 'ltr',
            fn: (context: any, aliases: any,
                a: (context: any, aliases: any) => any,
                b: (context: any, aliases: any) => any): any => a(context, aliases) >> b(context, aliases)
        },
        '<<': {
            precedence: 7, associativity: 'ltr',
            fn: (context: any, aliases: any,
                a: (context: any, aliases: any) => any,
                b: (context: any, aliases: any) => any): any => a(context, aliases) << b(context, aliases)
        },
        '>>>': {
            precedence: 7, associativity: 'ltr',
            fn: (context: any, aliases: any,
                a: (context: any, aliases: any) => any,
                b: (context: any, aliases: any) => any): any => a(context, aliases) >>> b(context, aliases)
        },
        '&&': {
            precedence: 13, associativity: 'ltr',
            fn: (context: any, aliases: any,
                a: (context: any, aliases: any) => any,
                b: (context: any, aliases: any) => any): any => a(context, aliases) && b(context, aliases)
        },
        '||': {
            precedence: 14, associativity: 'ltr',
            fn: (context: any, aliases: any,
                a: (context: any, aliases: any) => any,
                b: (context: any, aliases: any) => any): any => a(context, aliases) || b(context, aliases)
        },
        '==': {
            precedence: 9, associativity: 'ltr',
            /* tslint:disable:triple-equals */
            fn: (context: any, aliases: any,
                a: (context: any, aliases: any) => any,
                b: (context: any, aliases: any) => any): any => a(context, aliases) == b(context, aliases)
            /* tslint:enable:triple-equals */
        },
        '===': {
            precedence: 9, associativity: 'ltr',
            fn: (context: any, aliases: any,
                a: (context: any, aliases: any) => any,
                b: (context: any, aliases: any) => any): any => a(context, aliases) === b(context, aliases)
        },
        '!=': {
            precedence: 9, associativity: 'ltr',
            /* tslint:disable:triple-equals */
            fn: (context: any, aliases: any,
                a: (context: any, aliases: any) => any,
                b: (context: any, aliases: any) => any): any => a(context, aliases) != b(context, aliases)
            /* tslint:enable:triple-equals */
        },
        '!==': {
            precedence: 9, associativity: 'ltr',
            fn: (context: any, aliases: any,
                a: (context: any, aliases: any) => any,
                b: (context: any, aliases: any) => any): any => a(context, aliases) !== b(context, aliases)
        },
        '>=': {
            precedence: 8, associativity: 'ltr',
            fn: (context: any, aliases: any,
                a: (context: any, aliases: any) => any,
                b: (context: any, aliases: any) => any): any => a(context, aliases) >= b(context, aliases)
        },
        '<=': {
            precedence: 8, associativity: 'ltr',
            fn: (context: any, aliases: any,
                a: (context: any, aliases: any) => any,
                b: (context: any, aliases: any) => any): any => a(context, aliases) <= b(context, aliases)
        },
        '=': {
            precedence: 17, associativity: 'rtl',
            fn: (context: any, aliases: any,
                a: (context: any, aliases: any) => any,
                b: (context: any, aliases: any) => any): void => {
                var _Exception: plat.IExceptionStatic = plat.acquire(__ExceptionStatic);
                _Exception.fatal('Assignment operators are not supported', _Exception.PARSE);
            }
        },
        '++': {
            precedence: 3, associativity: '',
            fn: (context: any, aliases: any,
                a: (context: any, aliases: any) => any): void => {
                var _Exception: plat.IExceptionStatic = plat.acquire(__ExceptionStatic);
                _Exception.fatal('Assignment operators are not supported', _Exception.PARSE);
            }
        },
        '--': {
            precedence: 3, associativity: '',
            fn: (context: any, aliases: any,
                a: (context: any, aliases: any) => any): void => {
                var _Exception: plat.IExceptionStatic = plat.acquire(__ExceptionStatic);
                _Exception.fatal('Assignment operators are not supported', _Exception.PARSE);
            }
        },
        '+=': {
            precedence: 17, associativity: 'rtl',
            fn: (context: any, aliases: any,
                a: (context: any, aliases: any) => any,
                b: (context: any, aliases: any) => any): void => {
                var _Exception: plat.IExceptionStatic = plat.acquire(__ExceptionStatic);
                _Exception.fatal('Assignment operators are not supported', _Exception.PARSE);
            }
        },
        '-=': {
            precedence: 17, associativity: 'rtl',
            fn: (context: any, aliases: any,
                a: (context: any, aliases: any) => any,
                b: (context: any, aliases: any) => any): void => {
                var _Exception: plat.IExceptionStatic = plat.acquire(__ExceptionStatic);
                _Exception.fatal('Assignment operators are not supported', _Exception.PARSE);
            }
        },
        '*=': {
            precedence: 17, associativity: 'rtl',
            fn: (context: any, aliases: any,
                a: (context: any, aliases: any) => any,
                b: (context: any, aliases: any) => any): void => {
                var _Exception: plat.IExceptionStatic = plat.acquire(__ExceptionStatic);
                _Exception.fatal('Assignment operators are not supported', _Exception.PARSE);
            }
        },
        '/=': {
            precedence: 17, associativity: 'rtl',
            fn: (context: any, aliases: any,
                a: (context: any, aliases: any) => any,
                b: (context: any, aliases: any) => any): void => {
                var _Exception: plat.IExceptionStatic = plat.acquire(__ExceptionStatic);
                _Exception.fatal('Assignment operators are not supported', _Exception.PARSE);
            }
        },
        '%=': {
            precedence: 17, associativity: 'rtl',
            fn: (context: any, aliases: any,
                a: (context: any, aliases: any) => any,
                b: (context: any, aliases: any) => any): void => {
                var _Exception: plat.IExceptionStatic = plat.acquire(__ExceptionStatic);
                _Exception.fatal('Assignment operators are not supported', _Exception.PARSE);
            }
        }
    };
    
    /**
     * An object used to create ITokenDetails for every accessor.
     */
    var ACCESSORS: plat.IObject<plat.expressions.ITokenDetails> = {
        '()': { precedence: 2, associativity: null, fn: null },
        '[]': { precedence: 2, associativity: null, fn: null },
        '.': { precedence: 2, associativity: null, fn: null },
        '{}': { precedence: 1, associativity: null, fn: null }
    };
    
    /**
     * An object used to create ITokenDetails for every delimiter.
     */
    var DELIMITERS: plat.IObject<plat.expressions.ITokenDetails> = {
        '{': { precedence: 1, associativity: null, fn: null },
        '}': { precedence: 1, associativity: null, fn: null },
        '[': { precedence: 2, associativity: null, fn: null },
        ']': { precedence: 2, associativity: null, fn: null },
        '(': { precedence: 2, associativity: null, fn: null },
        ')': { precedence: 2, associativity: null, fn: null },
        '.': { precedence: 2, associativity: null, fn: null },
        ',': { precedence: 18, associativity: null, fn: null },
        '\'': { precedence: 0, associativity: null, fn: null },
        '"': { precedence: 0, associativity: null, fn: null }
    };
    
    /**
     * An object used to get literal values from string values of false, true, and undefined
     */
    var KEYWORDS: plat.IObject<any> = {
        false: false,
        true: true,
        null: null,
        undefined: 'undefined'
    };
    
    /**
     * Checks if a string is in the DELIMITERS array.
     * @param {string} key The string to index into the DELIMITERS array.
     */
    function isDelimiter(key: string): boolean {
        return !isNull(DELIMITERS[key]);
    }
    
    /**
     * Checks if a string is in the ACCESSORS array.
     * @param {string} key The string to index into the ACCESSORS array.
     */
    function isAccessor(key: string): boolean {
        return !isNull(ACCESSORS[key]);
    }
    
    /**
     * Checks if a string is in the OPERATORS array.
     * @param {string} key The string to index into the OPERATORS array.
     */
    function isOperator(key: string): boolean {
        return !isNull(OPERATORS[key]);
    }
    
    /**
     * Checks if a string is in the KEYWORDS array.
     * @param {string} key The string to index into the KEYWORDS array.
     */
    function isKeyword(key: string): boolean {
        return !isUndefined(KEYWORDS[key]);
    }
    /* tslint:enable:no-unused-variable */
    
    /**
     * Holds all classes and interfaces related to observable components in platypus.
     */
    export module observable {
        /**
         * The array methods to be overwritten if it is to be observed.
         */
        var arrayMethods = ['push', 'pop', 'reverse', 'shift', 'sort', 'splice', 'unshift'];

        /**
         * A class for managing both context inheritance and observable properties on controls and 
         * facilitating in data-binding.
         */
        export class ContextManager {
            protected static _inject: any = {
                _compat: __Compat
            };

            /**
             * Reference to the IExceptionStatic injectable.
             */
            protected static _Exception: IExceptionStatic;

            /**
             * A set of functions to be fired prior to when a particular observed array is mutated.
             */
            static preArrayListeners: IObject<IObject<Array<(ev: IPreArrayChangeInfo) => void>>> = {};
            /**
             * A set of functions to be fired when a particular observed array is mutated.
             */
            static postArrayListeners: IObject<IObject<Array<(ev: IPostArrayChangeInfo<any>) => void>>> = {};

            /**
             * Gets the ContextManager associated to the given control. If no 
             * ContextManager exists, one is created for that control.
             * @param {plat.Control} control The control on which to locate the ContextManager.
             * associated with the input control.
             */
            static getManager(control: Control): ContextManager {
                var contextManager: ContextManager,
                    managers = ContextManager.__managers,
                    uid = control.uid,
                    manager = managers[uid];

                if (!isNull(manager)) {
                    contextManager = manager;
                    return contextManager;
                }

                contextManager = managers[uid] = acquire(ContextManager);
                contextManager.context = control;

                return contextManager;
            }

            /**
             * Removes all the listeners for a given control's unique ID.
             * @param {plat.Control} control The control whose manager is being disposed.
             * @param {boolean} persist? Whether or not the control's context needs to 
             * be persisted post-disposal or can be set to null.
             */
            static dispose(control: Control, persist?: boolean): void;
            static dispose(control: ui.TemplateControl, persist?: boolean): void {
                if (isNull(control)) {
                    return;
                }

                var uid = control.uid,
                    controls = ContextManager.__controls,
                    identifiers = controls[uid] || {},
                    managers = ContextManager.__managers,
                    manager = managers[uid];

                if (!isNull(manager)) {
                    manager.dispose();
                    deleteProperty(managers, uid);
                }

                var keys = Object.keys(identifiers),
                    listeners: Array<IRemoveListener>;

                while (keys.length > 0) {
                    listeners = identifiers[keys.shift()];
                    while (listeners.length > 0) {
                        listeners.shift()();
                    }
                }

                deleteProperty(controls, uid);

                if (!isNull(control.context)) {
                    ContextManager.defineProperty(control, __CONTEXT,
                        persist === true ? _clone(control.context, true) : null, true, true, true);
                }
            }

            /**
             * Removes all listeners for an Array associated with a given uid.
             * @param {string} absoluteIdentifier The identifier used to locate the array.
             * @param {string} uid The uid used to search for listeners.
             */
            static removeArrayListeners(absoluteIdentifier: string, uid: string): void {
                var listeners = ContextManager.postArrayListeners[absoluteIdentifier];

                if (!isNull(listeners)) {
                    deleteProperty(listeners, uid);
                }
            }

            /**
             * Safely retrieves the local context given a root context and an Array of
             * property strings.
             * @param {any} rootContext The root object in which to find a local context.
             * @param {Array<string>} split The string array containing properties used to index into 
             * the rootContext.
             */
            static getContext(rootContext: any, split: Array<string>): any {
                if (isNull(rootContext)) {
                    return rootContext;
                }

                split = split.slice(0);
                while (split.length > 0) {
                    rootContext = rootContext[split.shift()];
                    if (isNull(rootContext)) {
                        return rootContext;
                    }
                }

                return rootContext;
            }

            /**
             * Defines an object property with the associated value. Useful for unobserving objects.
             * @param {any} obj The object on which to define the property.
             * @param {string} key The property key.
             * @param {any} value The value used to define the property.
             * @param {boolean} enumerable? Whether or not the property should be enumerable (able to be iterated 
             * over in a loop)
             * @param {boolean} configurable? Whether or not the property is able to be reconfigured.
             * @param {boolean} writable? Whether or not assignment operators work on the property.
             */
            static defineProperty(obj: any, key: string, value: any, enumerable?: boolean, configurable?: boolean, writable?: boolean): void {
                Object.defineProperty(obj, key, {
                    value: value,
                    enumerable: enumerable === true,
                    configurable: configurable === true,
                    writable: writable === true
                });
            }

            /**
             * Defines an object property with the associated value. Useful for unobserving objects.
             * @param {any} obj The object on which to define the property.
             * @param {string} key The property key.
             * @param {any} value The value used to define the property.
             * @param {boolean} enumerable? Whether or not the property should be enumerable (able to be iterated 
             * over in a loop)
             * @param {boolean} configurable? Whether or not the property is able to be reconfigured.
             */
            static defineGetter(obj: any, key: string, value: any, enumerable?: boolean, configurable?: boolean): void {
                Object.defineProperty(obj, key, {
                    get: () => value,
                    enumerable: enumerable === true,
                    configurable: configurable === true
                });
            }

            /**
             * Pushes the function for removing an observed property upon adding the property.
             * @param {string} identifer The identifier for which the remove listener is being pushed.
             * @param {string} uid The unique ID of the control observing the identifier.
             * @param {plat.IRemoveListener} listener The function for removing the observed property.
             */
            static pushRemoveListener(identifier: string, uid: string, listener: IRemoveListener): void {
                var controls = ContextManager.__controls,
                    control = controls[uid],
                    listeners: Array<IRemoveListener>;

                if (isNull(control)) {
                    control = controls[uid] = {};
                }

                listeners = control[identifier];

                if (isNull(listeners)) {
                    listeners = control[identifier] = [];
                }

                listeners.push(listener);
            }

            /**
             * Splices a given function for removing an observed property.
             * @param {string} identifer The identifier for which the remove listener is being spliced.
             * @param {string} uid The unique ID of the control observing the identifier.
             * @param {plat.IRemoveListener} listener The function for removing the observed property.
             */
            static spliceRemoveListener(identifier: string, uid: string, listener: IRemoveListener): void {
                var controls = ContextManager.__controls,
                    control = controls[uid],
                    listeners: Array<IRemoveListener>;

                if (isNull(control)) {
                    return;
                }

                listeners = control[identifier];

                if (isNull(listeners)) {
                    return;
                }

                var index = listeners.indexOf(listener);
                if (index === -1) {
                    return;
                }

                listeners.splice(index, 1);
                if (listeners.length === 0) {
                    deleteProperty(control, identifier);
                }
            }

            /**
             * Removes a specified identifier from being observed for a given set of control IDs.
             * @param {Array<string>} uids The set of unique Ids for which to remove the specified identifier.
             * @param {string} identifier The identifier to stop observing.
             */
            static removeIdentifier(uids: Array<string>, identifier: string): void {
                var length = uids.length,
                    controls = ContextManager.__controls,
                    identifiers: IObject<Array<IRemoveListener>>;

                for (var i = 0; i < length; ++i) {
                    identifiers = controls[uids[i]];

                    if (isNull(identifiers)) {
                        continue;
                    }

                    deleteProperty(identifiers, identifier);
                }
            }

            /**
             * Ensures that an identifier path will exist on a given control. Will create 
             * objects/arrays if necessary.
             * @param {plat.ui.TemplateControl} control The TemplateControl 
             * on which to create the context.
             * @param {string} identifier The period-delimited identifier string used to create 
             * the context path.
             */
            static createContext(control: ui.TemplateControl, identifier: string): any {
                var context = control.context;

                if (!isObject(context)) {
                    if (isNull(context)) {
                        context = control.context = {};
                    } else {
                        var _Exception: IExceptionStatic = ContextManager._Exception;
                        _Exception.warn('A child control is trying to create a child context that has ' +
                            'a parent control with a primitive type context', _Exception.BIND);
                        return;
                    }
                }

                var split = identifier.split('.'),
                    property: string,
                    temp: any;

                while (split.length > 0) {
                    property = split.shift();

                    temp = context[property];

                    if (isNull(temp)) {
                        if (isNumber(Number(split[0]))) {
                            temp = context[property] = [];
                        } else {
                            temp = context[property] = {};
                        }
                    }

                    context = temp;
                }

                return context;
            }

            /**
             * An object for quickly accessing a previously created ContextManager.
             */
            private static __managers: IObject<ContextManager> = {};
            /**
             * An object for storing functions to remove listeners for observed identifiers.
             */
            private static __controls: IObject<IObject<Array<IRemoveListener>>> = {};

            /**
             * Reference to the Compat injectable.
             */
            protected _compat: Compat;

            /**
             * The root context associated with and to be managed by this 
             * ContextManager.
             */
            context: any;

            /**
             * An object for quickly accessing callbacks associated with a given identifier.
             */
            private __identifiers: IObject<Array<IListener>> = {};
            /**
             * An object for quickly accessing child context associations (helps with 
             * notifying child properties).
             */
            private __identifierHash: IObject<Array<string>> = {};
            /**
             * An object for storing listeners for Array length changes.
             */
            private __lengthListeners: IObject<IListener> = {};
            /**
             * An object for quickly accessing previously accessed or observed objects and properties.
             */
            private __contextObjects: IObject<any> = {};
            /**
             * Whether or not the property currently being modified is due to an observed array function.
             */
            private __isArrayFunction = false;
            /**
             * If attempting to observe a property that is already being observed, this will be set to the 
             * already observed identifier.
             */
            private __observedIdentifier: string;

            /**
             * Safely retrieves the local context for this manager given an Array of
             * property strings and observes it if not found.
             * @param {Array<string>} split The string array containing properties used to index into
             * the context.
             */
            getContext(split: Array<string>): any {
                var join = split.join('.'),
                    context = this.__contextObjects[join];

                if (isNull(context)) {
                    context = this.__contextObjects[join] = this._observeImmediateContext(split, join);
                }

                return context;
            }

            /**
             * Given a period-delimited identifier, observes an object and calls the given listener when the 
             * object changes.
             * @param {string} absoluteIdentifier The period-delimited identifier noting the property to be observed.
             * @param {plat.observable.IListener} observableListener An object implmenting IObservableListener. The listener will be 
             * notified of object changes.
             */
            observe(absoluteIdentifier: string, observableListener: IListener): IRemoveListener {
                if (isEmpty(absoluteIdentifier)) {
                    return noop;
                }

                var split = absoluteIdentifier.split('.'),
                    key = split.pop(),
                    hasIdentifier = this._hasIdentifier(absoluteIdentifier),
                    hasObservableListener = !isNull(observableListener),
                    join: string,
                    context: any;

                if (split.length > 0) {
                    join = split.join('.');
                    context = this.__contextObjects[join];
                    if (isNull(context)) {
                        context = this.__contextObjects[join] = this._observeImmediateContext(split, join);
                    }
                } else {
                    join = key;
                    context = this.context;
                }

                if (!isObject(context)) {
                    if (hasObservableListener) {
                        if (key === 'length') {
                            this.__lengthListeners[absoluteIdentifier] = observableListener;
                            ContextManager.pushRemoveListener(absoluteIdentifier, observableListener.uid, () => {
                                deleteProperty(this.__lengthListeners, absoluteIdentifier);
                            });
                        }
                        return this._addObservableListener(absoluteIdentifier, observableListener);
                    }

                    return noop;
                }

                // set observedIdentifier to null
                this.__observedIdentifier = null;

                this.__contextObjects[absoluteIdentifier] = context[key];

                // if observedIdentifier is not null, the primitive is already being watched
                var observedIdentifier = this.__observedIdentifier,
                    isObserved = !isNull(observedIdentifier),
                    removeCallback = noop;
                if (isObserved) {
                    hasIdentifier = true;
                }

                if (hasObservableListener) {
                    var removeObservedCallback = noop,
                        removeAbsoluteCallback = this._addObservableListener(absoluteIdentifier, observableListener);

                    if (isObserved && absoluteIdentifier !== observedIdentifier) {
                        removeObservedCallback = this._addObservableListener(observedIdentifier, observableListener);
                    }

                    removeCallback = () => {
                        removeAbsoluteCallback();
                        removeObservedCallback();
                    };
                }

                // check if value is defined and context manager hasn't seen this identifier
                if (!hasIdentifier) {
                    if (key === 'length' && isArray(context)) {
                        var property = split.pop(),
                            parentContext = this.getContext(split);

                        this.__observedIdentifier = null;
                        access(parentContext, property);

                        if (isString(this.__observedIdentifier)) {
                            join = this.__observedIdentifier;
                        }

                        var removeObservableListener = removeCallback,
                            removeListener = noop,
                            removeArrayObserve = noop;

                        if (hasObservableListener) {
                            var uid = observableListener.uid;
                            removeListener = this.observeArray(uid, null, noop, join, context, null);
                            removeArrayObserve = this.observe(join, {
                                uid: uid,
                                listener: (newValue: Array<any>, oldValue: Array<any>) => {
                                    removeListener();
                                    removeListener = this.observeArray(uid, null, noop, join, newValue, oldValue);
                                }
                            });
                        }

                        removeCallback = () => {
                            removeObservableListener();
                            removeArrayObserve();
                            removeListener();
                        };
                    } else {
                        this._define(absoluteIdentifier, context, key);
                    }
                }

                return removeCallback;
            }

            /**
             * Observes an array and calls the listener when certain functions are called on 
             * that array. The watched functions are push, pop, shift, splice, unshift, sort, 
             * and reverse.
             * @param {string} uid The unique ID of the object observing the array.
             * @param {(ev: plat.observable.IPreArrayChangeInfo) => void} preListener The callback for prior to when an observed Array 
             * function has been called.
             * @param {(ev: plat.observable.IPostArrayChangeInfo<any>) => void} postListener The callback for after when an observed Array 
             * function has been called.
             * @param {string} absoluteIdentifier The identifier from the root context used to find the array.
             * @param {Array<any>} array The array to be observed.
             * @param {Array<any>} oldArray The old array to stop observing.
             */
            observeArray(uid: string, preListener: (ev: IPreArrayChangeInfo) => void,
                postListener: (ev: IPostArrayChangeInfo<any>) => void, absoluteIdentifier: string, array: Array<any>,
                oldArray: Array<any>): IRemoveListener {
                var length = arrayMethods.length,
                    method: string,
                    i: number,
                    _compat = this._compat,
                    proto = _compat.proto,
                    setProto = _compat.setProto;

                if (isArray(oldArray)) {
                    this._restoreArray(oldArray);
                }

                if (isNull(array)) {
                    return noop;
                }

                var split = absoluteIdentifier.split('.'),
                    property = split.pop(),
                    context = this.getContext(split);

                this.__observedIdentifier = null;
                access(context, property);

                if (isString(this.__observedIdentifier)) {
                    absoluteIdentifier = this.__observedIdentifier;
                }

                var removeListeners: Array<IRemoveListener> = [];
                if (isFunction(preListener)) {
                    removeListeners.push(this._pushArrayListener(uid, absoluteIdentifier, preListener, ContextManager.preArrayListeners));
                }
                if (isFunction(postListener)) {
                    removeListeners.push(this._pushArrayListener(uid, absoluteIdentifier, postListener, ContextManager.postArrayListeners));
                }

                this._overwriteArray(absoluteIdentifier, array);

                return () => {
                    while (removeListeners.length > 0) {
                        removeListeners.pop()();
                    }
                };
            }

            /**
             * Disposes the memory for an ContextManager.
             */
            dispose(): void {
                this.context = null;
                this.__identifiers = {};
                this.__identifierHash = {};
                this.__contextObjects = {};
            }

            /**
             * Pushes Array mutation listeners and removers.
             * @param {string} uid The unique identifier to store the callback.
             * @param {string} absoluteIdentifier The identifier of the Array being observed.
             * @param {(ev: plat.observable.IPreArrayChangeInfo) => void} listener The Array mutation listener.
             * @param {plat.IObject<plat.IObject<Array<(ev: plat.observable.IPreArrayChangeInfo) => void>>>} arrayListeners 
             * The Array to hold the new listener.
             */
            protected _pushArrayListener(uid: string, absoluteIdentifier: string, listener: (ev: IPreArrayChangeInfo) => void,
                arrayListeners: IObject<IObject<Array<(ev: IPreArrayChangeInfo) => void>>>): IRemoveListener {
                var arrayCallbacks = arrayListeners[absoluteIdentifier];

                if (isNull(arrayCallbacks)) {
                    arrayCallbacks = arrayListeners[absoluteIdentifier] = {};
                }

                var callbacks = arrayCallbacks[uid];
                if (isNull(callbacks)) {
                    callbacks = arrayCallbacks[uid] = [];
                }

                var listenerRemoved = false,
                    removeListener = () => {
                        if (listenerRemoved) {
                            return;
                        }

                        listenerRemoved = true;
                        ContextManager.spliceRemoveListener(absoluteIdentifier, uid, removeListener);

                        var index = callbacks.indexOf(listener);
                        if (index === -1) {
                            return;
                        }

                        callbacks.splice(index, 1);
                        if (callbacks.length === 0) {
                            deleteProperty(arrayCallbacks, uid);
                            if (isEmpty(arrayCallbacks)) {
                                deleteProperty(arrayListeners, absoluteIdentifier);
                            }
                        }
                    };

                callbacks.push(listener);
                ContextManager.pushRemoveListener(absoluteIdentifier, uid, removeListener);

                return removeListener;
            }

            /**
             * Restores an array to use Array.prototype instead of listener functions. 
             * @param {Array<any>} array The array to restore.
             */
            protected _restoreArray(array: Array<any>) {
                var _compat = this._compat;

                if (_compat.setProto) {
                    (<any>Object).setPrototypeOf(array, Object.create(Array.prototype));
                } else if (_compat.proto) {
                    (<any>array).__proto__ = Object.create(Array.prototype);
                } else {
                    var length = arrayMethods.length,
                        method: string;

                    for (var i = 0; i < length; ++i) {
                        method = arrayMethods[i];
                        (<any>array)[method] = (<any>Array.prototype)[method];
                    }
                }
            }

            /**
             * Overwrites an Array's prototype to observe mutation functions.
             * @param {string} absoluteIdentifier The identifier for the Array off context.
             * @param {Array<any>} array The array to overwrite.
             */
            protected _overwriteArray(absoluteIdentifier: string, array: Array<any>) {
                var _compat = this._compat,
                    length = arrayMethods.length,
                    method: string,
                    i: number;

                if (_compat.proto) {
                    var obj = Object.create(Array.prototype);

                    for (i = 0; i < length; ++i) {
                        method = arrayMethods[i];
                        obj[method] = this._overwriteArrayFunction(absoluteIdentifier, method);
                    }

                    if (_compat.setProto) {
                        (<any>Object).setPrototypeOf(array, obj);
                    } else {
                        (<any>array).__proto__ = obj;
                    }

                    return;
                }

                for (i = 0; i < length; ++i) {
                    method = arrayMethods[i];
                    ContextManager.defineProperty(array, method,
                        this._overwriteArrayFunction(absoluteIdentifier, method), false, true, true);
                }
            }

            /**
             * Gets the immediate context of identifier by splitting on ".".
             * @param {Array<string>} split The string array containing properties used to index into
             * the context.
             */
            protected _getImmediateContext(split: Array<string>): any {
                var context = this.context;

                while (split.length > 0) {
                    context = context[split.shift()];
                    if (isNull(context)) {
                        break;
                    }
                }

                return context;
            }

            /**
             * Gets the immediate context of identifier by splitting on "." 
             * and observes the objects along the way.
             * @param {Array<string>} split The identifier's split string array containing properties 
             * used to index into the context.
             * @param {string} identifier The identifier being observed.
             */
            protected _observeImmediateContext(split: Array<string>, identifier: string): any {
                if (isNull(this.__identifiers[identifier])) {
                    this.observe(identifier, null);
                }

                return this._getImmediateContext(split);
            }

            /**
             * Obtains the old value and new value of a given context 
             * property on a property changed event.
             * @param {Array<string>} split The split identifier of the property that changed.
             * @param {any} newRootContext The new context.
             * @param {any} oldRootContext The old context.
             * property upon a potential context change.
             */
            protected _getValues(split: Array<string>, newRootContext: any, oldRootContext: any): { newValue: any; oldValue: any; } {
                var property: string,
                    doNew = true,
                    doOld = true;

                while (split.length > 1) {
                    property = split.shift();
                    if (doNew) {
                        newRootContext = newRootContext[property];
                        if (isNull(newRootContext)) {
                            doNew = false;
                        }
                    }
                    if (doOld) {
                        oldRootContext = oldRootContext[property];
                        if (isNull(oldRootContext)) {
                            doOld = false;
                        }
                    }

                    if (!(doNew || doOld)) {
                        return null;
                    }
                }

                property = split[0];

                var newValue: any,
                    oldValue: any;

                if (!isNull(newRootContext)) {
                    newValue = newRootContext[property];
                }

                if (!isNull(oldRootContext)) {
                    oldValue = oldRootContext[property];
                }

                return {
                    newValue: newValue,
                    oldValue: oldValue
                };
            }

            /**
             * Notifies all child properties being observed that a parent property 
             * has changed.
             * @param {string} identifier The identifier for the property that changed.
             * @param {any} newValue The new value of the property.
             * @param {any} oldValue The old value of the property.
             */
            protected _notifyChildProperties(identifier: string, newValue: any, oldValue: any): void {
                var mappings = this.__identifierHash[identifier];

                if (isNull(mappings)) {
                    return;
                }

                var length = mappings.length,
                    binding: string,
                    property: string,
                    parentProperty: string,
                    split: Array<string>,
                    values: IObject<any> = {},
                    value: any,
                    key: string,
                    start = identifier.length + 1,
                    newParent: any,
                    oldParent: any,
                    newChild: any,
                    oldChild: any;

                if (length === 0) {
                    deleteProperty(this.__identifierHash, identifier);
                    return;
                }

                for (var i = 0; i < length; ++i) {
                    binding = mappings[i];
                    property = binding.slice(start);
                    split = property.split('.');
                    key = split.pop();
                    parentProperty = split.join('.');

                    if (isEmpty(parentProperty)) {
                        newParent = newValue;
                        oldParent = oldValue;
                        newChild = isNull(newParent) ? undefined : newParent[key];
                        oldChild = isNull(oldParent) ? undefined : oldParent[key];

                        if (key === 'length' && !isArray(oldParent) && isArray(newParent)) {
                            var lengthListener = this.__lengthListeners[binding];
                            if (!isNull(lengthListener)) {
                                var uid = lengthListener.uid,
                                    arraySplit = identifier.split('.'),
                                    arrayKey = arraySplit.pop(),
                                    arrayParent = this.getContext(arraySplit),
                                    join: string;

                                this.__observedIdentifier = null;
                                access(arrayParent, arrayKey);

                                join = isString(this.__observedIdentifier) ? this.__observedIdentifier : arraySplit.join('.');
                                var removeListener = this.observeArray(uid, null, noop, join, newParent, null);
                                this.observe(join, {
                                    uid: uid,
                                    listener: (nValue: Array<any>, oValue: Array<any>) => {
                                        removeListener();
                                        removeListener = this.observeArray(uid, null, noop, join, nValue, oValue);
                                    }
                                });

                                deleteProperty(this.__lengthListeners, binding);
                            }
                        }
                    } else {
                        value = values[parentProperty];

                        if (isNull(value)) {
                            value = values[parentProperty] = this._getValues(split, newValue, oldValue);

                            if (isNull(value)) {
                                this._execute(binding, null, null);
                                continue;
                            }
                        }

                        newParent = value.newValue;
                        oldParent = value.oldValue;
                        newChild = isNull(newParent) ? undefined : newParent[key];
                        oldChild = isNull(oldParent) ? undefined : oldParent[key];
                    }

                    values[property] = {
                        newValue: newChild,
                        oldValue: oldChild
                    };

                    if (isObject(newParent) && (!isArray(newParent) || newParent.length > key)) {
                        this._define(binding, newParent, key);
                    }

                    this._execute(binding, newChild, oldChild);
                }

                values = null;
            }

            /**
             * Adds a listener to be fired for a particular identifier.
             * @param {string} absoluteIdentifier The identifier being observed.
             * @param {plat.observable.IListener} observableListener The function and associated unique ID to be fired 
             * for this identifier.
             */
            protected _addObservableListener(absoluteIdentifier: string, observableListener: IListener): IRemoveListener {
                var split = absoluteIdentifier.split('.'),
                    property = split.pop(),
                    isLength = property === 'length',
                    context: any;

                if (isLength) {
                    property = split.pop();
                    context = this.getContext(split);
                }

                if (isObject(context)) {
                    this.__observedIdentifier = null;
                    access(context, property);

                    if (isString(this.__observedIdentifier)) {
                        absoluteIdentifier = this.__observedIdentifier + (isLength ? '.length' : '');
                    }
                }

                this.__add(absoluteIdentifier, observableListener);

                var uid = observableListener.uid,
                    remove = () => {
                        ContextManager.spliceRemoveListener(absoluteIdentifier, uid, remove);
                        this._removeCallback(absoluteIdentifier, observableListener);
                    };

                ContextManager.pushRemoveListener(absoluteIdentifier, uid, remove);
                return remove;
            }

            /**
             * Observes a property on a given context specified by an identifier.
             * @param {string} identifier The full identifier path for the property being observed.
             * @param {any} immediateContext The object whose property will be observed.
             * @param {string} key The property key for the value on the immediateContext that's 
             * being observed.
             */
            protected _define(identifier: string, immediateContext: any, key: string): void {
                if (isObject(immediateContext[key])) {
                    this.__defineObject(identifier, immediateContext, key);
                } else {
                    this.__definePrimitive(identifier, immediateContext, key);
                }
            }

            /**
             * Intercepts an array function for observation.
             * @param {string} absoluteIdentifier The full identifier path for the observed array.
             * @param {string} method The array method being called.
             * array function.
             */
            protected _overwriteArrayFunction(absoluteIdentifier: string, method: string): (...args: any[]) => any {
                var preCallbackObjects = ContextManager.preArrayListeners[absoluteIdentifier] || {},
                    postCallbackObjects = ContextManager.postArrayListeners[absoluteIdentifier] || {},
                    _this = this;

                // we can't use a fat-arrow function here because we need the array context.
                return function observedArrayFn(...args: any[]) {
                    var oldArray = this.slice(0),
                        returnValue: any,
                        isShift = method.indexOf('shift') !== -1,
                        keys = Object.keys(preCallbackObjects),
                        length = keys.length,
                        callbacks: Array<(ev: IPreArrayChangeInfo) => void>,
                        jLength: number,
                        i: number,
                        j: number;

                    for (i = 0; i < length; ++i) {
                        callbacks = preCallbackObjects[keys[i]];
                        jLength = callbacks.length;

                        for (j = 0; j < jLength; ++j) {
                            callbacks[j]({
                                method: method,
                                arguments: args
                            });
                        }
                    }

                    if (isShift) {
                        _this.__isArrayFunction = true;
                        returnValue = (<any>Array.prototype)[method].apply(this, args);
                        _this.__isArrayFunction = false;
                    } else {
                        returnValue = (<any>Array.prototype)[method].apply(this, args);
                    }

                    keys = Object.keys(postCallbackObjects);
                    length = keys.length;

                    for (i = 0; i < length; ++i) {
                        callbacks = postCallbackObjects[keys[i]];
                        jLength = callbacks.length;

                        for (j = 0; j < jLength; ++j) {
                            callbacks[j]({
                                method: method,
                                returnValue: returnValue,
                                oldArray: oldArray,
                                newArray: this,
                                arguments: args
                            });
                        }
                    }

                    if (isShift) {
                        _this._notifyChildProperties(absoluteIdentifier, this, oldArray);
                    } else if (oldArray.length !== this.length) {
                        _this._execute(absoluteIdentifier + '.length', this.length, oldArray.length);
                    }

                    return returnValue;
                };
            }

            /**
             * Removes a single listener callback
             * @param {string} identifier The identifier attached to the callbacks.
             * @param {plat.observable.IListener} listener The observable listener to remove.
             */
            protected _removeCallback(identifier: string, listener: IListener): void {
                var callbacks = this.__identifiers[identifier];
                if (isNull(callbacks)) {
                    return;
                }

                // splice the observed listener
                var index = callbacks.indexOf(listener);
                if (index === -1) {
                    return;
                }

                callbacks.splice(index, 1);

                if (isEmpty(this.__identifiers[identifier])) {
                    deleteProperty(this.__identifierHash, identifier);
                    deleteProperty(this.__contextObjects, identifier);
                }
            }

            /**
             * Checks if the specified identifier is already being 
             * observed in this context.
             * @param {string} identifier The identifier being observed.
             */
            protected _hasIdentifier(identifier: string): boolean {
                return !isEmpty(this.__identifiers[identifier]);
            }

            /**
             * Executes the listeners for the specified identifier on 
             * this context.
             * @param {string} identifier The identifier attached to the callbacks.
             * @param {any} value The new value on this context specified by 
             * the identifier.
             * @param {any} oldValue The old value on this context specified by 
             * the identifier.
             */
            protected _execute(identifier: string, value: any, oldValue: any): void {
                var observableListeners = this.__identifiers[identifier];

                if (isUndefined(value)) {
                    deleteProperty(this.__contextObjects, identifier);
                } else {
                    this.__contextObjects[identifier] = value;
                }

                if (isNull(observableListeners)) {
                    return;
                }

                var length = observableListeners.length,
                    newLength = length,
                    i = 0;

                while (i < length) {
                    observableListeners[i].listener(value, oldValue);
                    newLength = observableListeners.length;
                    i += newLength - length + 1;
                    length = newLength;
                }
            }

            /**
             * Defines a getter and setter for an object using Object.defineProperty.
             * @param {string} identifier The identifier of the object being defined.
             * @param {any} immediateContext The parent object of the object being defined.
             * @param {string} key The property key of the object being defined.
             */
            private __defineObject(identifier: string, immediateContext: any, key: string): void {
                var value = immediateContext[key];

                Object.defineProperty(immediateContext, key, {
                    configurable: true,
                    enumerable: true,
                    get: () => {
                        this.__observedIdentifier = identifier;
                        return value;
                    },
                    set: (newValue) => {
                        if (value === newValue) {
                            return;
                        }

                        var oldValue = value;
                        value = newValue;

                        if (this.__isArrayFunction) {
                            return;
                        }

                        var childPropertiesExist = (this.__identifierHash[identifier] || []).length > 0;
                        this._execute(identifier, value, oldValue);

                        if (childPropertiesExist) {
                            this._notifyChildProperties(identifier, value, oldValue);
                        }

                        if (!childPropertiesExist && isEmpty(this.__identifiers[identifier])) {
                            ContextManager.defineProperty(immediateContext, key, value, true, true, true);
                        } else if (!isObject(value)) {
                            this.__definePrimitive(identifier, immediateContext, key);
                        }
                    }
                });
            }

            /**
             * Defines a getter and setter for a primitive using Object.defineProperty.
             * @param {string} identifier The identifier of the primitive being defined.
             * @param {any} immediateContext The parent object of the primitive being defined.
             * @param {string} key The property key of the primitive being defined.
             */
            private __definePrimitive(identifier: string, immediateContext: any, key: string): void {
                var value = immediateContext[key],
                    isDefined = !isNull(value);

                if (isArray(immediateContext) && key === 'length') {
                    return;
                }

                Object.defineProperty(immediateContext, key, {
                    configurable: true,
                    enumerable: true,
                    get: () => {
                        this.__observedIdentifier = identifier;
                        return value;
                    },
                    set: (newValue) => {
                        if (value === newValue) {
                            return;
                        }
                        var oldValue = value;
                        value = newValue;

                        if (this.__isArrayFunction && isArray(immediateContext)) {
                            return;
                        }

                        var childPropertiesExist = (this.__identifierHash[identifier] || []).length > 0;
                        this._execute(identifier, newValue, oldValue);

                        if (!childPropertiesExist && isEmpty(this.__identifiers[identifier])) {
                            ContextManager.defineProperty(immediateContext, key, value, true, true, true);
                        } else if (isObject(value)) {
                            this.__defineObject(identifier, immediateContext, key);
                            if (childPropertiesExist) {
                                this._notifyChildProperties(identifier, newValue, oldValue);
                            }
                        } else if (!isDefined) {
                            this.__definePrimitive(identifier, immediateContext, key);
                            isDefined = true;
                        }
                    }
                });
            }

            /**
             * Adds and associates a listener with a given identifier.
             * @param {string} identifier The identifier to attach the listener.
             * @param {plat.observable.IListener} observableListener The listener being added.
             */
            private __add(identifier: string, observableListener: IListener): void {
                var callbacks = this.__identifiers[identifier];

                if (isNull(callbacks)) {
                    callbacks = this.__identifiers[identifier] = [];
                }

                callbacks.push(observableListener);

                this.__addHashValues(identifier);
            }

            /**
             * Adds a mapping for an identifier which allows quick access to it 
             * if a parent context is changed.
             * @param {string} identifier The identifier to map.
             */
            private __addHashValues(identifier: string): void {
                var split = identifier.split('.'),
                    ident = split.shift(),
                    hashValue = this.__identifierHash[ident];

                if (isNull(hashValue)) {
                    hashValue = this.__identifierHash[ident] = [];
                    if (split.length === 0) {
                        return;
                    }
                }

                if (ident !== identifier && hashValue.indexOf(identifier) === -1) {
                    hashValue.push(identifier);
                }

                while (split.length > 0) {
                    ident += '.' + split.shift();
                    hashValue = this.__identifierHash[ident];

                    if (isNull(hashValue)) {
                        hashValue = this.__identifierHash[ident] = [];
                        if (ident !== identifier) {
                            hashValue.push(identifier);
                        }
                    } else if (ident !== identifier && hashValue.indexOf(identifier) === -1) {
                        hashValue.push(identifier);
                    }
                }
            }
        }

        /**
         * The Type for referencing the '_ContextManager' injectable as a dependency.
         */
        export function IContextManagerStatic(_Exception: IExceptionStatic): IContextManagerStatic {
            (<any>ContextManager)._Exception = _Exception;
            return ContextManager;
        }

        register.injectable(__ContextManagerStatic, IContextManagerStatic, null, __STATIC);

        /**
         * Creates and manages ContextManagers and has 
         * additional helper functions for observing objects and primitives.
         */
        export interface IContextManagerStatic {
            /**
             * A set of functions to be fired prior to when a particular observed array is mutated.
             */
            preArrayListeners: IObject<IObject<Array<(ev: IPreArrayChangeInfo) => void>>>;

            /**
             * A set of functions to be fired when a particular observed array is mutated.
             */
            postArrayListeners: IObject<IObject<Array<(ev: IPostArrayChangeInfo<any>) => void>>>;

            /**
             * Gets the ContextManager associated to the given control. If no 
             * ContextManager exists, one is created for that control.
             * @param {plat.Control} control The control on which to locate the ContextManager.
             * associated with the input control.
             */
            getManager(control: Control): ContextManager;

            /**
             * Removes all the listeners for a given control's unique ID.
             * @param {plat.Control} control The control whose manager is being disposed.
             * @param {boolean} persist? Whether or not the control's context needs to 
             * be persisted post-disposal or can be set to null.
             */
            dispose(control: Control, persist?: boolean): void;

            /**
             * Removes all listeners for an Array associated with a given uid.
             * @param {string} absoluteIdentifier The identifier used to locate the array.
             * @param {string} uid The uid used to search for listeners.
             */
            removeArrayListeners(absoluteIdentifier: string, uid: string): void;

            /**
             * Safely retrieves the local context given a root context and an Array of
             * property strings.
             * @param {any} rootContext The root object in which to find a local context.
             * @param {Array<string>} split The string array containing properties used to index into 
             * the rootContext.
             */
            getContext(rootContext: any, split: Array<string>): void;

            /**
             * Defines an object property with the associated value. Useful for unobserving objects.
             * @param {any} obj The object on which to define the property.
             * @param {string} key The property key.
             * @param {any} value The value used to define the property.
             * @param {boolean} enumerable? Whether or not the property should be enumerable (able to be iterated 
             * over in a loop)
             * @param {boolean} configurable? Whether or not the property is able to be reconfigured.
             * @param {boolean} writable? Whether or not assignment operators work on the property.
             */
            defineProperty(obj: any, key: string, value: any, enumerable?: boolean, configurable?: boolean, writable?: boolean): void;

            /**
             * Defines an object property with the associated value. Useful for unobserving objects.
             * @param {any} obj The object on which to define the property.
             * @param {string} key The property key.
             * @param {any} value The value used to define the property.
             * @param {boolean} enumerable? Whether or not the property should be enumerable (able to be iterated 
             * over in a loop)
             * @param {boolean} configurable? Whether or not the property is able to be reconfigured.
             */
            defineGetter(obj: any, key: string, value: any, enumerable?: boolean, configurable?: boolean): void;

            /**
             * Pushes the function for removing an observed property upon adding the property.
             * @param {string} identifer The identifier for which the remove listener is being pushed.
             * @param {string} uid The unique ID of the control observing the identifier.
             * @param {plat.IRemoveListener} listener The function for removing the observed property.
             */
            pushRemoveListener(identifier: string, uid: string, listener: IRemoveListener): void;

            /**
             * Splices a given function for removing an observed property.
             * @param {string} identifer The identifier for which the remove listener is being spliced.
             * @param {string} uid The unique ID of the control observing the identifier.
             * @param {plat.IRemoveListener} listener The function for removing the observed property.
             */
            spliceRemoveListener(identifier: string, uid: string, listener: IRemoveListener): void;

            /**
             * Removes a specified identifier from being observed for a given set of control IDs.
             * @param {Array<string>} uids The set of unique Ids for which to remove the specified identifier.
             * @param {string} identifier The identifier to stop observing.
             */
            removeIdentifier(uids: Array<string>, identifier: string): void;

            /**
             * Ensures that an identifier path will exist on a given control. Will create 
             * objects/arrays if necessary.
             * @param {plat.ui.TemplateControl} control The TemplateControl 
             * on which to create the context.
             * @param {string} identifier The period-delimited identifier string used to create 
             * the context path.
             */
            createContext(control: ui.TemplateControl, identifier: string): any;
        }

        /**
         * An object specifying a listener callback function and a unique id to use to manage the
         * listener.
         */
        export interface IListener {
            /**
             * A listener method called when the object it is observing is changed.
             * @param {any} value The new value of the object.
             * @param {any} oldValue The previous value of the object.
             */
            listener(value: any, oldValue: any): void;

            /**
             * A unique id used to manage the listener.
             */
            uid: string;
        }

        /**
         * An object for Array method mutation info prior to the Array being mutated.
         */
        export interface IPreArrayChangeInfo {
            /**
             * The method name that was called. Possible values are:
             * 'push', 'pop', 'reverse', 'shift', 'sort', 'splice', 
             * and 'unshift'
             */
            method: string;

            /**
             * The arguments passed into the array function.
             */
            arguments: Array<any>;
        }

        /**
         * An object for Array method mutation info after the Array has been mutated. Takes a 
         * generic type to denote the type of array it uses.
         */
        export interface IPostArrayChangeInfo<T> extends IPreArrayChangeInfo {
            /**
             * The value returned from the called function.
             */
            returnValue: any;

            /**
             * The previous value of the array.
             */
            oldArray: Array<T>;

            /**
             * The new value of the array.
             */
            newArray: Array<T>;
        }

            /**
             * Defines the object added to a template control when its element 
             * has an attribute control that extends ObservableAttributeControl.
             * This will contain the value of the expression as well as a way to observe the 
             * attribute value for changes.
             * plat-options is a control that implements this interface, and puts an 'options' 
             * property on its associated template control.
             * The generic type corresponds to the type of object created when the attribute 
             * expression is evaluated.
             */
            export interface IObservableProperty<T> {
                /**
                 * The value obtained from evaluating the attribute's expression.
                 */
                value: T;

                /**
                 * A method for observing the attribute for changes.
                 * @param {(newValue: T, oldValue: T) => void} listener The listener callback which will be pre-bound to the 
                 * template control.
                 */
                observe(listener: (newValue: T, oldValue: T) => void): IRemoveListener;
            }
    }
    /**
     * Holds classes and interfaces related to event management components in platypus.
     */
    export module events {
        /**
         * An event class that propagates through a control tree. 
         * Propagation of the event always starts at the sender, allowing a control to both 
         * initialize and consume an event. If a consumer of an event throws an error while 
         * handling the event it will be logged to the app using exception.warn. Errors will 
         * not stop propagation of the event.
         */
        export class DispatchEvent {
            protected static _inject: any = {
                _EventManager: __EventManagerStatic,
                _ContextManager: __ContextManagerStatic
            };

            /**
             * Reference to the IEventManagerStatic injectable.
             */
            protected _EventManager: IEventManagerStatic;

            /**
             * Reference to the IContextManagerStatic injectable.
             */
            protected _ContextManager: observable.IContextManagerStatic;

            /**
             * The object that initiated the event.
             */
            sender: any;

            /**
             * The name of the event.
             */
            name: string;

            /**
             * The event direction this object is using for propagation.
             */
            direction: string;

            /**
             * Whether or not preventDefault() was called on the event. Senders of the 
             * event can check this property to know if they should carry out a default 
             * action as a result of the event.
             */
            defaultPrevented: boolean = false;

            /**
             * Whether or not the event propagation was stopped.
             */
            stopped: boolean = false;

            /**
             * Initializes the event, populating its public properties.
             * @param {string} name The name of the event.
             * @param {any} sender The object that initiated the event.
             * @param {string} direction='up' Equivalent to EventManager.UP.
             */
            initialize(name: string, sender: any, direction?: 'up'): void;
            /**
             * Initializes the event, populating its public properties.
             * @param {string} name The name of the event.
             * @param {any} sender The object that initiated the event.
             * @param {string} direction='down' Equivalent to EventManager.DOWN.
             */
            initialize(name: string, sender: any, direction?: 'down'): void;
            /**
             * Initializes the event, populating its public properties.
             * @param {string} name The name of the event.
             * @param {any} sender The object that initiated the event.
             * @param {string} direction='direct' Equivalent to EventManager.DIRECT.
             */
            initialize(name: string, sender: any, direction?: 'direct'): void;
            /**
             * Initializes the event, populating its public properties.
             * @param {string} name The name of the event.
             * @param {any} sender The object that initiated the event.
             * @param {string} direction The direction of propagation
             */
            initialize(name: string, sender: any, direction?: string): void;
            initialize(name: string, sender: any, direction?: string) {
                this.name = name;
                this.direction = direction || this._EventManager.UP;
                this.sender = sender;
            }

            /**
             * Cancels the default action (if there is one) for an event. Does not affect propagation.
             */
            preventDefault(): void {
                if (!this.defaultPrevented) {
                    this._ContextManager.defineGetter(this, 'defaultPrevented', true);
                }
            }

            /**
             * Call this method to halt the propagation of an upward-moving event.
             * Downward events cannot be stopped with this method.
             */
            stopPropagation(): void {
                if (this.direction === this._EventManager.UP) {
                    this.stopped = true;
                    (<any>this._EventManager.propagatingEvents)[this.name] = false;
                }
            }
        }

        register.injectable(__DispatchEventInstance, DispatchEvent, null, __INSTANCE);

        /**
         * Represents a Lifecycle Event. Lifecycle Events are always direct events.
         */
        export class LifecycleEvent extends DispatchEvent {
            /**
             * Creates a new LifecycleEvent and fires it.
             * @param {string} name The name of the event.
             * @param {any} sender The sender of the event.
             */
            static dispatch(name: string, sender: any): LifecycleEvent {
                var event: LifecycleEvent = acquire(LifecycleEvent);
                event.initialize(name, sender);
                EventManager.sendEvent(event);

                return event;
            }

            /**
             * Initializes the event, populating its public properties.
             * @param {string} name The name of the event.
             * @param {any} sender The sender of the event.
             */
            initialize(name: string, sender: any): void {
                super.initialize(name, sender, this._EventManager.DIRECT);
            }
        }

        /**
         * The Type for referencing the '_LifecycleEventStatic' injectable as a dependency.
         */
        export function ILifecycleEventStatic(): ILifecycleEventStatic {
            return LifecycleEvent;
        }

        register.injectable(__LifecycleEventStatic, ILifecycleEventStatic, null, __STATIC);

        /**
         * Dispatches LifecycleEvent
         */
        export interface ILifecycleEventStatic {
            /**
             * Creates a new LifecycleEvent and fires it.
             * @param {string} name The name of the event.
             * @param {any} sender The sender of the event.
             */
            dispatch(name: string, sender: any): LifecycleEvent;
        }

        /**
         * Manages dispatching events, handling all propagating events as well as any error handling.
         */
        export class EventManager {
            /**
             * Reference to the IExceptionStatic injectable.
             */
            protected static _Exception: IExceptionStatic;

            /**
             * Reference to the Compat injectable.
             */
            protected static _compat: Compat;

            /**
             * Reference to the Document injectable.
             */
            protected static _document: Document;

            /**
             * Reference to the Window injectable.
             */
            protected static _window: Window;

            /**
             * Reference to the Dom injectable.
             */
            protected static _dom: ui.Dom;

            /**
             * An upward-moving event will start at the sender and move 
             * up the parent chain.
             */
            static UP = 'up';

            /**
             * A downward-moving event will start at the sender and move 
             * to its children and beyond.
             */
            static DOWN = 'down';

            /**
             * Goes through all listeners for an event name, ignoring order.
             */
            static DIRECT = 'direct';

            /**
             * Keeps track of which events are currently propagating.
             */
            static propagatingEvents: IObject<boolean> = {};

            /**
             * Holds all the event listeners keyed by uid.
             */
            private static __eventsListeners: IObject<IEventsListener> = {};

            /**
             * Holds all the event listeners for the application lifefycle events.
             */
            private static __lifecycleEventListeners: Array<{ name: string; value: () => void; }> = [];

            /**
             * whether or not the event manager has been initialized.
             */
            private static __initialized = false;

            /**
             * Initializes the EventManager, creating the initial ALM event listeners.
             */
            static initialize(): void {
                if (EventManager.__initialized) {
                    return;
                }

                EventManager.__initialized = true;

                var lifecycleListeners = EventManager.__lifecycleEventListeners,
                    length = lifecycleListeners.length,
                    _compat = EventManager._compat,
                    _document = EventManager._document,
                    _window = EventManager._window,
                    _dom = EventManager._dom,
                    dispatch = LifecycleEvent.dispatch,
                    listener: { name: string; value: () => void; };

                while (lifecycleListeners.length > 0) {
                    listener = lifecycleListeners.pop();
                    _document.removeEventListener(listener.name, listener.value, false);
                }

                if (_compat.cordova) {
                    var eventNames = [__resume, __online, __offline],
                        winJs = _compat.winJs,
                        event: string;

                    length = eventNames.length;

                    for (var i = 0; i < eventNames.length; ++i) {
                        event = eventNames[i];
                        lifecycleListeners.push({
                            name: event,
                            value: ((ev: string) => () => {
                                dispatch(ev, EventManager);
                            })(event)
                        });

                        _dom.addEventListener(_document, event, lifecycleListeners[i].value, false);
                    }

                    lifecycleListeners.push({
                        name: __pause,
                        value: () => {
                            dispatch(__suspend, EventManager);
                        }
                    });

                    _dom.addEventListener(_document, __pause, lifecycleListeners[lifecycleListeners.length - 1].value, false);

                    lifecycleListeners.push({
                        name: __deviceReady,
                        value: () => {
                            dispatch(__ready, EventManager);
                        }
                    });

                    _dom.addEventListener(_document, __deviceReady, lifecycleListeners[lifecycleListeners.length - 1].value, false);

                    lifecycleListeners.push({
                        name: __backButton,
                        value: () => {
                            if (!winJs) {
                                dispatch(__backButton, EventManager);
                            }

                            return true;
                        }
                    });

                    _dom.addEventListener(_document, __backButton, lifecycleListeners[lifecycleListeners.length - 1].value, false);

                    if (winJs) {
                        lifecycleListeners.push({
                            name: __backClick,
                            value: () => {
                                dispatch(__backButton, EventManager);
                                return true;
                            }
                        });

                        (<any>_window).WinJS.Application.addEventListener(__backClick, lifecycleListeners[lifecycleListeners.length - 1].value, false);
                    }
                } else if (_compat.amd) {
                    return;
                } else {
                    _dom.addEventListener(_window, 'load',() => {
                        dispatch(__ready, EventManager);
                    });
                }
            }

            /**
             * Removes all event listeners for a given uid. Useful for garbage collection when 
             * certain objects that listen to events go out of scope.
             * @param {string} uid The uid for which the event listeners will be removed.'
             */
            static dispose(uid: string): void {
                deleteProperty(EventManager.__eventsListeners, uid);
            }

            /**
             * Registers a listener for a DispatchEvent. The listener will be called when a DispatchEvent is 
             * propagating over the given uid. Any number of listeners can exist for a single event name.
             * @param {string} uid A unique id to associate with the object registering the listener.
             * @param {string} eventName The name of the event to listen to.
             * @param {(ev: DispatchEvent, ...args: any[]) => void} listener The method called when the event is fired.
             * @param {any} context? The context with which to call the listener method.
             */
            static on(uid: string, eventName: string, listener: (ev: DispatchEvent, ...args: any[]) => void,
                context?: any): IRemoveListener {
                var eventsListener = EventManager.__eventsListeners[uid];

                if (isNull(eventsListener)) {
                    eventsListener = EventManager.__eventsListeners[uid] = {
                        listeners: {},
                        context: context
                    };
                }

                var eventListeners = eventsListener.listeners[eventName];

                if (!isArray(eventListeners)) {
                    eventListeners = eventsListener.listeners[eventName] = [];
                }

                eventListeners.push(listener);

                return () => {
                    var index = eventListeners.indexOf(listener);
                    if (index === -1) {
                        return;
                    }

                    eventListeners.splice(index, 1);
                };
            }

            /**
             * Looks for listeners to a given event name, and fires the listeners using the specified
             * event direction.
             * @param {string} name The name of the event.
             * @param {any} sender The object sending the event.
             * @param {string} direction='up' Equivalent to EventManager.UP.
             * @param {Array<any>} args? The arguments to send to the listeners.
             */
            static dispatch(name: string, sender: any, direction: 'up', args?: Array<any>): DispatchEvent;
            /**
             * Looks for listeners to a given event name, and fires the listeners using the specified
             * event direction.
             * @param {string} name The name of the event.
             * @param {any} sender The object sending the event.
             * @param {string} direction='down' Equivalent to EventManager.DOWN.
             * @param {Array<any>} args? The arguments to send to the listeners.
             */
            static dispatch(name: string, sender: any, direction: 'down', args?: Array<any>): DispatchEvent;
            /**
             * Looks for listeners to a given event name, and fires the listeners using the specified
             * event direction.
             * @param {string} name The name of the event.
             * @param {any} sender The object sending the event.
             * @param {string} direction='direct' Equivalent to EventManager.DIRECT.
             * @param {Array<any>} args? The arguments to send to the listeners.
             */
            static dispatch(name: string, sender: any, direction: 'direct', args?: Array<any>): DispatchEvent;
            /**
             * Looks for listeners to a given event name, and fires the listeners using the specified
             * event direction.
             * @param {string} name The name of the event.
             * @param {any} sender The object sending the event.
             * @param {string} direction The direction in which to send the event.
             * @param {Array<any>} args? The arguments to send to the listeners.
             */
            static dispatch(name: string, sender: any, direction: string, args?: Array<any>): DispatchEvent;
            static dispatch(name: string, sender: any, direction: string, args?: Array<any>) {
                var _dispatchEvent: DispatchEvent = acquire(__DispatchEventInstance);
                _dispatchEvent.initialize(name, sender, direction);
                EventManager.sendEvent(_dispatchEvent, args);
                return _dispatchEvent;
            }

            /**
             * Returns whether or not the given string is a registered direction.
             * @param {string} direction The direction of the event
             */
            static hasDirection(direction: string): boolean {
                return (direction === EventManager.UP ||
                    direction === EventManager.DOWN ||
                    direction === EventManager.DIRECT);
            }

            /**
             * Determines the appropriate direction and dispatches the event accordingly.
             * @param {plat.events.DispatchEvent} event The DispatchEvent to send
             * @param {Array<any>} args The arguments associated with the event
             */
            static sendEvent(event: DispatchEvent, args?: Array<any>): void {
                var name = event.name,
                    direction = event.direction;

                args = args || [];

                EventManager.propagatingEvents[name] = true;
                args = args || [];

                switch (direction) {
                    case EventManager.UP:
                        EventManager._dispatchUp(event, args);
                        break;
                    case EventManager.DOWN:
                        EventManager._dispatchDown(event, args);
                        break;
                    case EventManager.DIRECT:
                        EventManager._dispatchDirect(event, args);
                        break;
                }

                deleteProperty(EventManager.propagatingEvents, name);
            }

            /**
             * Dispatches the event up the control chain.
             * @param {plat.events.DispatchEvent} event The event being dispatched.
             * @param {Array<any>} args The arguments associated with the event.
             */
            protected static _dispatchUp(event: DispatchEvent, args: Array<any>): void {
                var name = event.name,
                    parent = event.sender;

                while (!isNull(parent) && EventManager.propagatingEvents[name]) {
                    if (isNull(parent.uid)) {
                        parent = parent.parent;
                        continue;
                    }

                    EventManager.__executeEvent(parent.uid, event, args);
                    parent = parent.parent;
                }
            }

            /**
             * Dispatches the event down the control chain.
             * @param {plat.events.DispatchEvent} event The event being dispatched.
             * @param {Array<any>} args The arguments associated with the event.
             */
            protected static _dispatchDown(event: DispatchEvent, args: Array<any>): void {
                var controls: Array<Control> = [],
                    control: Control,
                    name = event.name;

                controls.push(event.sender);

                while (controls.length && EventManager.propagatingEvents[name]) {
                    control = controls.pop();

                    if (isNull(control.uid)) {
                        continue;
                    }

                    EventManager.__executeEvent(control.uid, event, args);

                    if (isNull((<ui.TemplateControl>control).controls)) {
                        continue;
                    }

                    controls = controls.concat((<ui.TemplateControl>control).controls);
                }
            }

            /**
             * Dispatches the event directly to all listeners.
             * @param {plat.events.DispatchEvent} event The event being dispatched.
             * @param {Array<any>} args The arguments associated with the event.
             */
            protected static _dispatchDirect(event: DispatchEvent, args: Array<any>): void {
                var uids = Object.keys(EventManager.__eventsListeners),
                    length = uids.length,
                    name = event.name,
                    eventsListener: IEventsListener;

                for (var i = 0; i < length; ++i) {
                    if (!EventManager.propagatingEvents[name]) {
                        break;
                    }

                    eventsListener = EventManager.__eventsListeners[uids[i]];

                    if (isNull(eventsListener) || isNull(eventsListener.listeners[name])) {
                        continue;
                    }

                    EventManager.__callListeners(eventsListener.context, event, eventsListener.listeners[name], args);
                }
            }

            /**
             * Dispatches the event to the listeners for the given uid.
             * @param {string} uid The uid used to find the event listeners.
             * @param {plat.events.DispatchEvent} The event.
             * @param {Array<any>} args The arguments to send to the listeners.
             */
            private static __executeEvent(uid: string, ev: DispatchEvent, args: Array<any>): void {
                var eventsListener = EventManager.__eventsListeners[uid];

                if (isNull(eventsListener)) {
                    return;
                }
                var context = eventsListener.context,
                    listeners = eventsListener.listeners[ev.name];

                if (isNull(listeners)) {
                    return;
                }

                EventManager.__callListeners(context, ev, listeners, args);
            }

            /**
             * Calls event listeners with the given context, event, and arguments.
             * @param {any} context The context with which to call the listeners.
             * @param {plat.events.DispatchEvent} The event.
             * @param {Array<(ev: DispatchEvent, ...args: any[]) => void>} The event listeners.
             * @param {Array<any>} args The arguments to send to the listeners.
             */
            private static __callListeners(context: any, ev: DispatchEvent,
                listeners: Array<(ev: DispatchEvent, ...args: any[]) => void>, args: Array<any>): void {
                var name = ev.name,
                    length = listeners.length,
                    index = -1;

                args = [ev].concat(args);

                while (++index < length && EventManager.propagatingEvents[name]) {
                    try {
                        listeners[index].apply(context, args);
                    } catch (e) {
                        var _Exception: IExceptionStatic = EventManager._Exception;
                        _Exception.warn(e, _Exception.EVENT);
                    }
                }
            }
        }

        /**
         * The Type for referencing the '_EventManagerStatic' injectable as a dependency.
         */
        export function IEventManagerStatic(
            _Exception?: IExceptionStatic,
            _compat?: Compat,
            _document?: Document,
            _window?: Window,
            _dom?: ui.Dom): IEventManagerStatic {
            (<any>EventManager)._Exception = _Exception;
            (<any>EventManager)._compat = _compat;
            (<any>EventManager)._document = _document;
            (<any>EventManager)._window = _window;
            (<any>EventManager)._dom = _dom;
            return EventManager;
        }

        register.injectable(__EventManagerStatic, IEventManagerStatic, [
            __ExceptionStatic,
            __Compat,
            __Document,
            __Window,
            __Dom
        ], __STATIC);

        /**
         * Manages dispatching events, handling all propagating events as well as any error handling.
         */
        export interface IEventManagerStatic {
            /**
             * An upward-moving event will start at the sender and move
             * up the parent chain.
             */
            UP: string;

            /**
             * A downward-moving event will start at the sender and move
             * to its children and beyond.
             */
            DOWN: string;

            /**
             * Goes through all listeners for an event name, ignoring order.
             */
            DIRECT: string;

            /**
             * Keeps track of which events are currently propagating.
             */
            propagatingEvents: IObject<boolean>;

            /**
             * Initializes the EventManager, creating the initial ALM event listeners.
             */
            initialize(): void;

            /**
             * Removes all event listeners for a given uid. Useful for garbage collection when 
             * certain objects that listen to events go out of scope.
             * @param {string} uid The uid for which the event listeners will be removed.'
             */
            dispose(uid: string): void;

            /**
             * Registers a listener for the ready AlmEvent. The ready event will be called when the app 
             * is ready to start.
             * @param {string} uid A unique id to associate with the object registering the listener.
             * @param {string} eventName='ready' Specifies that the listener is for the ready event.
             * @param {(ev: plat.events.LifecycleEvent) => void} listener The method called when the event is fired.
             * @param {any} context? The context with which to call the listener method.
             */
            on(uid: string, eventName: 'ready', listener: (ev: LifecycleEvent) => void,
                context?: any): IRemoveListener;
            /**
             * Registers a listener for the suspend AlmEvent. The listener will be called when an app 
             * is being suspended.
             * @param {string} uid A unique id to associate with the object registering the listener.
             * @param {string} eventName='suspend' Specifies the listener is for the suspend event.
             * @param {(ev: plat.events.LifecycleEvent) => void} listener The method called when the event is fired.
             * @param {any} context? The context with which to call the listener method.
             */
            on(uid: string, eventName: 'suspend', listener: (ev: LifecycleEvent) => void,
                context?: any): IRemoveListener;
            /**
             * Registers a listener for the resume AlmEvent. The listener will be called when an app 
             * is being resumeed.
             * @param {string} uid A unique id to associate with the object registering the listener.
             * @param {string} eventName='suspend' Specifies the listener is for the resume event.
             * @param {(ev: plat.events.LifecycleEvent) => void} listener The method called when the event is fired.
             * @param {any} context? The context with which to call the listener method.
             */
            on(uid: string, eventName: 'resume', listener: (ev: LifecycleEvent) => void,
                context?: any): IRemoveListener;
            /**
             * Registers a listener for the online AlmEvent. This event fires when the app's network 
             * connection changes to be online.
             * @param {string} uid A unique id to associate with the object registering the listener.
             * @param {string} eventName='online' Specifies the listener is for the online event.
             * @param {(ev: plat.events.LifecycleEvent) => void} listener The method called when the event is fired.
             * @param {any} context? The context with which to call the listener method.
             */
            on(uid: string, eventName: 'online', listener: (ev: LifecycleEvent) => void,
                context?: any): IRemoveListener;
            /**
             * Registers a listener for the offline AlmEvent. This event fires when the app's network 
             * connection changes to be offline.
             * @param {string} uid A unique id to associate with the object registering the listener.
             * @param {string} eventName='offline' Specifies the listener is for the offline event.
             * @param {(ev: plat.events.LifecycleEvent) => void} listener The method called when the event is fired.
             * @param {any} context? The context with which to call the listener method.
             */
            on(uid: string, eventName: 'offline', listener: (ev: LifecycleEvent) => void,
                context?: any): IRemoveListener;
            /**
             * Registers a listener for an AlmEvent. The listener will be called when an AlmEvent is
             * propagating over the given uid. Any number of listeners can exist for a single event name.
             * @param {string} uid A unique id to associate with the object registering the listener.
             * @param {string} eventName The name of the event to listen to.
             * @param {(ev: plat.events.LifecycleEvent) => void} listener The method called when the event is fired.
             * @param {any} context? The context with which to call the listener method.
             */
            on(uid: string, eventName: string, listener: (ev: LifecycleEvent) => void,
                context?: any): IRemoveListener;
            /**
             * Registers a listener for a ErrorEvent. The listener will be called when a ErrorEvent is
             * propagating over the given uid. Any number of listeners can exist for a single event name.
             * @param {string} uid A unique id to associate with the object registering the listener.
             * @param {string} eventName The name of the event to listen to.
             * @param {(ev: plat.events.ErrorEvent<Error>) => void} listener The method called when the event is fired.
             * @param {any} context? The context with which to call the listener method.
             */
            on(uid: string, eventName: 'error', listener: (ev: ErrorEvent<Error>) => void,
                context?: any): IRemoveListener;
            /**
             * Registers a listener for a DispatchEvent. The listener will be called when a DispatchEvent is
             * propagating over the given uid. Any number of listeners can exist for a single event name.
             * @param {string} uid A unique id to associate with the object registering the listener.
             * @param {string} eventName The name of the event to listen to.
             * @param {(ev: plat.events.DispatchEvent, ...args: any[]) => void} listener The method called when the event is fired.
             * @param {any} context? The context with which to call the listener method.
             */
            on(uid: string, eventName: string, listener: (ev: DispatchEvent, ...args: any[]) => void,
                context?: any): IRemoveListener;

            /**
             * Looks for listeners to a given event name, and fires the listeners using the specified
             * event direction.
             * @param {string} name The name of the event.
             * @param {any} sender The object sending the event.
             * @param {string} direction='up' Equivalent to EventManager.UP.
             * @param {Array<any>} args? The arguments to send to the listeners.
             */
            dispatch(name: string, sender: any, direction: 'up', args?: Array<any>): DispatchEvent;
            /**
             * Looks for listeners to a given event name, and fires the listeners using the specified
             * event direction.
             * @param {string} name The name of the event.
             * @param {any} sender The object sending the event.
             * @param {string} direction='down' Equivalent to EventManager.DOWN.
             * @param {Array<any>} args? The arguments to send to the listeners.
             */
            dispatch(name: string, sender: any, direction: 'down', args?: Array<any>): DispatchEvent;
            /**
             * Looks for listeners to a given event name, and fires the listeners using the specified
             * event direction.
             * @param {string} name The name of the event.
             * @param {any} sender The object sending the event.
             * @param {string} direction='direct' Equivalent to EventManager.DIRECT.
             * @param {Array<any>} args? The arguments to send to the listeners.
             */
            dispatch(name: string, sender: any, direction: 'direct', args?: Array<any>): DispatchEvent;
            /**
             * Looks for listeners to a given event name, and fires the listeners using the specified
             * event direction.
             * @param {string} name The name of the event.
             * @param {any} sender The object sending the event.
             * @param {string} direction The direction in which to send the event.
             * @param {Array<any>} args? The arguments to send to the listeners.
             */
            dispatch(name: string, sender: any, direction: string, args?: Array<any>): DispatchEvent;

            /**
             * Returns whether or not the given string is a registered direction.
             * @param {string} direction The direction of the event
             */
            hasDirection(direction: string): boolean;

            /**
             * Determines the appropriate direction and dispatches the event accordingly.
             * @param {plat.events.DispatchEvent} event The DispatchEvent to send
             * @param {Array<any>} args The arguments associated with the event
             */
            sendEvent(event: DispatchEvent, args?: Array<any>): void;
        }

        /**
         * An object that contains event listeners.
         */
        interface IEventsListener {
            /**
             * An IObject of listener arrays, keyed by event name.
             */
            listeners: IObject<Array<(ev: DispatchEvent, ...args: any[]) => void>>;
        
            /**
             * The context with which to call each event listener.
             */
            context: any;
        }

        /**
         * Represents an internal Error Event. This is used for any 
         * internal errors (both fatal and warnings). All error events are 
         * direct events.
         */
        export class ErrorEvent<E extends Error> extends DispatchEvent {
            /**
             * Reference to the IEventManagerStatic injectable.
             */
            protected static _EventManager: IEventManagerStatic;

            /**
             * Creates a new ErrorEvent and fires it.
             * @param {string} name The name of the event.
             * @param {any} sender The sender of the event.
             * @param {E} error The error that occurred, resulting in the event.
             */
            static dispatch<E extends Error>(name: string, sender: any, error: E): ErrorEvent<E> {
                var event: ErrorEvent<E> = acquire(ErrorEvent);

                event.initialize(name, sender, null, error);
                ErrorEvent._EventManager.sendEvent(event);

                return event;
            }

            /**
             * The error being dispatched.
             */
            error: E;

            /**
             * Initializes the event, populating its public properties.
             * @param {string} name The name of the event.
             * @param {any} sender The sender of the event.
             * @param {string} direction='direct' Equivalent to EventManager.DIRECT.
             * @param {E} error The error that occurred, resulting in the event.
             */
            initialize(name: string, sender: any, direction?: 'direct', error?: E): void;
            /**
             * Initializes the event, populating its public properties.
             * @param {string} name The name of the event.
             * @param {any} sender The sender of the event.
             * @param {string} direction This is always a direct event.
             * @param {E} error The error that occurred, resulting in the event.
             */
            initialize(name: string, sender: any, direction?: string, error?: E): void;
            initialize(name: string, sender: any, direction?: string, error?: E) {
                super.initialize(name, sender, this._EventManager.DIRECT);

                this.error = error;
            }
        }

        /**
         * The Type for referencing the '$ErrorEventStatic' injectable as a dependency.
         */
        export function IErrorEventStatic(_EventManager?: IEventManagerStatic): IErrorEventStatic {
            (<any>ErrorEvent)._EventManager = _EventManager;
            return ErrorEvent;
        }

        register.injectable(__ErrorEventStatic, IErrorEventStatic, [__EventManagerStatic], __STATIC);

        /**
         * Dispatches ErrorEvents
         */
        export interface IErrorEventStatic {
            /**
             * Creates a new ErrorEvent and fires it.
             * @param {string} name The name of the event.
             * @param {any} sender The sender of the event.
             * @param {E} error The error that occurred, resulting in the event.
             */
            dispatch<E extends Error>(name: string, sender: any, error: E): ErrorEvent<E>;
        }
    }
    /**
     * Used for facilitating data and DOM manipulation. Contains lifecycle events 
     * as well as properties for communicating with other controls. This is the base
     * class for all types of controls.
     */
    export class Control {
        protected static _inject: any = {
            _Exception: __ExceptionStatic,
            dom: __Dom
        };

        /**
         * Reference to the Parser injectable.
         */
        protected static _parser: expressions.Parser;

        /**
         * Reference to the ContextManagerStatic injectable.
         */
        protected static _ContextManager: observable.IContextManagerStatic;

        /**
         * Reference to the IEventManagerStatic injectable.
         */
        protected static _EventManager: events.IEventManagerStatic;

        /**
         * Reference to the IPromise injectable.
         */
        protected static _Promise: async.IPromise;

        /**
         * An object containing all controls' registered event listeners.
         */
        private static __eventListeners: IObject<Array<IRemoveListener>> = {};

        /**
         * Finds the ancestor control for the given control that contains the root 
         * context.
         * @param {plat.Control} control The control with which to find the root.
         */
        static getRootControl(control: Control): ui.TemplateControl;
        static getRootControl(control: ui.TemplateControl): ui.TemplateControl {
            if (isNull(control)) {
                return control;
            } else if (!isNull(control.root)) {
                return control.root;
            }

            while (!(isNull(control.parent) || control.hasOwnContext)) {
                if (!isNull(control.root)) {
                    return control.root;
                }
                control = control.parent;
            }

            return control;
        }

        /**
         * Given a control, calls the loaded method for the control if it exists.
         * @param {plat.Control} control The control to load.
         */
        static load(control: Control): async.IThenable<void> {
            if (isNull(control)) {
                return;
            }

            var ctrl = <ui.TemplateControl>control;
            if (isString(ctrl.absoluteContextPath) && isFunction(ctrl.contextChanged)) {
                var contextManager = Control._ContextManager.getManager(ctrl.root);

                contextManager.observe(ctrl.absoluteContextPath, {
                    uid: control.uid,
                    listener: (newValue, oldValue) => {
                        ui.TemplateControl.contextChanged(<ui.TemplateControl>control, newValue, oldValue);
                    }
                });

                if (isFunction((<any>ctrl).zCC__plat)) {
                    (<any>ctrl).zCC__plat();
                    deleteProperty(ctrl, 'zCC__plat');
                }
            }

            if (isFunction(control.loaded)) {
                return Control._Promise.resolve(control.loaded());
            }

            return Control._Promise.resolve(null);
        }

        /**
         * Disposes all the necessary memory for a control. Uses specific dispose 
         * methods related to a control's constructor if necessary.
         * @param {plat.Control} control The Control to dispose.
         */
        static dispose(control: Control): void {
            var ctrl = <any>control;

            if (isNull(ctrl)) {
                return;
            } else if (!isUndefined(ctrl.templateControl)) {
                AttributeControl.dispose(ctrl);
                return;
            } else if (ctrl.hasOwnContext) {
                ui.ViewControl.dispose(ctrl);
                return;
            } else if (ctrl.controls) {
                ui.TemplateControl.dispose(ctrl);
                return;
            }

            if (isFunction(control.dispose)) {
                control.dispose();
            }

            Control.removeEventListeners(control);
            Control._ContextManager.dispose(control);
            control.element = null;
            Control.removeParent(control);
        }

        /**
         * Splices a control from its parent's controls list. Sets the control's parent 
         * to null.
         * @param {plat.Control} control The control whose parent will be removed.
         */
        static removeParent(control: Control): void {
            if (isNull(control)) {
                return;
            }

            var parent = control.parent;

            if (isNull(parent)) {
                return;
            }

            var controls = parent.controls || [],
                index = controls.indexOf(control);

            if (index !== -1) {
                controls.splice(index, 1);
            }

            control.parent = null;
        }

        /**
         * Removes all event listeners for a control with the given uid.
         * @param {plat.Control} control The control having its event listeners removed.
         */
        static removeEventListeners(control: Control): void {
            if (isNull(control)) {
                return;
            }

            var removeListeners = Control.__eventListeners,
                uid = control.uid;

            var listeners = removeListeners[uid];
            if (isArray(listeners)) {
                var index = listeners.length;
                while (index-- > 0) {
                    listeners[index]();
                }

                deleteProperty(removeListeners, uid);
            }
        }

        /**
         * Returns a new instance of Control.
         */
        static getInstance(): Control {
            return acquire(Control);
        }

        /**
         * Adds a function to remove an event listener for the control specified 
         * by its uid.
         * @param {string} uid The uid of the control associated with the remove function.
         * @param {plat.IRemoveListener} listener The remove function to add.
         */
        private static __addRemoveListener(uid: string, listener: IRemoveListener): void {
            var removeListeners = Control.__eventListeners;

            if (isArray(removeListeners[uid])) {
                removeListeners[uid].push(listener);
                return;
            }

            removeListeners[uid] = [listener];
        }

        /**
         * Removes a IRemoveListener from a control's listeners.
         * @param {string} uid The uid of the control associated with the remove function.
         * @param {plat.IRemoveListener} listener The remove function to add.
         */
        private static __spliceRemoveListener(uid: string, listener: IRemoveListener): void {
            var removeListeners = Control.__eventListeners,
                controlListeners = removeListeners[uid];

            if (isArray(controlListeners)) {
                var index = controlListeners.indexOf(listener);
                if (index === -1) {
                    return;
                }

                controlListeners.splice(index, 1);
            }
        }

        /**
         * Gets controls that have a specific key/value string pair.
         * @param {plat.Control} control The at which to start searching for key/value pairs.
         * @param {string} key The key to search for on all the controls in the tree.
         * @param {string} value The expected value used to find similar controls.
         */
        private static __getControls(control: Control, key: string, value: string): Array<Control> {
            var controls: Array<Control> = [],
                root = Control.getRootControl(control),
                child: Control;

            if (!isNull(root) && (<any>root)[key] === value) {
                controls.push(root);
            }

            var children = root.controls;

            if (isNull(children)) {
                return controls;
            }

            var queue = (<Array<Control>>[]).concat(children);
            while (queue.length > 0) {
                child = queue.shift();

                if ((<any>child)[key] === value) {
                    controls.push(child);
                }

                if (isNull((<ui.TemplateControl>child).controls)) {
                    continue;
                }

                queue = queue.concat((<ui.TemplateControl>child).controls);
            }

            return controls;
        }

        /**
         * The plat.IExceptionStatic injectable instance
         */
        protected _Exception: IExceptionStatic;

        /**
         * A unique id, created during instantiation and found on every Control.
         */
        uid: string = uniqueId(__Plat);

        /**
         * The type of a Control.
         */
        type: string;

        /**
         * Specifies the priority of the control. The purpose of 
         * this is so that controls like plat-bind can have a higher 
         * priority than plat-tap. The plat-bind will be initialized 
         * and loaded before plat-tap, meaning it has the first chance 
         * to respond to events.
         */
        priority = 0;

        /**
         * The parent control that created this control.
         */
        parent: ui.TemplateControl;

        /**
         * The HTMLElement that represents this Control. Should only be modified by controls that implement 
         * TemplateControl. During initialize the control should populate this element with what it wishes
         * to render to the user. 
         * When there is innerHTML in the element prior to instantiating the control:
         *     The element will include the innerHTML
         * When the control implements templateString or templateUrl:
         *     The serialized DOM will be auto-generated and included in the element. Any
         *     innerHTML will be stored in the innerTemplate property on the control.
         * After an Control is initialized its element will be compiled.
         */
        element: HTMLElement;

        /**
         * The attributes object representing all the attributes for a Control's element. All attributes are 
         * converted from dash notation to camelCase.
         */
        attributes: ui.Attributes;

        /**
         * Contains DOM helper methods for manipulating this control's element.
         */
        dom: ui.Dom;

        /**
         * The constructor for a control. Any injectables specified during control registration will be
         * passed into the constructor as arguments as long as the control is instantiated with its associated
         * injector.
         */
        constructor() {
        }

        /**
         * The initialize event method for a control. In this method a control should initialize all the necessary 
         * variables. This method is typically only necessary for view controls. If a control does not implement 
         * IBaseViewControl then it is not safe to access, observe, or modify 
         * the context property in this method. A view control should call services/set context in this method in 
         * order to fire the loaded event. No control will be loaded until the view control has specified a context.
         */
        initialize() { }

        /**
         * The loaded event method for a control. This event is fired after a control has been loaded,
         * meaning all of its children have also been loaded and initial DOM has been created and populated. It is now 
         * safe for all controls to access, observe, and modify the context property.
         */
        loaded() { }

        /**
         * Retrieves all the controls with the specified name.
         * @param {string} name The string name with which to populate the returned controls array.
         */
        getControlsByName(name: string): Array<Control> {
            return Control.__getControls(this, 'name', name);
        }

        /**
         * Retrieves all the controls of the specified type.
         * @param {string} type The type used to find controls (e.g. 'plat-foreach')
         */
        getControlsByType<T extends Control>(type: string): Array<T>;
        /**
         * Retrieves all the controls of the specified type.
         * @param {new () => T} Constructor The constructor used to find controls.
         */
        getControlsByType<T extends Control>(Constructor: new () => T): Array<T>;
        getControlsByType(type: any) {
            if (isString(type)) {
                return Control.__getControls(this, 'type', type);
            }
            return Control.__getControls(this, 'constructor', type);
        }

        /**
         * Adds an event listener of the specified type to the specified element. Removal of the 
         * event is handled automatically upon disposal.
         * @param {EventTarget} element The element to add the event listener to.
         * @param {string} type The type of event to listen to.
         * @param {plat.ui.IGestureListener} listener The listener to fire when the event occurs.
         * @param {boolean} useCapture? Whether to fire the event on the capture or the bubble phase 
         * of event propagation.
         */
        addEventListener(element: EventTarget, type: string, listener: ui.IGestureListener, useCapture?: boolean): IRemoveListener;
        /**
         * Adds an event listener of the specified type to the specified element. Removal of the 
         * event is handled automatically upon disposal.
         * @param {EventTarget} element The element to add the event listener to.
         * @param {string}  type The type of event to listen to.
         * @param {EventListener} listener The listener to fire when the event occurs.
         * @param {boolean} useCapture? Whether to fire the event on the capture or the bubble phase 
         * of event propagation.
         */
        addEventListener(element: EventTarget, type: string, listener: EventListener, useCapture?: boolean): IRemoveListener;
        addEventListener(element: any, type: string, listener: ui.IGestureListener, useCapture?: boolean): IRemoveListener {
            if (!isFunction(listener)) {
                var _Exception: IExceptionStatic = this._Exception;
                _Exception.warn('"Control.addEventListener" must take a function as the third argument.', _Exception.EVENT);
                return noop;
            }

            listener = listener.bind(this);
            var removeListener = this.dom.addEventListener(element, type, listener, useCapture),
                uid = this.uid;

            Control.__addRemoveListener(uid, removeListener);

            return () => {
                removeListener();
                Control.__spliceRemoveListener(uid, removeListener);
            };
        }

        /**
         * Allows a Control to observe any property on its context and receive updates when
         * the property is changed.
         * @param {any} context The immediate parent object containing the property.
         * @param {string} property The property identifier to watch for changes.
         * @param {(value: T, oldValue: T) => void} listener The method called when the property is changed. This method 
         * will have its 'this' context set to the control instance.
         */
        observe<T>(context: any, property: string, listener: (value: T, oldValue: T) => void): IRemoveListener;
        /**
         * Allows a Control to observe any property on its context and receive updates when
         * the property is changed.
         * @param {any} context The immediate parent object containing the property.
         * @param {number} property The property identifier to watch for changes.
         * @param {(value: T, oldValue: T) => void} listener The method called when the property is changed. This method 
         * will have its 'this' context set to the control instance.
         */
        observe<T>(context: any, property: number, listener: (value: T, oldValue: T) => void): IRemoveListener;
        observe(context: any, property: any, listener: (value: any, oldValue: any) => void): IRemoveListener {
            if (isNull(context) || !context.hasOwnProperty(property)) {
                return noop;
            }

            var control = isFunction((<ui.TemplateControl>(<any>this)).getAbsoluteIdentifier) ? this : <Control>this.parent;
            if (isNull(control) || !isFunction((<ui.TemplateControl>(<any>control)).getAbsoluteIdentifier)) {
                return noop;
            }

            var absoluteIdentifier = (<ui.TemplateControl>(<any>control)).getAbsoluteIdentifier(context);
            if (isNull(absoluteIdentifier)) {
                return noop;
            }

            var _ContextManager: observable.IContextManagerStatic = Control._ContextManager || acquire(__ContextManagerStatic),
                contextManager = _ContextManager.getManager(Control.getRootControl(this));

            return contextManager.observe(absoluteIdentifier + '.' + property, {
                listener: listener.bind(this),
                uid: this.uid
            });
        }

        /**
         * Allows a Control to observe an array and receive updates when certain array-changing methods are called.
         * The methods watched are push, pop, shift, sort, splice, reverse, and unshift. This method does not watch
         * every item in the array.
         * @param {any} context The immediate parent object containing the array as a property.
         * @param {string} property The array property identifier to watch for changes.
         * @param {(ev: plat.observable.IPreArrayChangeInfo) => void} preListener The method called prior to an array-changing 
         * method is called. This method will have its 'this' context set to the control instance.
         * @param {(ev: plat.observable.IPostArrayChangeInfo<T>) => void} postListener The method called after an array-changing 
         * method is called. This method will have its 'this' context set to the control instance.
         */
        observeArray<T>(context: any, property: string, preListener: (ev: observable.IPreArrayChangeInfo) => void,
            postListener: (ev: observable.IPostArrayChangeInfo<T>) => void): IRemoveListener;
        /**
         * Allows a Control to observe an array and receive updates when certain array-changing methods are called.
         * The methods watched are push, pop, shift, sort, splice, reverse, and unshift. This method does not watch
         * every item in the array.
         * @param {any} context The immediate parent object containing the array as a property.
         * @param {number} property The array property identifier to watch for changes.
         * @param {(ev: plat.observable.IPreArrayChangeInfo) => void} preListener The method called prior to an array-changing 
         * method is called. This method will have its 'this' context set to the control instance.
         * @param {(ev: plat.observable.IPostArrayChangeInfo<T>) => void} postListener The method called after an array-changing 
         * method is called. This method will have its 'this' context set to the control instance.
         */
        observeArray<T>(context: any, property: number, preListener: (ev: observable.IPreArrayChangeInfo) => void,
            postListener: (ev: observable.IPostArrayChangeInfo<T>) => void): IRemoveListener;
        observeArray(context: any, property: any, preListener: (ev: observable.IPreArrayChangeInfo) => void,
            postListener: (ev: observable.IPostArrayChangeInfo<any>) => void): IRemoveListener {
            if (isNull(context) || !context.hasOwnProperty(property)) {
                return noop;
            }

            var array = context[property];
            if (!isArray(array)) {
                return noop;
            }

            var control = isFunction((<ui.TemplateControl>this).getAbsoluteIdentifier) ? this : <Control>this.parent;
            if (isNull(control) || !isFunction((<ui.TemplateControl>control).getAbsoluteIdentifier)) {
                return noop;
            }

            var preIsFunction = isFunction(preListener),
                postIsFunction = isFunction(postListener);

            if (!(preIsFunction || postIsFunction)) {
                return noop;
            }

            var absoluteIdentifier = (<ui.TemplateControl>control).getAbsoluteIdentifier(context),
                ContextManager: observable.IContextManagerStatic = Control._ContextManager || acquire(__ContextManagerStatic);

            if (isNull(absoluteIdentifier)) {
                if (property === __CONTEXT) {
                    absoluteIdentifier = (<ui.TemplateControl>control).absoluteContextPath;
                } else {
                    return noop;
                }
            } else {
                absoluteIdentifier += '.' + property;
            }

            var contextManager = ContextManager.getManager(Control.getRootControl(this)),
                preCallback = preIsFunction ? preListener.bind(this) : null,
                postCallback = postIsFunction ? postListener.bind(this) : null,
                uid = this.uid,
                removeListener = contextManager.observeArray(uid, preCallback, postCallback, absoluteIdentifier, array, null),
                removeCallback = contextManager.observe(absoluteIdentifier, {
                    listener: (newValue: Array<any>, oldValue: Array<any>) => {
                        removeListener();
                        removeListener = contextManager
                            .observeArray(uid, preCallback, postCallback, absoluteIdentifier, newValue, oldValue);
                    },
                    uid: uid
                });

            return () => {
                removeListener();
                removeCallback();
            };
        }

        /**
         * Parses an expression string and observes any associated identifiers. When an identifier
         * value changes, the listener will be called.
         * @param {string} expression The expression string to watch for changes.
         * @param {(value: any, oldValue: any) => void} listener The listener to call when the expression identifer values change.
         */
        observeExpression(expression: string, listener: (value: any, oldValue: any) => void): IRemoveListener;
        /**
         * Using a IParsedExpression observes any associated identifiers. When an identifier
         * value changes, the listener will be called.
         * @param {plat.expressions.IParsedExpression} expression The expression string to watch for changes.
         * @param {(value: any, oldValue: any) => void} listener The listener to call when the expression identifer values change.
         */
        observeExpression(expression: expressions.IParsedExpression, listener: (value: any, oldValue: any) => void): IRemoveListener;
        observeExpression(expression: any, listener: (value: any, oldValue: any) => void): IRemoveListener {
            if (isEmpty(expression)) {
                return noop;
            }

            if (isString(expression)) {
                expression = Control._parser.parse(expression);
            } else if (!isFunction(expression.evaluate)) {
                return noop;
            }

            var control: ui.TemplateControl = !isNull((<ui.TemplateControl>(<any>this)).resources) ?
                <ui.TemplateControl>(<any>this) :
                <ui.TemplateControl>this.parent;

            if (isNull(control) || !isString(control.absoluteContextPath)) {
                return noop;
            }

            listener = listener.bind(this);

            var aliases = expression.aliases,
                alias: string,
                length = aliases.length,
                resources: IObject<observable.ContextManager> = {},
                resourceObj: { resource: ui.IResource; control: ui.TemplateControl; },
                ContextManager: observable.IContextManagerStatic = Control._ContextManager || acquire(__ContextManagerStatic),
                getManager = ContextManager.getManager,
                TemplateControl = ui.TemplateControl,
                findResource = TemplateControl.findResource,
                evaluateExpression = TemplateControl.evaluateExpression,
                i: number;

            for (i = 0; i < length; ++i) {
                alias = aliases[i];
                resourceObj = findResource(control, alias);

                if (!isNull(resourceObj) && resourceObj.resource.type === __OBSERVABLE_RESOURCE) {
                    resources[alias] = getManager(resourceObj.control);
                }
            }

            var identifiers = expression.identifiers,
                contextManager = getManager(Control.getRootControl(control)),
                identifier: string,
                split: Array<string> = [],
                topIdentifier: string,
                absolutePath = control.absoluteContextPath + '.',
                managers: IObject<observable.ContextManager> = {};

            length = identifiers.length;

            for (i = 0; i < length; ++i) {
                identifier = identifiers[i];
                split = identifier.split('.');
                topIdentifier = split[0];

                if (topIdentifier === 'this') {
                    identifier = identifier.slice(5);
                } else if (identifier[0] === '@') {
                    alias = topIdentifier.slice(1);
                    identifier = identifier.replace(topIdentifier, 'resources.' + alias + '.value');

                    if (!isNull(resources[alias])) {
                        managers[identifier] = resources[alias];
                    }

                    continue;
                }

                managers[absolutePath + identifier] = contextManager;
            }

            identifiers = Object.keys(managers);
            length = identifiers.length;

            var oldValue = evaluateExpression(expression, control),
                listeners: Array<IRemoveListener> = [],
                uid = this.uid;

            for (i = 0; i < length; ++i) {
                identifier = identifiers[i];

                listeners.push(managers[identifier].observe(identifier, {
                    uid: uid,
                    listener: () => {
                        var value = evaluateExpression(expression, control);
                        listener(value, oldValue);
                        oldValue = value;
                    }
                }));
            }

            return () => {
                var length = listeners.length;

                for (var i = 0; i < length; ++i) {
                    listeners[i]();
                }
            };
        }

        /**
         * Evaluates an expression string, using the control.parent.context.
         * @param {string} expression The expression string to evaluate.
         * @param {IObject<any>} aliases Optional alias values to parse with the expression
         */
        evaluateExpression(expression: string, aliases?: IObject<any>): any;
        /**
         * Evaluates an IParsedExpression using the control.parent.context.
         * @param {string} expression The expression string to evaluate.
         * @param {IObject<any>} aliases Optional alias values to parse with the expression
         */
        evaluateExpression(expression: expressions.IParsedExpression, aliases?: IObject<any>): any;
        evaluateExpression(expression: any, aliases?: IObject<any>): any {
            return ui.TemplateControl.evaluateExpression(expression, this.parent, aliases);
        }

        /**
         * Finds the first instance of the specified property 
         * in the parent control chain. Returns undefined if not found.
         * @param {string} property The property identifer
         * evaluated property value, and the control that it's on.
         */
        findProperty(property: string): IControlProperty {
            var control = <Control>this,
                expression = Control._parser.parse(property),
                value: any;

            while (!isNull(control)) {
                value = expression.evaluate(control);

                if (!isNull(value)) {
                    return {
                        expresssion: expression,
                        control: control,
                        value: value
                    };
                }

                control = <Control>control.parent;
            }
        }

        /**
         * Creates a new DispatchEvent and propagates it to controls based on the 
         * provided direction mechanism. Controls in the propagation chain that registered
         * the event using the control.on() method will receive the event. Propagation will
         * always start with the sender, so the sender can both produce and consume the same
         * event.
         * @param {string} name The name of the event to send, coincides with the name used in the
         * control.on() method.
         * @param {string} direction='up' Equivalent to EventManager.UP
         * @param {Array<any>} ...args Any number of arguments to send to all the listeners.
         */
        dispatchEvent(name: string, direction?: 'up', ...args: any[]): void;
        /**
         * Creates a new DispatchEvent and propagates it to controls based on the 
         * provided direction mechanism. Controls in the propagation chain that registered
         * the event using the control.on() method will receive the event. Propagation will
         * always start with the sender, so the sender can both produce and consume the same
         * event.
         * @param {string} name The name of the event to send, coincides with the name used in the
         * control.on() method.
         * @param {string} direction='down' Equivalent to EventManager.DOWN
         * @param {Array<any>} ...args Any number of arguments to send to all the listeners.
         */
        dispatchEvent(name: string, direction?: 'down', ...args: any[]): void;
        /**
         * Creates a new DispatchEvent and propagates it to controls based on the 
         * provided direction mechanism. Controls in the propagation chain that registered
         * the event using the control.on() method will receive the event. Propagation will
         * always start with the sender, so the sender can both produce and consume the same
         * event.
         * @param {string} name The name of the event to send, coincides with the name used in the
         * control.on() method.
         * @param {string} direction='direct' Equivalent to EventManager.DIRECT
         * @param {Array<any>} ...args Any number of arguments to send to all the listeners.
         */
        dispatchEvent(name: string, direction?: 'direct', ...args: any[]): void;
        /**
         * Creates a new DispatchEvent and propagates it to controls based on the 
         * provided direction mechanism. Controls in the propagation chain that registered
         * the event using the control.on() method will receive the event. Propagation will
         * always start with the sender, so the sender can both produce and consume the same
         * event.
         * @param {string} name The name of the event to send, coincides with the name used in the
         * control.on() method.
         * @param {string} direction The direction in which to send the event.
         * @param {Array<any>} ...args Any number of arguments to send to all the listeners.
         */
        dispatchEvent(name: string, direction?: string, ...args: any[]): void;
        dispatchEvent(name: string, direction?: string, ...args: any[]) {
            var manager: events.IEventManagerStatic = Control._EventManager || acquire(__EventManagerStatic);

            if (!manager.hasDirection(direction)) {
                if (!isUndefined(direction)) {
                    args.unshift(direction);
                }
                direction = manager.UP;
            }
            var sender: any = this;

            if (!isNull(sender.templateControl)) {
                sender = sender.templateControl;
            }

            manager.dispatch(name, sender, direction, args);
        }

        /**
         * Registers a listener for a DispatchEvent. The listener will be called when a 
         * DispatchEvent is propagating over the control. Any number of listeners can exist 
         * for a single event name.
         * @param {string} name The name of the event, cooinciding with the DispatchEvent name.
         * @param {(ev: plat.events.DispatchEvent, ...args: Array<any>) => void} listener The method called when the 
         * DispatchEvent is fired.
         */
        on(name: string, listener: (ev: events.DispatchEvent, ...args: any[]) => void): IRemoveListener {
            var _EventManager: events.IEventManagerStatic = Control._EventManager || acquire(__EventManagerStatic);
            return _EventManager.on(this.uid, name, listener, this);
        }

        /**
         * The dispose event is called when a control is being removed from memory. A control should release 
         * all of the memory it is using, including DOM event and property listeners.
         */
        dispose(): void { }
    }

    /**
     * The Type for referencing the '_ControlFactory' injectable as a dependency.
     */
    export function IControlFactory(
        _parser?: expressions.Parser,
        _ContextManager?: observable.IContextManagerStatic,
        _EventManager?: events.IEventManagerStatic,
        _Promise?: async.IPromise): IControlFactory {
        (<any>Control)._parser = _parser;
        (<any>Control)._ContextManager = _ContextManager;
        (<any>Control)._EventManager = _EventManager;
        (<any>Control)._Promise = _Promise;
        return Control;
    }

    register.injectable(__ControlFactory, IControlFactory, [
        __Parser,
        __ContextManagerStatic,
        __EventManagerStatic,
        __Promise
    ], __FACTORY);

    /**
     * Creates and manages instances of Control.
     */
    export interface IControlFactory {
        /**
         * Finds the ancestor control for the given control that contains the root 
         * context.
         * @param {plat.Control} control The control with which to find the root.
         */
        getRootControl(control: Control): ui.TemplateControl;

        /**
         * Given a control, calls the loaded method for the control if it exists.
         * @param {plat.Control} control The control to load.
         */
        load(control: Control): async.IThenable<void>;

        /**
         * Disposes all the necessary memory for a control. Uses specific dispose 
         * methods related to a control's constructor if necessary.
         * @param {plat.Control} control The Control to dispose.
         */
        dispose(control: Control): void;

        /**
         * Splices a control from its parent's controls list. Sets the control's parent 
         * to null.
         * @param {plat.Control} control The control whose parent will be removed.
         */
        removeParent(control: Control): void;

        /**
         * Removes all event listeners for a control with the given uid.
         * @param {plat.Control} control The control having its event listeners removed.
         */
        removeEventListeners(control: Control): void;

        /**
         * Returns a new instance of Control.
         */
        getInstance(): Control;
    }

    /**
     * An object that links a property to a control.
     */
    export interface IControlProperty {
        /**
         * The parsed expression of the control property.
         */
        expresssion: expressions.IParsedExpression;

        /**
         * The value of the property.
         */
        value: any;

        /**
         * The control on which the property is found.
         */
        control: Control;
    }

    /**
     * A type of control that can be used as an attribute but will 
     * not be used to add, remove, or modify DOM.
     */
    export class AttributeControl extends Control {
        /**
         * Method for disposing an attribute control. Removes any 
         * necessary objects from the control.
         * @param {plat.AttributeControl} control The AttributeControl to dispose.
         */
        static dispose(control: AttributeControl): void {
            deleteProperty(control, 'templateControl');

            Control.dispose(control);
        }

        /**
         * Returns a new instance of AttributeControl.
         */
        static getInstance(): AttributeControl {
            return acquire(AttributeControl);
        }

        /**
         * Specifies the TemplateControl associated with this
         * control's element. Can be null if no TemplateControl
         * exists.
         */
        templateControl: ui.TemplateControl = null;
    }

    /**
     * The Type for referencing the '_AttributeControlFactory' injectable as a dependency.
     */
    export function IAttributeControlFactory(): IAttributeControlFactory {
        return AttributeControl;
    }

    register.injectable(__AttributeControlFactory, IAttributeControlFactory, null, __FACTORY);

    /**
     * Creates and manages instances of AttributeControl.
     */
    export interface IAttributeControlFactory {
        /**
         * Method for disposing an attribute control. Removes any 
         * necessary objects from the control.
         * @param {plat.AttributeControl} control The AttributeControl to dispose.
         */
        dispose(control: AttributeControl): void;

        /**
         * Returns a new instance of AttributeControl.
         */
        getInstance(): AttributeControl;
    }

    /**
     * Holds all the classes and interfaces related to UI components for platypus.
     */
    export module ui {
        /**
         * The base control for any control that affects the UI. They provide properties for the control to use
         * to manage its body HTML.
         */
        export class TemplateControl extends Control {
            /**
             * Reference to the IResourcesFactory injectable.
             */
            protected static _ResourcesFactory: IResourcesFactory;

            /**
             * Reference to the IBindableTemplatesFactory injectable.
             */
            protected static _BindableTemplatesFactory: IBindableTemplatesFactory;

            /**
             * Reference to a cache injectable that stores ElementManagers.
             */
            protected static _managerCache: storage.Cache<processing.ElementManager>;

            /**
             * Reference to a cache injectable that stores and retrieves HTML templates.
             */
            protected static _templateCache: storage.TemplateCache;

            /**
             * Reference to the Parser injectable.
             */
            protected static _parser: expressions.Parser;

            /**
             * Reference to the IHttp injectable.
             */
            protected static _http: async.Http;

            /**
             * Reference to the IPromise injectable.
             */
            protected static _Promise: async.IPromise;

            /**
             * Reference to the IExceptionStatic injectable.
             */
            protected static _Exception: IExceptionStatic;

            /**
             * Evaluates an expression string with a given control and optional control's context and aliases.
             * @param {string} expression The expression string (e.g. 'foo + foo').
             * @param {plat.ui.TemplateControl} control? The control used for evaluation context.
             * @param {IObject<any>} aliases? An optional alias object containing resource alias values (property keys should 
             * not include the '@' character).
             */
            static evaluateExpression(expression: string, control?: TemplateControl, aliases?: IObject<any>): any;
            /**
             * Evaluates an expression string with a given control and optional control's context and aliases.
             * @param {plat.expressions.IParsedExpression} expression A parsed expression object created using the 
             * plat.expressions.Parser injectable.
             * @param {plat.ui.TemplateControl} control? The control used for evaluation context.
             * @param {IObject<any>} aliases? An optional alias object containing resource alias values (property keys should 
             * not include the '@' character).
             */
            static evaluateExpression(expression: expressions.IParsedExpression, control?: TemplateControl, aliases?: IObject<any>): any;
            static evaluateExpression(expression: any, control?: TemplateControl, aliases?: IObject<any>): any {
                if (isEmpty(expression)) {
                    return expression;
                }

                if (isString(expression)) {
                    expression = TemplateControl._parser.parse(expression);
                } else if (!isFunction(expression.evaluate)) {
                    return expression;
                }

                if (isNull(control)) {
                    return expression.evaluate(null, aliases);
                }

                if (expression.aliases.length > 0) {
                    aliases = TemplateControl.getResources(control, expression.aliases, aliases);
                }

                return expression.evaluate(control.context, aliases);
            }

            /**
             * Given a control and Array of aliases, finds the associated resources and builds a context object containing
             * the values. Returns the object.
             * @param {plat.ui.TemplateControl} control The control used as the starting point for finding resources.
             * @param {Array<string>} aliases An array of aliases to search for.
             * @param {IObject<any>} resources? An optional resources object to extend, if no resources object is passed in a 
             * new one will be created.
             */
            static getResources(control: TemplateControl, aliases: Array<string>, resources?: IObject<any>): IObject<any> {
                if (isNull(control)) {
                    return {};
                }

                var length = aliases.length,
                    alias: string,
                    resource: IResource,
                    resourceObj: {
                        control: TemplateControl;
                        resource: IResource;
                    },
                    cache = TemplateControl.__resourceCache[control.uid];

                if (isNull(cache)) {
                    cache = TemplateControl.__resourceCache[control.uid] = {};
                }

                resources = resources || {};

                for (var i = 0; i < length; ++i) {
                    alias = aliases[i];

                    if (alias[0] === '@') {
                        alias = alias.slice(1);
                    }

                    if (!isNull(resources[alias])) {
                        continue;
                    } else if (!isNull(cache[alias])) {
                        var resourceControl = cache[alias].control,
                            controlResources = resourceControl.resources;

                        if (isNull(controlResources)) {
                            resourceObj = TemplateControl.findResource(control, alias);
                        } else {
                            resourceObj = {
                                control: resourceControl,
                                resource: controlResources[alias]
                            };
                        }
                    } else {
                        resourceObj = TemplateControl.findResource(control, alias);
                    }

                    if (isNull(resourceObj)) {
                        var _Exception: IExceptionStatic = TemplateControl._Exception;
                        _Exception.warn('Attempting to use a resource that is not defined.', _Exception.CONTEXT);
                        continue;
                    }

                    cache[alias] = resourceObj;
                    resource = resourceObj.resource;
                    resources[alias] = isNull(resource) ? resource : resource.value;
                }

                return resources;
            }

            /**
             * Starts at a control and searches up its parent chain for a particular resource alias. 
             * If the resource is found, it will be returned along with the control instance on which
             * the resource was found.
             * @param {plat.ui.TemplateControl} control The control on which to start searching for the resource alias.
             * @param {string} alias The alias to search for.
             * found resource along with its corresponding control.
             */
            static findResource(control: TemplateControl, alias: string): { resource: IResource; control: TemplateControl; } {
                var resource: IResource;

                if (isNull(control) || isNull(control.resources) || !isString(alias) || isEmpty(alias)) {
                    return null;
                }

                if (alias[0] === '@') {
                    alias = alias.slice(1);
                }

                if (alias === __ROOT_CONTEXT_RESOURCE) {
                    control = Control.getRootControl(control);
                    return {
                        resource: (<any>control.resources)[alias],
                        control: control
                    };
                } else if (alias === __CONTEXT_RESOURCE || alias === __CONTROL_RESOURCE) {
                    return {
                        resource: ((<any>control.resources) || {})[alias],
                        control: control
                    };
                }

                while (!isNull(control)) {
                    resource = ((<any>control.resources) || {})[alias];
                    if (!isNull(resource)) {
                        return {
                            resource: resource,
                            control: control
                        };
                    }
                    control = control.parent;
                }
            }

            /**
             * Recursively disposes a control and its children.
             * @param {plat.ui.TemplateControl} control A control to dispose.
             */
            static dispose(control: TemplateControl): void {
                if (isNull(control)) {
                    return;
                }

                var uid = control.uid,
                    childControls = control.controls,
                    controls = (childControls && childControls.slice(0)),
                    ContextManager = Control._ContextManager,
                    define = ContextManager.defineProperty;

                if (!isNull(controls)) {
                    var length = controls.length - 1;

                    for (var i = length; i >= 0; --i) {
                        Control.dispose(controls[i]);
                    }
                }

                if (isFunction(control.dispose)) {
                    control.dispose();
                }

                Control.removeEventListeners(control);
                TemplateControl.removeElement(control);

                TemplateControl._ResourcesFactory.dispose(control);
                TemplateControl._BindableTemplatesFactory.dispose(control);

                deleteProperty(TemplateControl.__resourceCache, control.uid);

                ContextManager.dispose(control);
                events.EventManager.dispose(control.uid);

                TemplateControl._managerCache.remove(uid);
                Control.removeParent(control);

                define(control, __CONTEXT, null, true, true, true);
                define(control, __RESOURCES, null, true, true, true);
                control.attributes = null;
                control.bindableTemplates = null;
                control.controls = [];
                control.root = null;
                control.innerTemplate = null;
            }

            /**
             * Loads the control tree depth first (visit children, then visit self).
             * @param {plat.ui.TemplateControl} control The control serving as the root control to load.
             */
            static loadControl(control: TemplateControl): void {
                var children = control.controls,
                    length = children.length,
                    child: TemplateControl;

                for (var i = 0; i < length; ++i) {
                    child = <TemplateControl>children[i];
                    if (!isNull(child.controls)) {
                        TemplateControl.loadControl(child);
                    } else {
                        child.loaded();
                    }
                }

                control.loaded();
            }

            /**
             * Notifies a control that its context has been changed by 
             * calling the "control.contextChanged" method if it exists.
             * @param {plat.ui.TemplateControl} control The control whose context changed.
             * @param {any} newValue The new value of the control's context.
             * @param {any} oldValue The old value of the control's context.
             */
            static contextChanged(control: TemplateControl, newValue: any, oldValue: any): void {
                control.context = newValue;

                TemplateControl.setContextResources(control);

                if (isFunction(control.contextChanged)) {
                    control.contextChanged(newValue, oldValue);
                }
            }

            /**
             * Sets the 'context' resource value on a TemplateControl. If the control specifies 
             * hasOwnContext as true, the 'rootContext' resource value will be set.
             * @param {plat.ui.TemplateControl} control The control whose context resources will be set.
             */
            static setContextResources(control: TemplateControl): void {
                var value = control.context;

                if (isNull(control.resources)) {
                    control.resources = TemplateControl._ResourcesFactory.getInstance();
                    control.resources.initialize(control);
                }

                if (control.hasOwnContext) {
                    if (isNull((<any>control.resources).rootContext)) {
                        control.resources.add({
                            root: {
                                type: __OBSERVABLE_RESOURCE,
                                value: value
                            }
                        });
                    } else {
                        (<any>control.resources).rootContext.value = value;
                    }
                }

                if (isNull((<any>control.resources).context)) {
                    control.resources.add({
                        context: {
                            type: __OBSERVABLE_RESOURCE,
                            value: value
                        }
                    });

                    return;
                }

                (<any>control.resources).context.value = value;
            }

            /**
             * Completely removes a control's element from its parentNode. If the 
             * control implements replaceWith=null, All of its nodes between its 
             * startNode and endNode (inclusive) will be removed.
             * @param {plat.ui.TemplateControl} control The control whose element should be removed.
             */
            static removeElement(control: TemplateControl): void {
                if (isNull(control)) {
                    return;
                }

                var dom = control.dom,
                    element = control.element,
                    parentNode: Node;

                if (control.replaceWith === null ||
                control.replaceWith === '' ||
                isDocumentFragment(element)) {
                    dom.removeAll(control.startNode, control.endNode);
                    control.elementNodes = control.startNode = control.endNode = null;
                    return;
                } else if (isNull(element)) {
                    return;
                }

                parentNode = element.parentNode;

                if (!isNull(parentNode)) {
                    parentNode.removeChild(element);
                }

                control.element = null;
            }

            /**
             * Sets the absoluteContextPath read-only property on a control.
             * @param {plat.ui.TemplateControl} control The control on which to set the absoluteContextPath.
             * @param {string} path The path to set on the control.
             */
            static setAbsoluteContextPath(control: TemplateControl, path: string): void {
                Control._ContextManager.defineGetter(control, 'absoluteContextPath', path, false, true);
            }

            /**
             * Determines the template for a control by searching for a templateUrl, 
             * using the provided templateUrl, or serializing the control's templateString.
             * @param {plat.ui.TemplateControl} control The control whose template is being determined.
             * @param {string} templateUrl? The potential template URL to use to grab the template.
             */
            static determineTemplate(control: TemplateControl, templateUrl?: string): async.IThenable<DocumentFragment> {
                var template: any,
                    templateCache = TemplateControl._templateCache,
                    dom = control.dom,
                    Promise = TemplateControl._Promise;

                if (!isNull(templateUrl)) {
                    // do nothing
                } else if (!isNull(control.templateUrl)) {
                    templateUrl = control.templateUrl;
                } else if (!isNull(control.templateString)) {
                    var type = control.type;

                    return templateCache.read(type).catch((template: any) => {
                        if (isNull(template)) {
                            template = dom.serializeHtml(control.templateString);
                    }

                    return templateCache.put(type, template);
                    });
                } else {
                    return <any>Promise.reject(null);
                }

                return dom.getTemplate(templateUrl);
            }

            /**
             * Detaches a TemplateControl. Disposes its children, 
             * but does not dispose the TemplateControl.
             * @param {plat.ui.TemplateControl} control The control to be detached.
             */
            static detach(control: TemplateControl): void {
                if (isNull(control) || isNull(control.controls)) {
                    return;
                }

                var controls = control.controls.slice(0),
                    length = controls.length;

                for (var i = 0; i < length; ++i) {
                    Control.dispose(controls[i]);
                }

                Control.removeEventListeners(control);
                TemplateControl.removeElement(control);

                TemplateControl._ResourcesFactory.dispose(control, true);

                deleteProperty(TemplateControl.__resourceCache, control.uid);

                Control._ContextManager.dispose(control, true);
                events.EventManager.dispose(control.uid);

                TemplateControl._managerCache.remove(control.uid);
                Control.removeParent(control);

                control.controls = [];
                control.attributes = null;
            }

            /**
             * Returns a new instance of TemplateControl.
             */
            static getInstance(): TemplateControl {
                return acquire(TemplateControl);
            }

            /**
             * An object for quickly retrieving previously accessed resources.
             */
            private static __resourceCache: IObject<any> = {};

            /**
             * By default TemplateControls have a priority of 100.
             */
            priority = 100;

            /**
             * The context of an TemplateControl, used for inheritance and data-binding.
             */
            context: any = null;

            /**
             * The name of a TemplateControl if a Name 
             * control is involved.
             */
            name: string;

            /**
             * Specifies the absolute path from where the context was created to this Control's context.
             * Used by the ContextManager for maintaining context parity 
             * (e.g. 'context.childContextProperty.grandChildContextProperty').
             */
            absoluteContextPath: string = null;

            /**
             * Resources are used for providing aliases to use in markup expressions. They 
             * are particularly useful when trying to access properties outside of the 
             * current context, as well as reassigning context at any point in an app.
             * By default, every control has a resource for '@control' and '@context'.
             * IViewControl objects also have a resource for '@root' and '@rootContext', 
             * which is a reference to their root control and root context.
             * Resources can be created in HTML, or through the exposed control.resources 
             * object. If specified in HTML, they must be the first element child of the 
             * control upon which the resources will be placed. IViewControls that use a 
             * templateUrl can have resources as their first element in the templateUrl.
             * In the provided example, the resources can be accessed by using '@Cache' and '@testObj'.
             * The type of resource is denoted by the element name.
             * Only resources of type 'observable' will have data binding. The types of resources are:
             * function, injectable, observable, and object. Resources of type 'function' will have their
             * associated function context bound to the control that contains the resource.
             * When an alias is found in a markup expression, the framework will search up the control chain 
             * to find the alias on a control's resources. This first matching alias will be used.
             * <custom-control>
             *     <plat-resources>
             *         <injectable alias="Cache">_CacheFactory</injectable>
             *         <observable alias="testObj">
             *              { 
             *                  foo: 'foo', 
             *                  bar: 'bar', 
             *                  baz: 2 
             *              }
             *         </observable>
             *     </plat-resources>
             * </custom-control>
             */
            resources: Resources;

            /**
             * Flag indicating whether or not the TemplateControl defines the context property.
             */
            hasOwnContext: boolean = false;

            /**
             * A string representing the DOM template for this control. If this property is
             * defined on a TemplateControl then DOM will be created and put in the 
             * control's element prior to calling the 'setTemplate' method.
             */
            templateString: string;

            /**
             * A url containing a string representing the DOM template for this control. If this property is
             * defined on a TemplateControl then DOM will be created and put in the 
             * control's element prior to calling the 'setTemplate' method. This property takes 
             * precedence over templateString. In the event that both are defined, templateString
             * will be ignored.
             */
            templateUrl: string;

            /**
             * A DocumentFragment representing the innerHTML that existed when this control was instantiated.
             * This property will only contain the innerHTML when either a templateString or templateUrl is
             * defined. Its important to clone this property when injecting it somewhere, else its childNodes
             * will disappear.
             */
            innerTemplate: DocumentFragment;

            /**
             * An BindableTemplates object used for binding a data context to a template. 
             * This is an advanced function of a TemplateControl.
             */
            bindableTemplates: BindableTemplates;

            /**
             * An array of child controls. Any controls created by this control can be found in this array. The controls in
             * this array will have reference to this control in their parent property.
             */
            controls: Array<Control>;

            /**
             * A Node array for managing the TemplateControl's childNodes in the event that this control 
             * replaces its element. This property will only exist/be of use for a TemplateControl that 
             * implements the replaceWith property.
             */
            elementNodes: Array<Node>;

            /**
             * The first node in the TemplateControl's body. This property will be a Comment node when the 
             * control implements replaceWith = null, otherwise it will be null. This property allows an 
             * TemplateControl to add nodes to its body in the event that it replaces its element.
             */
            startNode: Node;

            /**
             * The last node in the TemplateControl's body. This property will be a Comment node when the 
             * control implements the replaceWith property, otherwise it will be null. This property allows a 
             * TemplateControl to add nodes to its body in the event that it replaces its element.
             */
            endNode: Node;

            /**
             * Allows a TemplateControl to either swap its element with another element (e.g. plat-select), 
             * or replace its element altogether. If null or empty string, the element will be removed from the DOM, and the 
             * childNodes of the element will be in its place. In addition, when the element is placed startNode and endNode Comments 
             * are created, and the childNodes are added to the elementNodes property on the control. The replaceWith 
             * property can be any property that works with document.createElement(). If the control's element had 
             * attributes (as well as attribute Controls), those attributes will be carried to the swapped element. The default 
             * replaceWith is 'any,' meaning it will default to a 'div' in the case that the control type is used as the 
             * element's nodename (e.g. <plat-foreach plat-context="..."></plat-foreach>), but will maintain whatever element type 
             * is used otherwise (e.g. <tr plat-control="plat-foreach" plat-context="..."></tr>).
             */
            replaceWith = 'any';

            /**
             * Set to the root ancestor control from which this control inherits its context. This value
             * can be equal to this control.
             */
            root: TemplateControl;

            /**
             * This event is fired when an TemplateControl's context property 
             * is changed by an ancestor control.
             * @param {any} newValue? The new value of the context.
             * @param {any} oldValue? The old value of the context.
             */
            contextChanged(newValue?: any, oldValue?: any): void { }

            /**
             * A method called for TemplateControls to set their template. 
             * During this method a control should ready its template for compilation. Whatever is in the control's 
             * element (or elementNodes if replaceWith is implemented) after this method's execution will be compiled 
             * and appear on the DOM.
             */
            setTemplate(): void { }

            /**
             * Finds the identifier string associated with the given context object. The string returned
             * is the path from a control's context.
             * @param {any} context The object/primitive to locate on the control's context.
             *     // returns 'title.font'
             *     this.getIdentifier(this.context.title.font);
             */
            getIdentifier(context: any): string {
                var queue: Array<{ context: any; identifier: string; }> = [],
                    dataContext = this.context,
                    found = false,
                    obj = {
                        context: dataContext,
                        identifier: ''
                    },
                    context: any,
                    length: number,
                    keys: Array<string>,
                    key: string,
                    newObj: any;

                if (dataContext === context) {
                    found = true;
                } else {
                    queue.push(obj);
                }

                while (queue.length > 0) {
                    obj = queue.pop();
                    context = obj.context;

                    if (!isObject(context) || isEmpty(context)) {
                        continue;
                    }

                    keys = Object.keys(context);
                    length = keys.length;

                    for (var i = 0; i < length; ++i) {
                        key = keys[i];
                        newObj = context[key];

                        if (newObj === context) {
                            return (obj.identifier !== '') ? (obj.identifier + '.' + key) : key;
                        }

                        queue.push({
                            context: newObj,
                            identifier: (obj.identifier !== '') ? (obj.identifier + '.' + key) : key
                        });
                    }
                }
                if (!found) {
                    return;
                }

                return obj.identifier;
            }

            /**
             * Finds the absolute identifier string associated with the given context object. The string returned
             * is the path from a control's root ancestor's context.
             * @param {any} context The object/primitive to locate on the root control's context.
             */
            getAbsoluteIdentifier(context: any): string {
                if (context === this.context) {
                    return this.absoluteContextPath;
                }

                var localIdentifier = this.getIdentifier(context);
                if (isNull(localIdentifier)) {
                    return localIdentifier;
                }

                return this.absoluteContextPath + '.' + localIdentifier;
            }

            /**
             * Finds the associated resources and builds a context object containing
             * the values.
             * @param {Array<string>} aliases An array of aliases to search for.
             * @param {IObject<any>} resources? An optional resources object to extend, 
             * if no resources object is passed in a new one will be created.
             */
            getResources(aliases: Array<string>, resources?: IObject<any>): IObject<any> {
                return TemplateControl.getResources(this, aliases, resources);
            }

            /**
             * Starts at a control and searches up its parent chain for a particular resource alias. 
             * If the resource is found, it will be returned along with the control instance on which
             * the resource was found.
             * @param {string} alias The alias to search for.
             * found resource along with its corresponding control.
             */
            findResource(alias: string): { resource: IResource; control: TemplateControl; } {
                return TemplateControl.findResource(this, alias);
            }

            /**
             * Evaluates an expression string, using the input context or control.context.
             * @param {string} expression The expression string to evaluate.
             * @param {any} context? An optional context with which to parse. If 
             * no context is specified, the control.context will be used.
             */
            evaluateExpression(expression: string, context?: any): any;
            /**
             * Evaluates an expression string, using the input context or control.context.
             * @param {plat.expressions.IParsedExpression} expression The previously parsed expression to evaluate.
             * @param {any} context? An optional context with which to parse. If 
             * no context is specified, the control.context will be used.
             */
            evaluateExpression(expression: expressions.IParsedExpression, context?: any): any;
            evaluateExpression(expression: any, context?: any): any {
                return TemplateControl.evaluateExpression(expression, this, context);
            }
        }

        /**
         * The Type for referencing the '_TemplateControlFactory' injectable as a dependency.
         */
        export function ITemplateControlFactory(
            _ResourcesFactory?: IResourcesFactory,
            _BindableTemplatesFactory?: IBindableTemplatesFactory,
            _managerCache?: storage.Cache<processing.ElementManager>,
            _templateCache?: storage.TemplateCache,
            _parser?: expressions.Parser,
            _http?: async.Http,
            _Promise?: async.IPromise,
            _Exception?: IExceptionStatic): ITemplateControlFactory {
            (<any>TemplateControl)._ResourcesFactory = _ResourcesFactory;
            (<any>TemplateControl)._BindableTemplatesFactory = _BindableTemplatesFactory;
            (<any>TemplateControl)._managerCache = _managerCache;
            (<any>TemplateControl)._templateCache = _templateCache;
            (<any>TemplateControl)._parser = _parser;
            (<any>TemplateControl)._http = _http;
            (<any>TemplateControl)._Promise = _Promise;
            (<any>TemplateControl)._Exception = _Exception;
            return TemplateControl;
        }

        register.injectable(__TemplateControlFactory, ITemplateControlFactory, [
            __ResourcesFactory,
            __BindableTemplatesFactory,
            __ManagerCache,
            __TemplateCache,
            __Parser,
            __Http,
            __Promise,
            __ExceptionStatic
        ], __FACTORY);

        /**
         * Creates and manages TemplateControls.
         */
        export interface ITemplateControlFactory {
            /**
             * Evaluates an expression string with a given control and optional control's context and aliases.
             * @param {string} expression The expression string (e.g. 'foo + foo').
             * @param {plat.ui.TemplateControl} control? The control used for evaluation context.
             * @param {IObject<any>} aliases? An optional alias object containing resource alias values
             */
            evaluateExpression(expression: string, control?: TemplateControl, aliases?: IObject<any>): any;
            /**
             * Evaluates an expression string with a given control and optional control's context and aliases.
             * @param {plat.expressions.IParsedExpression} expression A parsed expression object created using the 
             * plat.expressions.Parser injectable.
             * @param {plat.ui.TemplateControl} control? The control used for evaluation context.
             * @param {IObject<any>} aliases? An optional alias object containing resource alias values
             */
            evaluateExpression(expression: expressions.IParsedExpression, control?: TemplateControl, aliases?: IObject<any>): any;

            /**
             * Given a control and Array of aliases, finds the associated resources and builds a context object containing
             * the values. Returns the object.
             * @param {plat.ui.TemplateControl} control The control used as the starting point for finding resources.
             * @param {Array<string>} aliases An array of aliases to search for.
             * @param {IObject<any>} resources? An optional resources object to extend, 
             * if no resources object is passed in a new one will be created.
             */
            getResources(control: TemplateControl, aliases: Array<string>, resources?: IObject<any>): IObject<any>;

            /**
             * Starts at a control and searches up its parent chain for a particular resource alias. 
             * If the resource is found, it will be returned along with the control instance on which
             * the resource was found.
             * @param {plat.ui.TemplateControl} control The control on which to start searching for the resource alias.
             * @param {string} alias The alias to search for.
             * found resource along with its corresponding control.
             */
            findResource(control: TemplateControl, alias: string): { resource: IResource; control: TemplateControl; };

            /**
             * Recursively disposes a control and its children.
             * @param {plat.ui.TemplateControl} control A control to dispose.
             */
            dispose(control: TemplateControl): void;

            /**
             * Loads the control tree depth first (visit children, then visit self).
             * @param {plat.ui.TemplateControl} control The control serving as the root control to load.
             */
            loadControl(control: TemplateControl): void;

            /**
             * Notifies a control that its context has been changed by 
             * calling the "control.contextChanged" method if it exists.
             * @param {plat.ui.TemplateControl} control The control whose context changed.
             * @param {any} newValue The new value of the control's context.
             * @param {any} oldValue The old value of the control's context.
             */
            contextChanged(control: TemplateControl, newValue: any, oldValue: any): void;

            /**
             * Sets the 'context' resource value on a TemplateControl. If the control specifies 
             * hasOwnContext as true, the 'rootContext' resource value will be set.
             * @param {plat.ui.TemplateControl} control The control whose context resources will be set.
             */
            setContextResources(control: TemplateControl): void;

            /**
             * Completely removes a control's element from its parentNode. If the 
             * control implements replaceWith=null, All of its nodes between its 
             * startNode and endNode (inclusive) will be removed.
             * @param {plat.ui.TemplateControl} control The control whose element should be removed.
             */
            removeElement(control: TemplateControl): void;

            /**
             * Sets the absoluteContextPath read-only property on a control.
             * @param {plat.ui.TemplateControl} control The control on which to set the absoluteContextPath.
             * @param {string} path The path to set on the control.
             */
            setAbsoluteContextPath(control: TemplateControl, path: string): void;

            /**
             * Determines the template for a control by searching for a templateUrl, 
             * using the provided templateUrl, or serializing the control's templateString.
             * @param {plat.ui.TemplateControl} control The control whose template is being determined.
             * @param {string} templateUrl? The potential template URL to use to grab the template.
             */
            determineTemplate(control: TemplateControl, templateUrl?: string): async.IThenable<DocumentFragment>;

            /**
             * Detaches a TemplateControl. Disposes its children, 
             * but does not dispose the TemplateControl.
             * @param {plat.ui.TemplateControl} control The control to be detached.
             */
            detach(control: TemplateControl): void;

            /**
             * Returns a new instance of TemplateControl.
             */
            getInstance(): TemplateControl;
        }

        /**
         * An extended TemplateControl that allows for the binding of a value to 
         * another listening control (e.g. plat-bind control).
         */
        export class BindablePropertyControl extends TemplateControl {
            /**
             * The set of functions added externally that listens 
             * for property changes.
             */
            protected _listeners: Array<(newValue: any, oldValue?: any) => void> = [];

            /**
             * Adds a listener to be called when the bindable property changes.
             * @param {plat.IPropertyChangedListener} listener The function that acts as a listener.
             */
            observeProperty(listener: (newValue: any, oldValue?: any) => void): IRemoveListener {
                var listeners = this._listeners;

                listeners.push(listener);

                return () => {
                    var index = listeners.indexOf(listener);
                    if (index === -1) {
                        return;
                    }

                    listeners.splice(index, 1);
                };
            }

            /**
             * A function that lets this control know when the context's value of the bindable 
             * property has changed.
             * @param {any} newValue The new value of the bindable property.
             * @param {any} oldValue? The old value of the bindable property.
             * @param {boolean} firstTime? A boolean signifying whether this is the first set of the property.
             */
            setProperty(newValue: any, oldValue?: any, firstTime?: boolean): void { }
        
            /**
             * A function that signifies when this control's bindable property has changed.
             * @param {any} newValue The new value of the property after the change.
             * @param {any} oldValue? The old value of the property prior to the change.
             */
            propertyChanged(newValue: any, oldValue?: any): void {
                if (newValue === oldValue) {
                    return;
                }

                var listeners = this._listeners,
                    length = listeners.length;

                for (var i = 0; i < length; ++i) {
                    listeners[i](newValue, oldValue);
                }
            }
        
            /**
             * Removes references to the listeners 
             * defined externally.
             */
            dispose(): void {
                this._listeners = [];
            }
        }



        /**
         * A control used in a Viewport for simulated page navigation. The 
         * control has navigation events that are called when navigating to and from the control.
         */
        export class ViewControl extends TemplateControl implements ISupportNavigation {
            /**
             * Recursively disposes a ViewControl and its children.
             * @param {plat.ui.ViewControl} control A control to dispose.
             */
            static dispose(control: TemplateControl): void {
                TemplateControl.dispose(control);
            }

            /**
             * Returns a new instance of a ViewControl.
             */
            static getInstance(): ViewControl {
                return acquire(ViewControl);
            }

            /**
             * Specifies that this control will have its own context, and it should not inherit a context.
             */
            hasOwnContext: boolean = true;

            /**
             * Initializes any events that you might use in the ViewControl. Automatically subscribes to 'backButtonPressed' when 
             * you implement a backButtonPressed function.
             */
            constructor() {
                super();
            }

            navigator: routing.Navigator;

            canNavigateFrom(): any { }

            canNavigateTo(parameters: any, query: any): any { }

            navigatingFrom(): any { }

            navigatedTo(parameters: any, query: any): any { }
        }

        export interface ISupportNavigation {
            navigator?: routing.Navigator;

            canNavigateFrom(): any;
            canNavigateTo (parameters: any, query: any): any;

            navigatingFrom (): any;
            navigatedTo (parameters: any, query: any): any;
        }

        /**
         * An extensible class dealing with the creation, deletion, and modification 
         * of DOM.
         */
        export class Dom {
            protected static _inject: any = {
                _domEvents: __DomEvents
            };

            /**
             * Reference to the DomEvents injectable.
             */
            protected _domEvents: ui.DomEvents = acquire(__DomEvents);

            /**
             * Adds an event listener of the specified type to the specified element.
             * @param {Node} element The element to add the event listener to.
             * @param {string} type The type of event to listen to.
             * @param {plat.ui.IGestureListener} listener The listener to fire when the event occurs.
             * @param {boolean} useCapture? Whether to fire the event on the capture or the bubble phase 
             * of event propagation.
             */
            addEventListener(element: Node, type: string, listener: ui.IGestureListener, useCapture?: boolean): IRemoveListener;
            /**
             * Adds an event listener of the specified type to the specified element.
             * @param {Window} element The window object.
             * @param {string} type The type of event to listen to.
             * @param {plat.ui.IGestureListener} listener The listener to fire when the event occurs.
             * @param {boolean} useCapture? Whether to fire the event on the capture or the bubble phase 
             * of event propagation.
             */
            addEventListener(element: Window, type: string, listener: ui.IGestureListener, useCapture?: boolean): IRemoveListener;
            /**
             * Adds an event listener of the specified type to the specified element.
             * @param {Node} element The element to add the event listener to.
             * @param {string} type The type of event to listen to.
             * @param {EventListener} listener The listener to fire when the event occurs.
             * @param {boolean} useCapture? Whether to fire the event on the capture or the bubble phase 
             * of event propagation.
             */
            addEventListener(element: Node, type: string, listener: EventListener, useCapture?: boolean): IRemoveListener;
            /**
             * Adds an event listener of the specified type to the specified element.
             * @param {Window} element The window object.
             * @param {string} type The type of event to listen to.
             * @param {EventListener} listener The listener to fire when the event occurs.
             * @param {boolean} useCapture? Whether to fire the event on the capture or the bubble phase 
             * of event propagation.
             */
            addEventListener(element: Window, type: string, listener: EventListener, useCapture?: boolean): IRemoveListener;
            addEventListener(element: any, type: string, listener: ui.IGestureListener, useCapture?: boolean): IRemoveListener {
                return this._domEvents.addEventListener(element, type, listener, useCapture);
            }

            /**
             * Takes a Node Array and creates a DocumentFragment and adds the nodes to the Fragment.
             * @param {Array<Node>} nodeList A Node Array to be appended to the DocumentFragment
             */
            appendChildren(nodeList: Array<Node>): DocumentFragment;
            /**
             * Takes a NodeList and creates a DocumentFragment and adds the NodeList to the Fragment.
             * @param {NodeList} nodeList A NodeList to be appended to the DocumentFragment
             */
            appendChildren(nodeList: NodeList): DocumentFragment;
            /**
             * Takes a Node Array and either adds it to the passed in Node,
             * or creates a DocumentFragment and adds the nodes to the
             * Fragment.
             * @param {NodeList} nodeList A NodeList to be appended to the root/DocumentFragment.
             * @param {Node} root? An optional Node to append the nodeList.
             */
            appendChildren(nodeList: Array<Node>, root?: Node): Node;
            /**
             * Takes a NodeList and either adds it to the passed in Node,
             * or creates a DocumentFragment and adds the NodeList to the
             * Fragment.
             * @param {NodeList} nodeList A NodeList to be appended to the root/DocumentFragment.
             * @param {Node} root? An optional Node to append the nodeList.
             */
            appendChildren(nodeList: NodeList, root?: Node): Node;
            appendChildren(nodeList: any, root?: Node): any {
                return appendChildren(nodeList, root);
            }

            /**
             * Clears a DOM Node by removing all of its childNodes.
             * @param {Node} node The DOM Node to clear.
             */
            clearNode(node: Node): void {
                return clearNode(node);
            }

            /**
             * Removes all the Nodes in the Array from the parent Node.
             * @param {Array<Node>} nodeList The Node Array to remove from the parent Node.
             * @param {Node} parent? The parent Node used to remove the nodeList.
             */
            clearNodeBlock(nodeList: Array<Node>, parent?: Node): void;
            /**
             * Removes all the Nodes in the NodeList from the parent Node.
             * @param {NodeList} nodeList The NodeList to remove from the parent Node.
             * @param {Node} parent? The parent Node used to remove the nodeList.
             */
            clearNodeBlock(nodeList: NodeList, parent?: Node): void;
            clearNodeBlock(nodeList: any, parent?: Node): void {
                return clearNodeBlock(nodeList, parent);
            }

            /**
             * Sets the innerHTML of a Node. Can take in a Node rather than an Element
             * because it does not use innerHTML on the passed-in Node (it appends its
             * childNodes).
             * @param {Node} node The Node to set innerHTML.
             * @param {string} html HTML string to be put inside the node.
             */
            setInnerHtml(node: Node, html: string): Node {
                return setInnerHtml(node, html);
            }

            /**
             * Inserts a list of Nodes before the designated end Node.
             * @param {Node} parent The parent node into which to insert nodes.
             * @param {Array<Node>} nodes The Node Array to insert into the parent.
             * @param {Node} endNode? An optional endNode to use to insert nodes.
             */
            insertBefore(parent: Node, nodes: Array<Node>, endNode?: Node): Array<Node>;
            /**
             * Inserts a list of Nodes before the designated end Node.
             * @param {Node} parent The parent node into which to insert nodes.
             * @param {NodeList} nodes The NodeList to insert into the parent.
             * @param {Node} endNode? An optional endNode to use to insert nodes.
             */
            insertBefore(parent: Node, nodes: NodeList, endNode?: Node): Array<Node>;
            /**
             * Inserts a DocumentFragment before the designated end Node.
             * @param {Node} parent The parent node into which to insert nodes.
             * @param {DocumentFragment} fragment The DocumentFragment to insert into the parent.
             * @param {Node} endNode? An optional endNode to use to insert nodes.
             */
            insertBefore(parent: Node, fragment: DocumentFragment, endNode?: Node): Array<Node>;
            /**
             * Inserts a Node before the designated end Node.
             * @param {Node} parent The parent node into which to insert nodes.
             * @param {Node} node The Node to insert into the parent.
             * @param {Node} endNode? An optional endNode to use to insert nodes.
             */
            insertBefore(parent: Node, node: Node, endNode?: Node): Array<Node>;
            insertBefore(parent: Node, nodes: any, endNode?: Node): Array<Node> {
                return insertBefore(parent, nodes, endNode);
            }

            /**
             * Takes the child nodes of the given node and places them above the node
             * in the DOM. Then removes the given node.
             * @param {Node} node The Node to replace.
             * given node.
             */
            replace(node: Node): Array<Node> {
                return replace(node);
            }

            /**
             * Takes the childNodes of the given element and appends them to the newElement.
             * Then replaces the element in its parent's tree with the newElement.
             * @param {Node} node The Node to remove from its parent.
             * @param {HTMLElement} newElement The HTMLElement to populate with childNodes and add to the
             * element's parent.
             */
            replaceWith(node: Node, newElement: HTMLElement): HTMLElement;
            /**
             * Takes the childNodes of the given element and appends them to the newElement.
             * Then replaces the element in its parent's tree with the newElement.
             * @param {Node} node The Node to remove from its parent.
             * @param {Element} newElement The Element to populate with childNodes and add to the
             * element's parent.
             */
            replaceWith(node: Node, newElement: Element): Element;
            /**
             * Takes the childNodes of the given element and appends them to the newElement.
             * Then replaces the element in its parent's tree with the newElement.
             * @param {Node} node The Node to remove from its parent.
             * @param {Node} newElement The Node to populate with childNodes and add to the
             * element's parent.
             */
            replaceWith(node: Node, newNode: Node): Node;
            replaceWith(node: any, newNode: any): any {
                return replaceWith(node, newNode);
            }

            /**
             * Takes in a string representing innerHTML and returns a DocumentFragment
             * containing the serialized DOM.
             * @param {string} html The DOM string.
             */
            serializeHtml(html: string): DocumentFragment {
                return serializeHtml(html);
            }

            /**
             * Takes in a startNode and endNode, each having the same parentNode.
             * Removes every node in between the startNode.  If endNode is not specified,
             * DOM will be removed until the end of the parentNode's children.
             * @param {Node} startNode The starting node, which will not be removed.
             * @param {Node} endNode The ending node, which will not be removed.
             */
            removeBetween(startNode: Node, endNode?: Node): void {
                return removeBetween(startNode, endNode);
            }

            /**
             * Takes in a startNode and endNode, each having the same parentNode.
             * Removes every node in between the startNode and endNode as well as
             * the startNode and the endNode.  If endNode is not specified, DOM
             * will be removed until the end of the parentNode's children.
             * @param {Node} startNode The first node to remove.
             * @param {Node} endNode The last node to remove.
             */
            removeAll(startNode: Node, endNode?: Node): void {
                return removeAll(startNode, endNode);
            }

            /**
             * Adds a class or multiple classes to the specified element.
             * @param {Element} element The element to which the class name is being added.
             * @param {string} className The class name or space delimited class names to add to the element.
             */
            addClass(element: Element, className: string): void {
                return addClass(<HTMLElement>element, className);
            }

            /**
             * Removes a class or multiple classes from the specified element.
             * @param {Element} element The element from which the class name is being removed.
             * @param {string} className The class name or space delimited class names to remove from the element.
             */
            removeClass(element: Element, className: string): void {
                return removeClass(<HTMLElement>element, className);
            }

            /**
             * Toggles a class or multiple classes from the specified element.
             * @param {Element} element The element on which the class name is being toggled.
             * @param {string} className The class name or space delimited class names to toggle on the element.
             */
            toggleClass(element: Element, className: string): void {
                return toggleClass(<HTMLElement>element, className);
            }

            /**
             * Replaces a single class with another class.
             * @param {Element} element The element on which the class name is being toggled.
             * @param {string} oldClass The class name being replaced.
             * @param {string} newClass The class name doing the replacing.
             */
            replaceClass(element: Element, oldClass: string, newClass: string): void {
                return replaceClass(<HTMLElement>element, oldClass, newClass);
            }

            /**
             * Returns whether or not an element has a particular class or classes assigned to it.
             * @param {Element} element The element on which the class name is being checked.
             * @param {string} className The class name or space delimited class names to check on the element.
             * specified in the className argument.
             */
            hasClass(element: Element, className: string): boolean {
                return hasClass(<HTMLElement>element, className);
            }

            /**
             * Retrieves and serializes HTML from an HTML template file using ajax. Will facilitate caching the template 
             * as well.
             * @param {string} templateUrl The url where the HTML template is stored.
             * DocumentFragment.
             */
            getTemplate(templateUrl: string): async.IThenable<DocumentFragment> {
                return getTemplate(templateUrl);
            }
        }

        register.injectable(__Dom, Dom);

        /**
         * An object describing custom element properties added to elements for hashing purposes.
         */
        export interface ICustomElementProperty extends IObject<string> {
            /**
             * A unique id given to the element if it's registered for a custom DOM event.
             */
            domEvent?: string;

            /**
             * A unique id given to the element if it's registered for an animation.
             */
            animation?: string;
        }

        /**
         * An interface for describing an Element with an ICustomElementProperty attached. Primarily 
         * used for element interaction with DomEvents and the 
         * Animator.
         */
        export interface ICustomElement extends HTMLElement {
            /**
             * The PlatypusTS custom element property.
             */
            __plat: ICustomElementProperty;
        }

        /**
         * The class which provides a way for TemplateControls to bind a template 
         * to a context. Useful for narrowing context without needing another 
         * TemplateControl. In addition, this object provides a performance increase because 
         * it will only compile the template once. This object is also useful when a 
         * TemplateControls expects multiple configuration templates in its innerHTML. It can 
         * separate those templates and reuse them accordingly.
         */
        export class BindableTemplates {
            /**
             * Creates a new instance of BindableTemplates and returns it. If a BindableTemplates is 
             * passed in, it will use the properties on the original BindableTemplates.
             * @param {plat.ui.TemplateControl} control The TemplateControl 
             * containing the new BindableTemplates object, used for data 
             * context inheritance for templates.
             * @param {plat.ui.BindableTemplates} original? An optional BindableTemplates 
             * object to copy.
             */
            static create(control: TemplateControl, original?: BindableTemplates): BindableTemplates;
            /**
             * Creates a new instance of BindableTemplates and returns it. If a BindableTemplates is 
             * passed in, it will use the properties on the original BindableTemplates.
             * @param {plat.ui.TemplateControl} control The TemplateControl 
             * containing the new BindableTemplates object, used for data 
             * context inheritance for templates.
             * @param {plat.ui.BindableTemplates} original? An optional BindableTemplates 
             * object to copy.
             */
            static create(control: TemplateControl, original?: BindableTemplates): BindableTemplates {
                var bindableTemplates = new BindableTemplates();
                bindableTemplates.control = control;

                if (!isNull(original)) {
                    bindableTemplates.templates = original.templates;
                    bindableTemplates.cache = original.cache;
                }

                return bindableTemplates;
            }

            /**
             * Clears the memory being held by control's bindableTemplates.
             * @param {plat.ui.TemplateControl} control The control whose bindableTemplates will be disposed.
             */
            static dispose(control: TemplateControl): void {
                if (isNull(control)) {
                    return;
                }
                var instance = control.bindableTemplates;

                if (isNull(instance) || !isFunction(instance.dispose)) {
                    return;
                }

                instance.dispose();
            }

            /**
             * Determines whether or not a control was created using bindableTemplates.
             * @param {plat.ui.TemplateControl} control The potential bound control.
             */
            static isBoundControl(control: TemplateControl): boolean {
                if (isNull(control)) {
                    return false;
                }

                var parent = control.parent;
                if (isNull(parent)) {
                    return false;
                }

                return control.type.indexOf(parent.type + __BOUND_PREFIX) === 0;
            }

            /**
             * Reference to the IResourcesFactory injectable.
             */
            protected _ResourcesFactory: IResourcesFactory = acquire(__ResourcesFactory);

            /**
             * Reference to the ITemplateControlFactory injectable.
             */
            protected _TemplateControlFactory: ITemplateControlFactory = acquire(__TemplateControlFactory);

            /**
             * Reference to the IPromise injectable.
             */
            protected _Promise: async.IPromise = acquire(__Promise);

            /**
             * Reference to a cache injectable that stores ElementManagers.
             */
            protected _managerCache: storage.Cache<processing.ElementManager> = acquire(__ManagerCache);

            /**
             * Reference to the Document injectable.
             */
            protected _document: Document = acquire(__Document);

            /**
             * Reference to the IElementManagerFactory injectable.
             */
            protected _ElementManagerFactory: processing.IElementManagerFactory = acquire(__ElementManagerFactory);

            /**
             * Reference to the IExceptionStatic injectable.
             */
            protected _Exception: IExceptionStatic = acquire(__ExceptionStatic);

            /**
             * The control containing this BindableTemplates object.
             */
            control: TemplateControl;
            /**
             * Stores promises that resolve to all the compiled templates for this object, ready to be bound to a data context. 
             * All created templates are DocumentFragments, allowing an TemplateControl to
             * easily insert the template into the DOM (without iterating over childNodes).
             */
            templates: IObject<async.IThenable<DocumentFragment>> = {};

            /**
             * A keyed cache of ElementManagers that represent the roots of compiled templates 
             * created by this instance.
             */
            cache: IObject<processing.ElementManager> = {};

            /**
             * A collection of all the controls created while compiling an added template. Useful during disposal.
             */
            private __compiledControls: Array<TemplateControl> = [];

            /**
             * Method for linking a compiled template to a data context and returning a clone of the template, 
             * with all new Controls created if the template contains controls. If no data context 
             * is specified, it will be inherited.
             * @param {string} key The key used to retrieve the template.
             * @param {string} relativeIdentifier? The identifier string relative to this control's context
             * (e.g. 'foo.bar.baz' would signify the object this.context.foo.bar.baz). This is the 
             * most efficient way of specifying context, else the framework has to search for the 
             * object.
             * @param {plat.IObject<plat.IResource>} resources? An object used as the resources for any top-level 
             * controls created in the template.
             * ready to return.
             */
            bind(key: string, relativeIdentifier?: string, resources?: IObject<IResource>): async.IThenable<DocumentFragment>;
            /**
             * Method for linking a compiled template to a data context and returning a clone of the template, 
             * with all new Controls created if the template contains controls. If no data context 
             * is specified, it will be inherited.
             * @param {string} key The key used to retrieve the template.
             * @param {number} relativeIdentifier? The identifier number relative to this control's context
             * (e.g. '1' would signify the object this.context[1]). Only necessary when context is an array.
             * @param {plat.IObject<plat.IResource>} resources? An object used as the resources for any top-level 
             * controls created in the template.
             * ready to return.
             */
            bind(key: string, relativeIdentifier?: number, resources?: IObject<IResource>): async.IThenable<DocumentFragment>;
            bind(key: any, relativeIdentifier?: any, resources?: IObject<IResource>): async.IThenable<DocumentFragment> {
                return this._bind(key, relativeIdentifier, resources);
            }

            /**
             * Adds a template to this object. The template will be stored with the key,
             * and it will be transformed into a DocumentFragment.
             * @param {string} key The key used to store the template.
             * @param {Element} template An Element representing the DOM template.
             */
            add(key: string, template: Element): void;
            /**
             * Adds a template to this object. The template will be stored with the key,
             * and it will be transformed into a DocumentFragment.
             * @param {string} key The key used to store the template.
             * @param {Array<Node>} template A node Array representing the DOM template.
             */
            add(key: string, template: Array<Node>): void;
            /**
             * Adds a template to this object. The template will be stored with the key,
             * and it will be transformed into a DocumentFragment.
             * @param {string} key The key used to store the template.
             * @param {NodeList} template A NodeList representing the DOM template.
             */
            add(key: string, template: NodeList): void;
            /**
             * Adds a template to this object. The template will be stored with the key,
             * and it will be transformed into a DocumentFragment.
             * @param {string} key The key used to store the template.
             * @param {DocumentFragment} template A DocumentFragment representing the DOM template.
             */
            add(key: string, template: DocumentFragment): void;
            /**
             * Adds a template to this object. The template will be stored with the key,
             * and it will be transformed into a DocumentFragment.
             * @param {string} key The key used to store the template.
             * @param {Node} template A Node representing the DOM template.
             */
            add(key: string, template: Node): void;
            add(key: string, template: any): void {
                if (isNull(template)) {
                    return;
                }

                if (isDocumentFragment(template)) {
                    this._compile(key, template);
                    return;
                }

                var fragment = this._document.createDocumentFragment();

                if (isNode(template)) {
                    fragment.appendChild(template);
                } else if (isArrayLike(template)) {
                    appendChildren(template, fragment);
                } else {
                    return;
                }

                this._compile(key, fragment);
            }

            /**
             * Replaces the bound TemplateControl in the child control Array 
             * specified by the index with another bound control generated by the template key, relative context 
             * identifier, and resources.
             * @param {number} index The index of the bound TemplateControl 
             * in the child control Array to replace.
             * @param {string} key The key used to retrieve the template.
             * @param {string} relativeIdentifier? The identifier string relative to this control's context
             * (e.g. 'foo.bar.baz' would signify the object this.context.foo.bar.baz). This is the 
             * most efficient way of specifying context, else the framework has to search for the 
             * object.
             * @param {plat.IObject<plat.IResource>} resources? An object used as the resources for any top-level 
             * controls created in the template.
             * been replaced. It resolves with an Array containing the newly added nodes.
             */
            replace(index: number, key: string, relativeIdentifier?: string, resources?: IObject<IResource>): async.IThenable<Array<Node>>;
            /**
             * Replaces the bound TemplateControl in the child control Array 
             * specified by the index with another bound control generated by the template key, relative context 
             * identifier, and resources.
             * @param {number} index The index of the bound TemplateControl 
             * in the child control Array to replace.
             * @param {string} key The key used to retrieve the template.
             * @param {number} relativeIdentifier? The identifier number relative to this control's context
             * (e.g. '1' would signify the object this.context[1]). Only necessary when context is an array.
             * @param {plat.IObject<plat.IResource>} resources? An object used as the resources for any top-level 
             * controls created in the template.
             * been replaced. It resolves with an Array containing the newly added nodes.
             */
            replace(index: number, key: string, relativeIdentifier?: number, resources?: IObject<IResource>): async.IThenable<Array<Node>>;
            replace(index: number, key: string, relativeIdentifier?: any, resources?: IObject<IResource>): async.IThenable<Array<Node>> {
                var control = <TemplateControl>this.control.controls[index],
                    _Exception = this._Exception;
                if (!BindableTemplates.isBoundControl(control)) {
                    _Exception.warn('The child control at the specified index: ' + index + ' is not a bound control and thus cannot be ' +
                        'replaced by BindableTemplates.', _Exception.BIND);
                    return this._Promise.resolve([]);
                }

                var endNode = control.endNode;
                if (!(isNode(endNode) && isNode(endNode.parentNode))) {
                    _Exception.warn('The child control at the specified index: ' + index + ' had either no placeholding comment nodes ' +
                        'or its comment nodes had no parent and thus cannot be replaced by BindableTemplates.', _Exception.BIND);
                    return this._Promise.resolve([]);
                }

                return this._bind(key, relativeIdentifier, resources, index);
            }

            /**
             * Clears the memory being held by this instance.
             */
            dispose(): void {
                var dispose = this._TemplateControlFactory.dispose,
                    compiledControls = this.__compiledControls,
                    length = compiledControls.length;

                for (var i = 0; i < length; ++i) {
                    dispose(compiledControls[i]);
                }

                this.__compiledControls = [];
                this.control = null;
                this.cache = {};
                this.templates = {};
            }

            /**
             * Method for linking a template to a data context and returning a clone of the template, 
             * with all new Controls created if the template contains controls. If no data context 
             * is specified, it will be inherited.
             * @param {string} key The key used to retrieve the template.
             * @param {string} relativeIdentifier? The identifier string relative to this control's context
             * (e.g. 'foo.bar.baz' would signify the object this.context.foo.bar.baz). This is the 
             * most efficient way of specifying context, else the framework has to search for the 
             * object.
             * @param {plat.IObject<plat.IResource>} resources? An object used as the resources for any top-level 
             * controls created in the template.
             * @param {number} index? An optional index only to be used if the newly bound template is intended to 
             * replace an existing Control in the child controls Array and its element in the DOM.
             * ready to return or after the template and its control have replaced the bound control specified by the index.
             */
            protected _bind(key: any, relativeIdentifier?: any, resources?: IObject<IResource>, index?: number): async.IThenable<any> {
                var templatePromise = this.templates[key],
                    _Exception: IExceptionStatic = this._Exception,
                    noIndex = isNull(index);

                if (isNull(templatePromise)) {
                    _Exception.fatal('Cannot bind template, no template stored with key: ' + key,
                        _Exception.TEMPLATE);
                    return;
                }

                if (!(isNull(relativeIdentifier) || isNumber(relativeIdentifier) || isString(relativeIdentifier))) {
                    _Exception.warn('Cannot bind template with relativeIdentifier: ' + relativeIdentifier +
                        '. Identifier must be either a string or number', _Exception.BIND);
                    return;
                }

                return templatePromise.then((result: DocumentFragment) => {
                    var template = <DocumentFragment>result.cloneNode(true),
                        control = this._createBoundControl(key, template, resources),
                        nodeMap = this._createNodeMap(control, template, relativeIdentifier);

                    if (noIndex) {
                        this.control.controls.push(control);
                    }

                    return this._bindTemplate(key, nodeMap);
                }).then((fragment) => {
                    if (noIndex) {
                        return fragment;
                    }

                    var childNodes = Array.prototype.slice.call(fragment.childNodes),
                        oldControl = <TemplateControl>this.control.controls[index],
                        endNode = oldControl.endNode,
                        parentNode = endNode.parentNode,
                        nextSibling = endNode.nextSibling;

                    this._TemplateControlFactory.dispose(oldControl);
                    parentNode.insertBefore(fragment, nextSibling);

                    return childNodes;
                }).then(null, (error: any) => {
                    postpone(() => {
                        _Exception.fatal(error, _Exception.BIND);
                    });

                    return <DocumentFragment>null;
                });
            }

            /**
             * Creates the template's bound control and INodeMap and initiates 
             * the binding of the INodeMap for a cloned template.
             * @param {string} key The template key.
             * @param {plat.processing.INodeMap} nodeMap The node map to bind.
             */
            protected _bindTemplate(key: string, nodeMap: processing.INodeMap): async.IThenable<DocumentFragment> {
                var control = nodeMap.uiControlNode.control,
                    disposed = false,
                    dispose = isFunction(control.dispose) ? control.dispose.bind(control) : noop;

                control.dispose = () => {
                    disposed = true;
                    dispose();
                    control.dispose = dispose;
                };

                return this._bindNodeMap(key, nodeMap).then(() => {
                    var _document = this._document,
                        template = nodeMap.element;

                    if (disposed) {
                        return _document.createDocumentFragment();
                    }
                    control.startNode = template.insertBefore(_document.createComment(control.type + __START_NODE),
                        template.firstChild);
                    control.endNode = template.insertBefore(_document.createComment(control.type + __END_NODE),
                        null);

                    return template;
                }, (error: any) => {
                        postpone(() => {
                            var _Exception: IExceptionStatic = this._Exception;
                            _Exception.fatal(error, _Exception.COMPILE);
                        });

                        return <DocumentFragment>null;
                    });
            }

            /**
             * Clones the compiled ElementManager using the newly created 
             * INodeMap and binds and loads this control's 
             * ElementManager.
             * @param {string} key The template key used to grab the ElementManager.
             * @param {plat.processing.INodeMap} nodeMap The node map to bind.
             * ElementManager is bound and loaded.
             */
            protected _bindNodeMap(key: string, nodeMap: processing.INodeMap): async.IThenable<void> {
                var manager = this.cache[key],
                    child = nodeMap.uiControlNode.control,
                    template = nodeMap.element,
                    _managerCache = this._managerCache;

                manager.clone(template, _managerCache.read(this.control.uid), nodeMap);
                return _managerCache.read(child.uid).bindAndLoad();
            }

            /**
             * Creates the template's compiled, bound control and INodeMap and initiates 
             * the compilation of the template.
             * @param {string} key The template key.
             * @param {DocumentFragment} template The HTML template being bound.
             */
            protected _compile(key: string, template: DocumentFragment): void {
                var control = this._createBoundControl(key + __COMPILED, template),
                    nodeMap = this._createNodeMap(control, template);

                this.__compiledControls.push(control);

                this._compileNodeMap(control, nodeMap, key);
            }

            /**
             * Instantiates a new ElementManager for the root of this 
             * template and resolves any asynchronous url templates within the template being compiled.
             * @param {plat.ui.TemplateControl} control The newly created control used to bind the template.
             * @param {plat.processing.INodeMap} nodeMap The newly created node map to bind.
             * @param {string} key The template key.
             */
            protected _compileNodeMap(control: TemplateControl, nodeMap: processing.INodeMap, key: string): void {
                var manager = this._ElementManagerFactory.getInstance(),
                    promises: Array<async.IThenable<void>> = [];

                manager.isClone = true;
                manager.initialize(nodeMap, null);
                manager.setUiControlTemplate();

                this.cache[key] = manager;

                promises.push(manager.fulfillTemplate());

                this.templates[key] = this._Promise.all(promises).then(() => {
                    var element = nodeMap.element,
                        startNode: Comment,
                        endNode: Comment;

                    var clone = <DocumentFragment>nodeMap.element.cloneNode(true);

                    startNode = control.startNode = this._document.createComment(control.type + __START_NODE);
                    endNode = control.endNode = this._document.createComment(control.type + __END_NODE);
                    element.insertBefore(startNode, element.firstChild);
                    element.insertBefore(endNode, null);

                    return clone;
                });
            }

            /**
             * Creates an INodeMap for either a template being compiled or a 
             * template being bound.
             * @param {plat.ui.TemplateControl} uiControl The newly created control used to bind the template.
             * @param {Node} template The template being compiled.
             * @param {string} childContext? A potential child context string identifier.
             */
            protected _createNodeMap(uiControl: TemplateControl, template: Node, childContext?: string): processing.INodeMap {
                return {
                    element: <HTMLElement>template,
                    attributes: {},
                    nodes: [],
                    childContext: childContext,
                    uiControlNode: {
                        control: uiControl,
                        nodeName: uiControl.type,
                        expressions: [],
                        injector: null
                    }
                };
            }

            /**
             * Creates a TemplateControl used for binding either a template being compiled 
             * or a template being bound.
             * @param {string} key The template key.
             * @param {DocumentFragment} template The template being compiled or being bound.
             * @param {plat.IObject<plat.ui.IResource>} resources? A set of resources to add to the control used to 
             * compile/bind this template.
             */
            protected _createBoundControl(key: string, template: DocumentFragment, resources?: IObject<IResource>): TemplateControl {
                var _TemplateControlFactory = this._TemplateControlFactory,
                    control = _TemplateControlFactory.getInstance(),
                    _ResourcesFactory = this._ResourcesFactory,
                    parent = this.control,
                    compiledManager = this.cache[key],
                    _resources = _ResourcesFactory.getInstance();

                if (isObject(compiledManager)) {
                    var compiledControl = compiledManager.getUiControl();

                    _resources.initialize(control, compiledControl.resources);
                    _resources.add(resources);
                } else {
                    _resources.initialize(control, resources);
                }

                control.resources = _resources;
                _ResourcesFactory.addControlResources(control);

                control.parent = parent;
                control.controls = [];
                control.element = <HTMLElement>template;
                control.type = parent.type + __BOUND_PREFIX + key;

                return control;
            }
        }

        /**
         * The Type for referencing the '_BindableTemplatesFactory' injectable as a dependency.
         */
        export function IBindableTemplatesFactory(): IBindableTemplatesFactory {
            return BindableTemplates;
        }

        register.injectable(__BindableTemplatesFactory, IBindableTemplatesFactory, null, __FACTORY);

        /**
         * Creates and manages BindableTemplates.
         */
        export interface IBindableTemplatesFactory {
            /**
             * Creates a new instance of BindableTemplates and returns it. If a BindableTemplates is 
             * passed in, it will use the properties on the original BindableTemplates.
             * @param {plat.ui.TemplateControl} control The TemplateControl 
             * containing the new BindableTemplates object, used for data 
             * context inheritance for templates.
             * @param {plat.ui.BindableTemplates} original? An optional BindableTemplates 
             * object to copy.
             */
            create(control: TemplateControl, original?: BindableTemplates): BindableTemplates;
            /**
             * Creates a new instance of BindableTemplates and returns it. If a BindableTemplates is 
             * passed in, it will use the properties on the original BindableTemplates.
             * @param {plat.ui.TemplateControl} control The TemplateControl 
             * containing the new BindableTemplates object, used for data 
             * context inheritance for templates.
             * @param {plat.ui.BindableTemplates} original? An optional BindableTemplates 
             * object to copy.
             */
            create(control: TemplateControl, original?: BindableTemplates): BindableTemplates;

            /**
             * Clears the memory being held by control's bindableTemplates.
             * @param {plat.ui.TemplateControl} control The control whose bindableTemplates will be disposed.
             */
            dispose(control: TemplateControl): void;

            /**
             * Determines whether or not a control was created using bindableTemplates.
             * @param {plat.ui.TemplateControl} control The potential bound control.
             */
            isBoundControl(control: TemplateControl): boolean
        }

        /**
         * The class that stores the information about an Element's attributes (NamedNodeMap).
         * Methods are implemented to allow you to observe for changes on an attribute.
         * Attributes for this object are converted from dash-notation to camelCase notation.
         */
        export class Attributes {
            [property: string]: any;

            /**
             * The set of functions added externally that listens 
             * for attribute changes.
             */
            private __listeners: IObject<Array<(newValue: any, oldValue?: any) => void>> = {};
            /**
             * The control tied to this instance.
             */
            private __control: Control;

            /**
             * Initializes this instance with a Control and the camelCased 
             * attribute properties and their values.
             * @param {plat.Control} control The function that acts as a listener.
             * @param {plat.IObject<string>} attributes The camelCased attribute properties and their values.
             */
            initialize(control: Control, attributes: IObject<string>): void {
                this.__control = control;

                var keys = Object.keys(attributes),
                    attributeListeners = this.__listeners,
                    key: string,
                    length = keys.length;

                for (var i = 0; i < length; ++i) {
                    key = keys[i];
                    (<any>this)[key] = attributes[key];
                    attributeListeners[key] = [];
                }
            }

            /**
             * Provides a way to observe an attribute for changes.
             * @param {string} key The attribute to observe for changes (e.g. 'src').
             * @param {plat.IPropertyChangedListener} listener The listener function to be called when the attribute changes.
             */
            observe(key: string, listener: (newValue: any, oldValue?: any) => void): IRemoveListener {
                var listeners = this.__listeners[camelCase(key)];

                if (isNull(listeners)) {
                    return noop;
                }

                listener = listener.bind(this.__control);
                listeners.push(listener);

                return () => {
                    var index = listeners.indexOf(listener);
                    if (index === -1) {
                        return;
                    }

                    listeners.splice(index, 1);
                };
            }
        
            /**
             * Used to show an attribute has been changed and forces listeners to be fired.
             * @param {string} key The attribute being observed for changes (e.g. 'src').
             * @param {any} newValue The new value of the attribute.
             * @param {any} oldValue The previous value of the attribute.
             */
            protected _attributeChanged(key: string, newValue: any, oldValue: any): void {
                var listeners = this.__listeners[camelCase(key)],
                    length = listeners.length;

                for (var i = 0; i < length; ++i) {
                    listeners[i](newValue, oldValue);
                }
            }
        }

        register.injectable(__AttributesInstance, Attributes, null, __INSTANCE);

        /**
         * Resources are used for providing aliases to use in markup expressions. They 
         * are particularly useful when trying to access properties outside of the 
         * current context, as well as reassigning context at any point in an app.
         * By default, every control has a resource for '@control' and '@context'.
         * IViewControl objects also have a resource for '@root' and '@rootContext', 
         * which is a reference to the control and its context.
         * Resources can be created in HTML, or through the exposed control.resources 
         * object. If specified in HTML, they must be the first element child of the 
         * control upon which the resources will be placed. IViewControls that use a 
         * templateUrl can have resources as their first element in the templateUrl.
         * In the provided example, the resources can be accessed by using '@Cache' and '@testObj'.
         * The type of resource is denoted by the element name.
         * Only resources of type 'observable' will have data binding. The types of resources are:
         * function, injectable, observable, and object. Resources of type 'function' will have their
         * associated function context bound to the control that contains the resource.
         * When an alias is found in a markup expression, the framework will search up the control chain 
         * to find the alias on a control's resources. This first matching alias will be used.
         * <custom-control>
         *     <plat-resources>
         *         <injectable alias="Cache">_CacheFactory</injectable>
         *         <observable alias="testObj">
         *              { 
         *                  foo: 'foo', 
         *                  bar: 'bar', 
         *                  baz: 2 
         *              }
         *         </observable>
         *     </plat-resources>
         * </custom-control>
         */
        export class Resources {
            /**
             * The injectable resource type token.
             */
            static INJECTABLE: string = __INJECTABLE_RESOURCE;

            /**
             * The object resource type token.
             */
            static OBJECT: string = __OBJECT_RESOURCE;

            /**
             * The observable resource type token.
             */
            static OBSERVABLE: string = __OBSERVABLE_RESOURCE;

            /**
             * The literal resource type token.
             */
            static LITERAL: string = __LITERAL_RESOURCE;

            /**
             * The function resource type token.
             */
            static FUNCTION: string = __FUNCTION_RESOURCE;

            /**
             * Reference to the ContextManagerStatic injectable.
             */
            protected static _ContextManager: observable.IContextManagerStatic;

            /**
             * Reference to the Regex injectable.
             */
            protected static _regex: expressions.Regex;

            /**
             * Reference to the IExceptionStatic injectable.
             */
            protected static _Exception: IExceptionStatic;

            /**
             * Populates an IResource value if necessary, and adds it to the given 
             * control's resources.
             * @param {plat.ui.TemplateControl} control The control for which to create a resource.
             * @param {plat.ui.IResource} resource The object used to set the resource values.
             */
            static create(control: TemplateControl, resource: IResource): IResource {
                if (isNull(resource)) {
                    return resource;
                }

                var value: any;

                switch (resource.type.toLowerCase()) {
                    case __INJECTABLE_RESOURCE:
                        var injector = injectableInjectors[resource.value];
                        if (!isNull(injector)) {
                            resource.value = injector.inject();
                        }
                        break;
                    case __OBSERVABLE_RESOURCE:
                        Resources._observeResource(control, resource);
                        break;
                    case __OBJECT_RESOURCE:
                        value = resource.value;
                        if (isString(value)) {
                            resource.value = control.evaluateExpression(value);
                        }
                        break;
                    case __LITERAL_RESOURCE:
                        break;
                    case __FUNCTION_RESOURCE:
                        value = resource.value;
                        if (isString(value)) {
                            value = (<any>control)[value];
                            if (isFunction(value)) {
                                resource.value = value.bind(control);
                            } else {
                                var _Exception: IExceptionStatic = Resources._Exception;
                                _Exception.warn('Attempted to create a "function" ' +
                                    'type Resource with a function not found on your control.',
                                    _Exception.BIND);
                                resource.value = noop;
                            }
                        }
                        break;
                }

                return resource;
            }

            /**
             * Adds resource aliases for '@control' and '@context'. The resources are 
             * aliases for the control instance and the control.context.
             * @param {plat.ui.TemplateControl} control The control on which to add the resources.
             */
            static addControlResources(control: TemplateControl): void {
                control.resources.add({
                    context: {
                        value: control.context,
                        type: __OBSERVABLE_RESOURCE
                    },
                    control: {
                        value: control,
                        type: __FUNCTION_RESOURCE
                    }
                });

                if (control.hasOwnContext) {
                    Resources.__addRoot(control);
                }
            }

            /**
             * Binds the resources in a resource instance. This involves injecting 
             * the injectable resources, creating object/observable resources, and
             * binding functions to the associated control's instance.
             * @param {plat.ui.Resources} resourcesInstance The instance of the 
             * Resources object to bind.
             */
            static bindResources(resourcesInstance: Resources): void;
            static bindResources(resourcesInstance: Resources): void {
                var resources = resourcesInstance.__resources;
                if (isNull(resources)) {
                    return;
                }

                var control = resourcesInstance.__controlInstance,
                    aliases = Object.keys(resources),
                    controlResources = Resources.__controlResources,
                    length = aliases.length,
                    alias: string;

                for (var i = 0; i < length; ++i) {
                    alias = aliases[i];

                    if (controlResources.indexOf(alias) !== -1) {
                        continue;
                    }

                    (<any>resourcesInstance)[alias] = resources[alias] = Resources.create(control,
                        (<any>resourcesInstance)[alias]);
                }

                resourcesInstance.__bound = true;
            }

            /**
             * Disposes a resource instance, removing its reference 
             * from a control and breaking references to all resource 
             * objects.
             * @param {plat.ui.TemplateControl} control The control whose resources will be disposed.
             * @param {boolean} persist? Whether or not to persist a resource object post 
             * disposal or set it to null.
             */
            static dispose(control: TemplateControl, persist?: boolean): void {
                var resources = <Resources>control.resources;

                if (isNull(resources)) {
                    return;
                }

                var keys = Object.keys(resources.__resources),
                    key: string,
                    length = keys.length,
                    define = Resources._ContextManager.defineProperty,
                    resource: IResource;

                for (var i = 0; i < length; ++i) {
                    key = keys[i];
                    resource = (<any>resources)[key];

                    if (!isNull(resource) && resource.type === __OBSERVABLE_RESOURCE) {
                        define(resources, key, persist ? _clone(resource, true) : null, true, true, true);
                    }
                }

                Resources._removeListeners(resources.__controlInstance);
            }

            /**
             * Parses a resources Element (<plat-resources>) and creates 
             * an IObject<IResource> with its element children.
             * @param {Element} element The resources element to parse.
             */
            static parseElement(element: Element): IObject<IResource> {
                var children: Array<Element> = Array.prototype.slice.call((<HTMLElement>element).children),
                    child: Element,
                    _regex = Resources._regex,
                    whiteSpaceRegex = _regex.whiteSpaceRegex,
                    quotationRegex = _regex.quotationRegex,
                    resources: IObject<IResource> = {},
                    resource: IResource,
                    types = Resources.__resourceTypes,
                    attrs: NamedNodeMap,
                    attr: Attr,
                    nodeName: string,
                    text: string;

                while (children.length > 0) {
                    child = children.pop();
                    nodeName = child.nodeName.toLowerCase();

                    if (types.indexOf(nodeName) === -1) {
                        continue;
                    }

                    attrs = child.attributes;
                    resource = <IResource>{};

                    attr = attrs.getNamedItem(__ALIAS);
                    if (isNull(attr)) {
                        continue;
                    }
                    resource.alias = attr.value;

                    text = child.textContent.replace(whiteSpaceRegex, '$1');
                    if (isEmpty(text)) {
                        continue;
                    }
                    resource.value = (nodeName === __INJECTABLE_RESOURCE || nodeName === __LITERAL_RESOURCE) ?
                        text.replace(quotationRegex, '') : text;

                    resource.type = nodeName;
                    resources[resource.alias] = resource;
                }

                return resources;
            }

            /**
             * Returns a new instance with type Resources.
             */
            static getInstance(): Resources {
                return acquire(Resources);
            }

            /**
             * Observes the resource if the type is 'observable'.
             * @param {plat.ui.TemplateControl} control The control in charge of the observable resource.
             * @param {plat.ui.IResource} resource The resource to observe.
             */
            protected static _observeResource(control: TemplateControl, resource: IResource): void {
                var value = resource.value,
                    uid = control.uid,
                    removeListeners = Resources.__observableResourceRemoveListeners[uid];

                if (isNull(removeListeners)) {
                    removeListeners = Resources.__observableResourceRemoveListeners[uid] = [];
                }

                if (isString(value)) {
                    if (!isNull(resource.initialValue)) {
                        value = resource.initialValue;
                    } else {
                        resource.initialValue = value;
                    }
                    var listener = control.observeExpression(value, (newValue) => {
                        resource.value = newValue;
                    });
                    resource.value = control.evaluateExpression(value);
                    removeListeners.push(listener);
                }
            }

            /**
             * Removes observable resource listeners for a specified control.
             * @param {plat.ui.TemplateControl} control The control whose listeners are being removed.
             */
            protected static _removeListeners(control: TemplateControl): void {
                if (isNull(control)) {
                    return;
                }

                var uid = control.uid,
                    removeListeners = Resources.__observableResourceRemoveListeners[uid];

                if (isArray(removeListeners)) {
                    var length = removeListeners.length;

                    for (var i = 0; i < length; ++i) {
                        removeListeners[i]();
                    }
                }

                deleteProperty(Resources.__observableResourceRemoveListeners, uid);
            }

            /**
             * A list of resources to place on a control.
             */
            private static __controlResources = [__CONTROL_RESOURCE, __CONTEXT_RESOURCE, __ROOT_RESOURCE, __ROOT_CONTEXT_RESOURCE];

            /**
             * A list of all resource types.
             */
            private static __resourceTypes = [__INJECTABLE_RESOURCE, __OBJECT_RESOURCE, __OBSERVABLE_RESOURCE, __FUNCTION_RESOURCE, __LITERAL_RESOURCE];

            /**
             * An object consisting of keyed arrays containing functions for removing observation listeners.
             */
            private static __observableResourceRemoveListeners: IObject<Array<IRemoveListener>> = {};

            /**
             * Adds a '@root' alias and '@rootContext' to a control, specifying that it contains the root 
             * and root context. Root controls are generally the root IViewControl.
             * @param {plat.ui.TemplateControl} control The root control.
             */
            private static __addRoot(control: TemplateControl): void {
                control.resources.add({
                    root: {
                        value: control,
                        type: __OBJECT_RESOURCE,
                        alias: __ROOT_RESOURCE
                    },
                    rootContext: {
                        value: control.context,
                        type: __OBSERVABLE_RESOURCE,
                        alias: __ROOT_CONTEXT_RESOURCE
                    }
                });
            }

            /**
             * An object representing all of the currently available resources.
             */
            private __resources: IObject<IResource> = {};
            /**
             * Whether this Resources instance has been bound yet.
             */
            private __bound: boolean = false;
            /**
             * The control that these resources are for.
             */
            private __controlInstance: TemplateControl;

            /**
             * Initializes this Resources instance.
             * @param {plat.ui.TemplateControl} control The control containing this Resources instance.
             * @param {Element} element? An optional element used to create initial IResource objects.
             */
            initialize(control: TemplateControl, element?: Element): void;
            /**
             * Initializes this Resources instance.
             * @param {plat.ui.TemplateControl} control The control containing this Resources instance.
             * @param {IObject<IResource>} resources? An optional object used to populate initial
             * IResource objects.
             */
            initialize(control: TemplateControl, resources?: IObject<IResource>): void;
            /**
             * Initializes this Resources instance.
             * @param {plat.ui.TemplateControl} control The control containing this Resources instance.
             * @param {plat.ui.Resources} resources? An optional Resources object used to populate initial 
             * IResource objects.
             */
            initialize(control: TemplateControl, resources?: Resources): void;
            initialize(controlInstance: TemplateControl, resources?: any): void {
                this.__controlInstance = controlInstance;

                if (isNull(resources)) {
                    return;
                } else if (isNode(resources)) {
                    resources = Resources.parseElement(resources);
                } else if (isObject(resources.resources)) {
                    resources = resources.resources;
                }

                this.__resources = resources;

                var keys = Object.keys(resources),
                    key: string,
                    length = keys.length;

                for (var i = 0; i < length; ++i) {
                    key = keys[i];
                    (<any>this)[key] = resources[key];
                }
            }

            /**
             * Used for programatically adding IResource objects.
             * @param resources An IObject<IResource> used to add 
             * resources, keyed by their alias.
             * control.resources.add({
             *     myAlias: {
             *         type: 'observable',
             *         value: { 
             *             hello: 'Hello World!'
             *         } 
             *     }
             * });
             */
            add(resources: IObject<IResource>): void;
            /**
             * Used for programatically adding IResource objects.
             * @param {Element} element An Element containing resource element children.
             * The resource type is specified by the element name.
             *     <plat-resources>
             *         <injectable alias="Cache">_CacheFactory</injectable>
             *         <observable alias="testObj">{ foo: 'foo', bar: 'bar', baz: 2 }</observable>
             *     </plat-resources>
             */
            add(element: Element): void;
            add(resources: any): void {
                if (isNull(resources)) {
                    return;
                } else if (isNode(resources)) {
                    resources = Resources.parseElement(resources);
                }

                var keys = Object.keys(resources),
                    length = keys.length,
                    resource: IResource,
                    control = this.__controlInstance,
                    bound = this.__bound,
                    key: string,
                    create = Resources.create;

                for (var i = 0; i < length; ++i) {
                    key = keys[i];
                    resource = resources[key];
                    resource.alias = key;

                    (<any>this)[key] = this.__resources[key] = bound ? create(control, resource) : resource;
                }
            }
        }

        /**
         * The Type for referencing the '_ResourcesFactory' injectable as a dependency.
         */
        export function IResourcesFactory(
            _ContextManager?: observable.IContextManagerStatic,
            _regex?: expressions.Regex,
            _Exception?: IExceptionStatic): IResourcesFactory {
            (<any>Resources)._ContextManager = _ContextManager;
            (<any>Resources)._regex = _regex;
            (<any>Resources)._Exception = _Exception;
            return Resources;
        }

        register.injectable(__ResourcesFactory, IResourcesFactory, [
            __ContextManagerStatic,
            __Regex,
            __ExceptionStatic
        ], __FACTORY);

        /**
         * Creates and manages Resources for TemplateControls.
         */
        export interface IResourcesFactory {
            /**
             * The injectable resource type token.
             */
            INJECTABLE: string;

            /**
             * The object resource type token.
             */
            OBJECT: string;

            /**
             * The observable resource type token.
             */
            OBSERVABLE: string;

            /**
             * The literal resource type token.
             */
            LITERAL: string;

            /**
             * The function resource type token.
             */
            FUNCTION: string;

            /**
             * Populates an IResource value if necessary, and adds it to the given 
             * control's resources.
             * @param {plat.ui.TemplateControl} control The control for which to create a resource.
             * @param {plat.ui.IResource} resource The object used to set the resource values.
             */
            create(control: TemplateControl, resource: IResource): IResource;

            /**
             * Adds resource aliases for '@control' and '@context'. The resources are 
             * aliases for the control instance and the control.context.
             * @param {plat.ui.TemplateControl} control The control on which to add the resources.
             */
            addControlResources(control: TemplateControl): void;

            /**
             * Binds the resources in a resource instance. This involves injecting 
             * the injectable resources, creating object/observable resources, and
             * binding functions to the associated control's instance.
             * @param {plat.ui.Resources} resourcesInstance The instance of the Resources object.
             */
            bindResources(resourcesInstance: Resources): void;

            /**
             * Disposes a resource instance, removing its reference 
             * from a control and breaking references to all resource 
             * objects.
             * @param {plat.ui.TemplateControl} control The control whose resources will be disposed.
             * @param {boolean} persist? Whether or not to persist a resource object post 
             * disposal or set it to null.
             */
            dispose(control: TemplateControl, persist?: boolean): void;

            /**
             * Parses a resources Element (<plat-resources>) and creates 
             * an IObject<IResource> with its element children.
             * @param {Element} element The resources element to parse.
             */
            parseElement(element: Element): IObject<IResource>;

            /**
             * Returns a new instance with type Resources.
             */
            getInstance(): Resources;
        }

        /**
         * Defines a single resource on the Resources object.
         */
        export interface IResource {
            /**
             * The type of resource.
             * - injectable
             * - observable
             * - object
             * - function
             */
            type: string;

            /**
             * The alias used to reference the resource.
             */
            alias?: string;

            /**
             * The value of the resource.
             */
            value?: any;

            /**
             * The initial value of the resource prior to it being observed.
             */
            initialValue?: any;
        }

        /**
         * A class for managing DOM event registration and handling.
         */
        export class DomEvents {
            protected static _inject: any = {
                _document: __Document,
                _compat: __Compat
            };

            /**
             * A configuration object for all DOM events.
             */
            static config: IDomEventsConfig = {
                /**
                 * An object containing the different time intervals that govern the behavior of certain 
                 * custom DOM events.
                 */
                intervals: {
                    /**
                     * The max time in milliseconds a user can hold down on the screen 
                     * for a tap event to be fired.
                     */
                    tapInterval: 200,
                    /**
                     * The max time in milliseconds a user can wait between consecutive 
                     * taps for a dbltap event to be fired.
                     */
                    dblTapInterval: 300,
                    /**
                     * The time in milliseconds a user must hold down on the screen 
                     * before a hold event is fired or a release event can be fired.
                     */
                    holdInterval: 400,
                    /**
                     * The delay in milliseconds between the time a user taps to the time 
                     * the tap event fires. Used in the case where a double-tap-to-zoom 
                     * feature is required.
                     */
                    dblTapZoomDelay: 0
                },

                /**
                 * An object containing the different minimum/maximum distances that govern the behavior of certain 
                 * custom DOM events.
                 */
                distances: {
                    /**
                     * The minimum distance in pixels a user must move after touch down to register 
                     * it as a scroll instead of a tap.
                     */
                    minScrollDistance: 3,
                    /**
                     * The maximum distance in pixels between consecutive taps a user is allowed to 
                     * register a dbltap event.
                     */
                    maxDblTapDistance: 20
                },

                /**
                 * An object containing the different minimum/maximum velocities that govern the behavior of certain 
                 * custom DOM events.
                 */
                velocities: {
                    /**
                     * The minimum velocity in pixels/ms a user must move after touch down to register 
                     * a swipe event.
                     */
                    minSwipeVelocity: 0.8
                },

                /**
                 * The default CSS styles applied to elements listening for custom DOM events. If using 
                 * platypus.css, you must overwrite the styles in platypus.css or create your own and 
                 * change the classNames in the config.
                 */
                styleConfig: [{
                    /**
                     * The className that will be used to define the custom style for 
                     * allowing the best touch experience. This class is added to every 
                     * element that registers for a custom DOM event (denoted by a prefixed '$').
                     */
                    className: 'plat-gesture',
                    /**
                     * An array of string styles to be placed on an element to allow for the 
                     * best touch experience. In the format 'CSS identifier: value'
                     * (e.g. 'width : 100px')
                     */
                    styles: [
                        '-moz-user-select: none',
                        '-khtml-user-select: none',
                        '-webkit-touch-callout: none',
                        '-webkit-user-select: none',
                        '-webkit-user-drag: none',
                        '-webkit-tap-highlight-color: transparent',
                        '-webkit-overflow-scrolling: touch',
                        '-ms-user-select: none',
                        '-ms-touch-action: manipulation',
                        'touch-action: manipulation'
                    ]
                }, {
                        /**
                         * The className that will be used to define the custom style for 
                         * blocking touch action scrolling, zooming, etc on the element.
                         */
                        className: 'plat-no-touch-action',
                        /**
                         * An array of string styles that block touch action scrolling, zooming, etc. 
                         * Primarily useful on elements such as a canvas.
                         * In the format 'CSS identifier: value'
                         * (e.g. 'width : 100px')
                         */
                        styles: [
                            '-ms-touch-action: none',
                            'touch-action: none'
                        ]
                    }]
            };

            /**
             * Reference to the Document injectable.
             */
            protected _document: Document;

            /**
             * Reference to the Compat injectable.
             */
            protected _compat: Compat;

            /**
             * Whether or not the DomEvents are currently active. 
             * They become active at least one element on the current 
             * page is listening for a custom event.
             */
            protected _isActive: boolean;

            /**
             * Whether or not the user is currently touching the screen.
             */
            protected _inTouch: boolean;

            /**
             * Whether or not the user is using mouse when touch events are present.
             */
            protected _inMouse = false;

            /**
             * An object with keyed subscribers that keep track of all of the 
             * events registered on a particular element.
             */
            protected _subscribers: IObject<IEventSubscriber> = {};

            /**
             * The touch start events defined by this browser.
             */
            protected _startEvents: Array<string>;

            /**
             * The touch move events defined by this browser.
             */
            protected _moveEvents: Array<string>;

            /**
             * The touch end events defined by this browser.
             */
            protected _endEvents: Array<string>;

            /**
             * An object containing the event types for all of the 
             * supported gestures.
             */
            protected _gestures: IGestures<string> = {
                $tap: __tap,
                $dbltap: __dbltap,
                $hold: __hold,
                $release: __release,
                $swipe: __swipe,
                $swipeleft: __swipeleft,
                $swiperight: __swiperight,
                $swipeup: __swipeup,
                $swipedown: __swipedown,
                $track: __track,
                $trackleft: __trackleft,
                $trackright: __trackright,
                $trackup: __trackup,
                $trackdown: __trackdown,
                $trackend: __trackend
            };

            /**
             * An object containing the number of currently active 
             * events of each base type.
             */
            protected _gestureCount: IBaseGestures<number> = {
                $tap: 0,
                $dbltap: 0,
                $hold: 0,
                $release: 0,
                $swipe: 0,
                $track: 0,
                $trackend: 0
            };

            /**
             * A constant for specifying the start condition.
             */
            private __START = 'start';
            /**
             * A constant for specifying the move condition.
             */
            private __MOVE = 'move';
            /**
             * A constant for specifying the end condition.
             */
            private __END = 'end';
            /**
             * Whether or not the user moved while in touch.
             */
            private __hasMoved = false;
            /**
             * Whether or not the user swiped while in touch.
             */
            private __hasSwiped = false;
            /**
             * Whether or not their is a registered "release" event.
             */
            private __hasRelease = false;
            /**
             * Whether or not we should be detecting move events.
             */
            private __detectingMove = false;
            /**
             * The current tap count to help distinguish single from double taps.
             */
            private __tapCount = 0;
            /**
             * The total number of touches on the screen.
             */
            private __touchCount = 0;
            /**
             * A function to remove a deferred tap given the case that a tap delay was needed for 
             * something such as a double tap to zoom feature.
             */
            private __cancelDeferredTap = noop;
            /**
             * A function for removing a deferred hold event.
             */
            private __cancelDeferredHold = noop;
            /**
             * A regular expressino for determining a "cancel" event.
             */
            private __cancelRegex = /cancel/i;
            /**
             * A regular expressino for determining a pointer end event.
             */
            private __pointerEndRegex = /up|cancel/i;
            /**
             * The user's last touch down.
             */
            private __lastTouchDown: IBaseEventProperties;
            /**
             * The starting place of an initiated swipe gesture.
             */
            private __swipeOrigin: IBaseEventProperties;
            /**
             * The user's last move while in touch.
             */
            private __lastMoveEvent: IPointerEvent;
            /**
             * The user's last touch up.
             */
            private __lastTouchUp: IPointerEvent;
            /**
             * The captured target that the user first initiated a gesture on.
             */
            private __capturedTarget: ICustomElement;
            /**
             * The currently focused element on the screen. Used in the case of WebKit touch events.
             */
            private __focusedElement: HTMLInputElement;
            /**
             * A hash map for mapping custom events to standard events.
             */
            private __reverseMap = {};
            /**
             * An EventListener with a bound context for registering mapped events.
             */
            private __mappedEventListener: EventListener = this.__handleMappedEvent.bind(this);
            /**
             * An object containing the number of currently active mapped touch 
             * events of each type.
             */
            private __mappedCount: ITouchMapping<number> = {
                $touchstart: 0,
                $touchmove: 0,
                $touchend: 0,
                $touchcancel: 0
            };
            /**
             * An array of subscribers for the swipe gesture.
             */
            private __swipeSubscribers: Array<DomEvent>;
            /**
             * A hash of the current pointer touch points on the page.
             */
            private __pointerHash: IObject<IPointerEvent> = {};
            /**
             * An array containing all current pointer touch points on the page.
             */
            private __pointerEvents: Array<IPointerEvent> = [];
            /**
             * A set of touch start, move, and end listeners to be place on the document.
             */
            private __listeners: ICustomEventListener = {
                start: this._onTouchStart.bind(this),
                move: this._onTouchMove.bind(this),
                end: this._onTouchEnd.bind(this)
            };

            /**
             * Retrieve the type of touch events for this browser and create the default gesture style.
             */
            constructor() {
                this.__getTypes();
            }

            /**
             * Add an event listener for the specified event type on the specified element.
             * @param {Node} element The node listening for the event.
             * @param {string} type The type of event being listened to.
             * @param {plat.ui.IGestureListener} listener The listener to be fired.
             * @param {boolean} useCapture? Whether to fire the event on the capture or bubble phase of propagation.
             */
            addEventListener(element: Node, type: string, listener: IGestureListener, useCapture?: boolean): IRemoveListener;
            /**
             * Add an event listener for the specified event type on the specified element.
             * @param {Window} element The window object.
             * @param {string} type The type of event being listened to.
             * @param {plat.ui.IGestureListener} listener The listener to be fired.
             * @param {boolean} useCapture? Whether to fire the event on the capture or bubble phase of propagation.
             */
            addEventListener(element: Window, type: string, listener: IGestureListener, useCapture?: boolean): IRemoveListener;
            /**
             * Add an event listener for the specified event type on the specified element.
             * @param {Node} element The node listening for the event.
             * @param {string} type The type of event being listened to.
             * @param {EventListener} listener The listener to be fired.
             * @param {boolean} useCapture? Whether to fire the event on the capture or bubble phase of propagation.
             */
            addEventListener(element: Node, type: string, listener: EventListener, useCapture?: boolean): IRemoveListener;
            /**
             * Add an event listener for the specified event type on the specified element.
             * @param {Window} element The window object.
             * @param {string} type The type of event being listened to.
             * @param {EventListener} listener The listener to be fired.
             * @param {boolean} useCapture? Whether to fire the event on the capture or bubble phase of propagation.
             */
            addEventListener(element: Window, type: string, listener: EventListener, useCapture?: boolean): IRemoveListener;
            addEventListener(element: any, type: string, listener: IGestureListener, useCapture?: boolean): IRemoveListener {
                var _compat = this._compat,
                    mappedGestures = _compat.mappedEvents,
                    mappedType = mappedGestures[type],
                    mappingExists = !isNull(mappedType),
                    mappedCount = this.__mappedCount,
                    mappedRemoveListener = noop,
                    mappedTouchRemoveListener = noop,
                    gestures = this._gestures,
                    listenerRemoved = false;

                if (mappingExists) {
                    var count = mappedCount[type];
                    (<any>this.__reverseMap)[mappedType] = type;
                    this.__registerElement(element, type);
                    mappedCount[type]++;
                    mappedRemoveListener = this.__addMappedEvent(count, mappedType, useCapture);

                    if (_compat.hasTouchEvents && !this.__cancelRegex.test(mappedType)) {
                        mappedType = mappedType
                            .replace('touch', 'mouse')
                            .replace('start', 'down')
                            .replace('end', 'up');
                        (<any>this.__reverseMap)[mappedType] = type;
                        mappedTouchRemoveListener = this.__addMappedEvent(count, mappedType, useCapture);
                    }
                }

                element.addEventListener(type, listener, useCapture);

                if (!isUndefined(element['on' + type]) || isUndefined((<any>gestures)[type]) || mappingExists) {
                    return () => {
                        if (listenerRemoved) {
                            return;
                        } else if (mappingExists) {
                            var currentCount = mappedCount[type];
                            if (isNumber(currentCount)) {
                                if (currentCount > 0) {
                                    currentCount = --mappedCount[type];
                                }

                                if (currentCount === 0) {
                                    mappedRemoveListener();
                                    mappedTouchRemoveListener();
                                }
                            }
                            this.__unregisterElement(element, type);
                        }

                        listenerRemoved = true;
                        element.removeEventListener(type, listener, useCapture);
                    };
                }

                var swipeGesture = gestures.$swipe,
                    trackGesture = gestures.$track,
                    countType = type;

                if (type.indexOf(trackGesture) !== -1) {
                    var trackend = gestures.$trackend;
                    countType = type === trackend ? trackend : trackGesture;
                } else if (type.indexOf(swipeGesture) !== -1) {
                    countType = swipeGesture;
                }

                (<any>this._gestureCount)[countType]++;
                this.__registerElement(element, type);

                return () => {
                    if (listenerRemoved) {
                        return;
                    }

                    listenerRemoved = true;
                    this.__removeEventListener(element, type, listener, useCapture);
                };
            }

            /**
             * Stops listening for touch events and resets the DomEvents instance.
             */
            dispose(): void {
                this.__unregisterTypes();

                this._gestureCount = {
                    $tap: 0,
                    $dbltap: 0,
                    $hold: 0,
                    $release: 0,
                    $swipe: 0,
                    $track: 0,
                    $trackend: 0
                };
                this.__mappedCount = {
                    $touchstart: 0,
                    $touchmove: 0,
                    $touchend: 0,
                    $touchcancel: 0
                };
                this._isActive = false;
                this._subscribers = {};
                this.__pointerEvents = [];
                this.__pointerHash = {};
                this.__reverseMap = {};
                this.__tapCount = this.__touchCount = 0;
                this.__detectingMove = this.__hasMoved = this.__hasRelease = this.__hasSwiped = false;
                this.__lastMoveEvent = this.__lastTouchDown = this.__lastTouchUp = null;
                this.__swipeOrigin = this.__capturedTarget = this.__focusedElement = null;
                this.__cancelDeferredHold = this.__cancelDeferredTap = noop;
            }

            /**
             * A listener for touch/mouse start events.
             * @param {plat.ui.IPointerEvent} ev The touch start event object.
             */
            protected _onTouchStart(ev: IPointerEvent): boolean {
                if (this.__touchCount++ > 0) {
                    return true;
                }

                if (ev.type !== 'mousedown') {
                    this._inTouch = true;
                } else if (this._inTouch === true) {
                    // return immediately if mouse event and currently in a touch
                    ev.preventDefault();
                    return false;
                } else if (this._compat.hasTouchEvents) {
                    this._inMouse = true;
                }

                ev = this.__standardizeEventObject(ev);
                if (isNull(ev)) {
                    return true;
                }

                // set any captured target and last move back to null
                this.__capturedTarget = this.__lastMoveEvent = null;
                this.__hasMoved = false;
                this.__lastTouchDown = this.__swipeOrigin = {
                    _buttons: ev._buttons,
                    clientX: ev.clientX,
                    clientY: ev.clientY,
                    timeStamp: ev.timeStamp,
                    target: ev.target,
                    identifier: ev.identifier
                };

                var gestureCount = this._gestureCount,
                    noHolds = gestureCount.$hold <= 0,
                    noRelease = gestureCount.$release <= 0;

                // if any moving events registered, register move
                if (gestureCount.$track > 0 || gestureCount.$trackend > 0 || gestureCount.$swipe > 0) {
                    this.__registerType(this.__MOVE);
                    this.__detectingMove = true;
                }

                // return if no hold or release events are registered
                if (noHolds && noRelease) {
                    return true;
                }

                var holdInterval = DomEvents.config.intervals.holdInterval,
                    domEvent: DomEvent,
                    subscribeFn: () => void,
                    domEventFound = false;

                if (noHolds) {
                    this.__hasRelease = false;
                    this.__cancelDeferredHold = defer(() => {
                        this.__hasRelease = true;
                    }, holdInterval);
                    return true;
                } else if (noRelease) {
                    domEvent = this.__findFirstSubscriber(<ICustomElement>ev.target, this._gestures.$hold);
                    if ((domEventFound = !isNull(domEvent))) {
                        subscribeFn = () => {
                            domEvent.trigger(ev);
                            this.__cancelDeferredHold = noop;
                        };
                    }
                } else {
                    this.__hasRelease = false;
                    // has both hold and release events registered
                    domEvent = this.__findFirstSubscriber(<ICustomElement>ev.target, this._gestures.$hold);
                    if ((domEventFound = !isNull(domEvent))) {
                        subscribeFn = () => {
                            domEvent.trigger(ev);
                            this.__hasRelease = true;
                            this.__cancelDeferredHold = noop;
                        };
                    }
                }

                // set timeout to fire the subscribeFn
                if (domEventFound) {
                    this.__cancelDeferredHold = defer(subscribeFn, holdInterval);
                }
            }

            /**
             * A listener for touch/mouse move events.
             * @param {plat.ui.IPointerEvent} ev The touch move event object.
             */
            protected _onTouchMove(ev: IPointerEvent): boolean {
                // clear hold event
                this.__cancelDeferredHold();
                this.__cancelDeferredHold = noop;

                // return immediately if there are multiple touches present, or 
                // if it is a mouse event and currently in a touch
                if (this._inTouch === true && ev.type === 'mousemove') {
                    return true;
                }

                var evt = this.__standardizeEventObject(ev);
                if (isNull(evt)) {
                    return true;
                }

                var gestureCount = this._gestureCount,
                    noTracking = gestureCount.$track <= 0,
                    noSwiping = gestureCount.$swipe <= 0,
                    config = DomEvents.config,
                    swipeOrigin = this.__swipeOrigin,
                    x = evt.clientX,
                    y = evt.clientY,
                    minMove = this.__hasMoved ||
                    (this.__getDistance(swipeOrigin.clientX, x, swipeOrigin.clientY, y) >= config.distances.minScrollDistance);

                // if minimum distance not met
                if (!minMove) {
                    return true;
                }

                this.__hasMoved = true;

                // if no moving events return
                if (noTracking && noSwiping) {
                    return true;
                }

                var lastMove = <IBaseEventProperties>this.__lastMoveEvent || swipeOrigin,
                    direction = evt.direction = this.__getDirection(x - lastMove.clientX, y - lastMove.clientY),
                    originChanged = this.__checkForOriginChanged(direction),
                    velocity = evt.velocity = this.__getVelocity(x - swipeOrigin.clientX, y - swipeOrigin.clientY,
                        evt.timeStamp - swipeOrigin.timeStamp);

                // if swiping events exist
                if (!(noSwiping || (this.__hasSwiped && !originChanged))) {
                    this.__setRegisteredSwipes(direction, velocity);
                }

                // if tracking events exist
                if (!noTracking) {
                    this.__handleTrack(evt, ev);
                }

                this.__lastMoveEvent = evt;
            }

            /**
             * A listener for touch/mouse end events.
             * @param {plat.ui.IPointerEvent} ev The touch end event object.
             */
            protected _onTouchEnd(ev: IPointerEvent): boolean {
                var eventType = ev.type,
                    hasMoved = this.__hasMoved;

                if (eventType !== 'mouseup') {
                    // all non mouse cases
                    if (eventType === 'touchend') {
                        // all to handle a strange issue when touch clicking certain types 
                        // of DOM elements
                        if (hasMoved) {
                            // we check ev.cancelable in the END case in case of scrolling conditions
                            if (ev.cancelable === true) {
                                ev.preventDefault();
                            }
                        } else if (this._inTouch === true) {
                            // handInput must be called prior to preventClickFromTouch due to an 
                            // order of operations
                            this.__handleInput(<HTMLInputElement>ev.target);
                            if (ev.cancelable === true) {
                                ev.preventDefault();
                            }
                        } else {
                            this.__preventClickFromTouch();
                            if (ev.cancelable === true) {
                                ev.preventDefault();
                            }
                            return true;
                        }

                        this.__preventClickFromTouch();
                    }

                    this._inTouch = false;
                } else if (!isUndefined(this._inTouch)) {
                    if (!this._inMouse) {
                        // this is case where touchend fired and now 
                        // mouse end is also being fired
                        if (ev.cancelable === true) {
                            ev.preventDefault();
                        }
                        return false;
                    }
                    this._inMouse = false;
                }

                // check for cancel event
                if (this.__cancelRegex.test(eventType)) {
                    this.__handleCanceled(ev);
                    return true;
                }

                // standardizeEventObject creates touches
                ev = this.__standardizeEventObject(ev);
                if (isNull(ev)) {
                    return true;
                }

                this.__clearTempStates();

                this.__touchCount = ev.touches.length;

                // handle release event
                if (this.__hasRelease) {
                    this.__handleRelease(ev);
                }

                // handle swipe events
                if (this.__hasSwiped) {
                    this.__handleSwipe();
                }

                var config = DomEvents.config,
                    intervals = config.intervals,
                    touchEnd = ev.timeStamp,
                    touchDown = this.__lastTouchDown;

                // if the user moved their finger (for scroll) we handle $trackend and return,
                // else if they had their finger down too long to be considered a tap, we want to return
                if (hasMoved) {
                    this.__handleTrackEnd(ev);
                    this.__tapCount = 0;
                    return true;
                } else if (isNull(touchDown) || ((touchEnd - touchDown.timeStamp) > intervals.tapInterval)) {
                    this.__tapCount = 0;
                    return true;
                }

                var lastTouchUp = this.__lastTouchUp,
                    x = ev.clientX,
                    y = ev.clientY;

                // check if can be a double tap event by checking number of taps, distance between taps, 
                // and time between taps
                if (this.__tapCount > 0 &&
                    this.__getDistance(x, lastTouchUp.clientX, y, lastTouchUp.clientY) <= config.distances.maxDblTapDistance &&
                    ((touchEnd - lastTouchUp.timeStamp) <= intervals.dblTapInterval)) {
                    // handle dbltap events
                    this.__handleDbltap(ev);
                } else {
                    this.__tapCount = 0;
                }

                // handle tap events
                this.__handleTap(ev);

                this.__lastTouchUp = ev;
            }

            /**
             * Clears all temporary states like move and hold events.
             */
            private __clearTempStates(): void {
                // clear hold event
                this.__cancelDeferredHold();
                this.__cancelDeferredHold = noop;

                if (this.__detectingMove) {
                    this.__unregisterType(this.__MOVE);
                    this.__detectingMove = false;
                }
            }

            /**
             * A function for resetting all values potentially modified during the touch event sequence.
             */
            private __resetTouchEnd(): void {
                this.__tapCount = this.__touchCount = 0;
                this._inTouch = this.__hasRelease = this.__hasSwiped = false;
                this.__pointerHash = {};
                this.__pointerEvents = [];
                this.__capturedTarget = null;
            }

            // gesture handling methods

            /**
             * A function for handling when gestures are canceled via the Browser.
             * @param {plat.ui.IPointerEvent} ev The touch cancel event object.
             */
            private __handleCanceled(ev: IPointerEvent): void {
                var touches = ev.touches || this.__pointerEvents,
                    index = this.__getTouchIndex(touches);

                ev = index >= 0 ? touches[index] : this.__standardizeEventObject(ev);
                this.__clearTempStates();
                if (this.__hasMoved) {
                    this.__handleTrackEnd(ev);
                }
                this.__resetTouchEnd();
            }

            /**
             * A function for handling and firing tap events.
             * @param {plat.ui.IPointerEvent} ev The touch end event object.
             */
            private __handleTap(ev: IPointerEvent): void {
                this.__tapCount++;

                if (this._gestureCount.$tap <= 0) {
                    return;
                }

                var gestures = this._gestures,
                    domEvent = this.__findFirstSubscriber(<ICustomElement>ev.target, gestures.$tap);

                if (isNull(domEvent)) {
                    return;
                }

                // fire tap event immediately if no dbltap zoom delay 
                // or a mouse is being used
                if (DomEvents.config.intervals.dblTapZoomDelay <= 0 ||
                    ev.pointerType === 'mouse' || ev.type === 'mouseup') {
                    ev._buttons = this.__lastTouchDown._buttons;
                    domEvent.trigger(ev);
                    return;
                }

                // defer for tap delay in case of something like desired 
                // dbltap zoom
                this.__cancelDeferredTap = defer(() => {
                    ev._buttons = this.__lastTouchDown._buttons;
                    domEvent.trigger(ev);
                    this.__tapCount = 0;
                    this.__cancelDeferredTap = noop;
                }, DomEvents.config.intervals.dblTapZoomDelay);
            }

            /**
             * A function for handling and firing double tap events.
             * @param {plat.ui.IPointerEvent} ev The touch end event object.
             */
            private __handleDbltap(ev: IPointerEvent): void {
                this.__tapCount = 0;

                this.__cancelDeferredTap();
                this.__cancelDeferredTap = noop;

                if (this._gestureCount.$dbltap <= 0) {
                    return;
                }

                var domEvent = this.__findFirstSubscriber(<ICustomElement>ev.target, this._gestures.$dbltap);
                if (isNull(domEvent)) {
                    return;
                }

                ev._buttons = this.__lastTouchDown._buttons;
                domEvent.trigger(ev);
                // set touch count to -1 to prevent repeated fire on sequential taps
                this.__tapCount = -1;
            }

            /**
             * A function for handling and firing release events.
             * @param {plat.ui.IPointerEvent} ev The touch end event object.
             */
            private __handleRelease(ev: IPointerEvent): void {
                var domEvent = this.__findFirstSubscriber(<ICustomElement>ev.target, this._gestures.$release);
                if (!isNull(domEvent)) {
                    domEvent.trigger(ev);
                }

                this.__hasRelease = false;
            }

            /**
             * A function for handling and firing swipe events.
             */
            private __handleSwipe(): void {
                var lastMove = this.__lastMoveEvent;
                if (isNull(lastMove)) {
                    this.__hasSwiped = false;
                    this.__swipeSubscribers = null;
                    return;
                }

                var swipeSubscribers = this.__swipeSubscribers || [];
                while (swipeSubscribers.length > 0) {
                    swipeSubscribers.pop().trigger(lastMove);
                }

                this.__hasSwiped = false;
                this.__lastMoveEvent = null;
                this.__swipeSubscribers = null;
            }

            /**
             * A function for handling and firing track events.
             * @param {plat.ui.IPointerEvent} ev The touch move event object.
             * @param {plat.ui.IPointerEvent} originalEv The original touch move event object 
             * used for preventing default in the case of an ANDROID device.
             */
            private __handleTrack(ev: IPointerEvent, originalEv: IPointerEvent): void {
                var trackGesture = this._gestures.$track,
                    direction = ev.direction,
                    eventTarget = this.__capturedTarget || <ICustomElement>ev.target;

                var domEvents = this.__findFirstSubscribers(eventTarget,
                    [trackGesture, (trackGesture + direction.x), (trackGesture + direction.y)]);
                if (domEvents.length > 0) {
                    if (!isUndefined(this._compat.ANDROID)) {
                        originalEv.preventDefault();
                    }

                    while (domEvents.length > 0) {
                        domEvents.pop().trigger(ev);
                    }
                }
            }

            /**
             * A function for handling and firing track end events.
             * @param {plat.ui.IPointerEvent} ev The touch end event object.
             */
            private __handleTrackEnd(ev: IPointerEvent): void {
                if (this._gestureCount.$trackend <= 0) {
                    return;
                }

                var eventTarget = this.__capturedTarget || <ICustomElement>ev.target,
                    domEvent = this.__findFirstSubscriber(eventTarget, this._gestures.$trackend);
                if (isNull(domEvent)) {
                    return;
                }

                domEvent.trigger(ev);
            }

            /**
             * A function for handling and firing custom events that are mapped to standard events.
             * @param {plat.ui.IExtendedEvent} ev The touch event object.
             */
            private __handleMappedEvent(ev: IExtendedEvent): void {
                var mappedType = ev.type,
                    eventType = (<any>this.__reverseMap)[mappedType],
                    domEvent = this.__findFirstSubscriber(<ICustomElement>ev.target, eventType);

                if (isNull(domEvent)) {
                    return;
                }

                ev = this.__standardizeEventObject(ev);
                if (isNull(ev)) {
                    return;
                }

                domEvent.trigger(ev);
            }

            // touch type and element registration

            /**
             * A function for determining the proper touch events.
             */
            private __getTypes(): void {
                var _compat = this._compat,
                    touchEvents = _compat.mappedEvents;

                if (_compat.hasPointerEvents) {
                    this._startEvents = [touchEvents.$touchstart];
                    this._moveEvents = [touchEvents.$touchmove];
                    this._endEvents = [touchEvents.$touchend, touchEvents.$touchcancel];
                    return;
                } else if (_compat.hasTouchEvents) {
                    this._startEvents = [touchEvents.$touchstart, 'mousedown'];
                    this._moveEvents = [touchEvents.$touchmove, 'mousemove'];
                    this._endEvents = [touchEvents.$touchend, touchEvents.$touchcancel, 'mouseup'];
                    return;
                }

                var cancelEvent = touchEvents.$touchcancel;
                this._startEvents = [touchEvents.$touchstart];
                this._moveEvents = [touchEvents.$touchmove];
                this._endEvents = isNull(cancelEvent) ? [touchEvents.$touchend] : [touchEvents.$touchend, cancelEvent];
            }

            /**
             * Registers for and starts listening to start and end touch events on the document.
             */
            private __registerTypes(): void {
                this.__registerType(this.__START);
                this.__registerType(this.__END);
            }

            /**
             * Unregisters for and stops listening to all touch events on the document.
             */
            private __unregisterTypes(): void {
                this.__unregisterType(this.__START);
                this.__unregisterType(this.__MOVE);
                this.__unregisterType(this.__END);
            }

            /**
             * Registers for and begins listening to a particular touch event type.
             * @param {string} event The event type to begin listening for.
             */
            private __registerType(event: string): void {
                var events: Array<string>,
                    listener = this.__listeners[event],
                    _document = this._document;

                switch (event) {
                    case this.__START:
                        events = this._startEvents;
                        break;
                    case this.__MOVE:
                        events = this._moveEvents;
                        break;
                    case this.__END:
                        events = this._endEvents;
                        break;
                    default:
                        return;
                }

                var index = events.length;
                while (index-- > 0) {
                    _document.addEventListener(events[index], listener, false);
                }
            }

            /**
             * Unregisters for and stops listening to a particular touch event type.
             * @param {string} event The event type to stop listening for.
             */
            private __unregisterType(event: string): void {
                var events: Array<string>,
                    listener = this.__listeners[event],
                    _document = this._document;

                switch (event) {
                    case this.__START:
                        events = this._startEvents;
                        break;
                    case this.__MOVE:
                        events = this._moveEvents;
                        break;
                    case this.__END:
                        events = this._endEvents;
                        break;
                    default:
                        return;
                }

                var index = events.length;
                while (index-- > 0) {
                    _document.removeEventListener(events[index], listener, false);
                }
            }

            /**
             * Registers and associates an element with an event.
             * @param {plat.ui.ICustomElement} element The element being tied to a custom event.
             * @param {string} type The type of event.
             */
            private __registerElement(element: ICustomElement, type: string): void {
                var id: string,
                    plat = element.__plat;
                if (isNull(plat)) {
                    id = uniqueId('domEvent_');
                    element.__plat = plat = {
                        domEvent: id
                    };
                } else if (isNull(plat.domEvent)) {
                    id = uniqueId('domEvent_');
                    plat.domEvent = id;
                }

                // check if DomEvents is ready
                if (!this._isActive) {
                    this.__registerTypes();

                    if (isNull(this._isActive)) {
                        this.__appendGestureStyle();
                    }

                    this._isActive = true;
                }

                var _domEvent: DomEvent;
                if (isNull(id)) {
                    var subscriber = this._subscribers[plat.domEvent];
                    if (isUndefined((<any>subscriber)[type])) {
                        _domEvent = new CustomDomEvent(element, type);
                        (<any>subscriber)[type] = _domEvent;
                    } else {
                        (<any>subscriber)[type].count++;
                    }
                    subscriber.gestureCount++;
                    return;
                }

                var newSubscriber = { gestureCount: 1 };
                _domEvent = new CustomDomEvent(element, type);
                (<any>newSubscriber)[type] = _domEvent;
                this._subscribers[id] = newSubscriber;

                if (!isUndefined((<HTMLElement>element).className)) {
                    addClass(<HTMLElement>element, DomEvents.config.styleConfig[0].className);
                }
                this.__removeSelections(element);
            }

            /**
             * Unregisters and disassociates an element with an event.
             * @param {plat.ui.ICustomElement} element The element being disassociated with the given custom event.
             * @param {string} type The type of event.
             */
            private __unregisterElement(element: ICustomElement, type: string): void {
                var plat = element.__plat;
                if (isNull(plat) || isNull(plat.domEvent)) {
                    return;
                }

                var domEventId = plat.domEvent,
                    eventSubscriber = this._subscribers[domEventId],
                    domEvent: CustomDomEvent = (<any>eventSubscriber)[type];

                if (isNull(domEvent)) {
                    return;
                }

                domEvent.count--;
                if (domEvent.count === 0) {
                    deleteProperty(eventSubscriber, type);
                }
                eventSubscriber.gestureCount--;

                if (eventSubscriber.gestureCount === 0) {
                    deleteProperty(this._subscribers, domEventId);
                    this.__removeElement(element);
                }
            }

            /**
             * Sets the current touch point and helps standardize the given event object.
             * @param {plat.ui.IPointerEvent} ev The current point being touched.
             */
            private __setTouchPoint(ev: IPointerEvent): void {
                var eventType = ev.type,
                    _compat = this._compat;

                if (_compat.hasPointerEvents || _compat.hasMsPointerEvents) {
                    this.__updatePointers(ev, this.__pointerEndRegex.test(eventType));
                    return;
                }

                ev.pointerType = eventType.indexOf('mouse') === -1 ? 'touch' : 'mouse';
            }

            /**
             * Sets the captured target.
             * @param {EventTarget} target The target to capture.
             */
            private __setCapture(target: EventTarget): void {
                if (isNull(this.__capturedTarget) && !isDocument(target)) {
                    this.__capturedTarget = <ICustomElement>target;
                }
            }

            /**
             * Sets the captured target.
             * @param {plat.ui.IPointerEvent} ev The current touch point.
             * @param {boolean} remove Whether to remove the touch point or add it.
             */
            private __updatePointers(ev: IPointerEvent, remove: boolean): void {
                var id = ev.pointerId,
                    pointerHash = this.__pointerHash,
                    pointer = pointerHash[id],
                    index: number;

                if (remove) {
                    if (!isUndefined(pointer)) {
                        index = this.__pointerEvents.indexOf(pointer);
                        if (index > -1) {
                            this.__pointerEvents.splice(index, 1);
                        }
                        deleteProperty(this.__pointerHash, id);
                    }
                } else {
                    if (id === 1 && !isEmpty(pointerHash)) {
                        // this is a mouse movement while mid touch
                        return;
                    }

                    ev.identifier = ev.pointerId;
                    if (isUndefined(pointer) || (index = this.__pointerEvents.indexOf(pointer)) < 0) {
                        this.__pointerEvents.push(ev);
                    } else {
                        this.__pointerEvents.splice(index, 1, ev);
                    }

                    pointerHash[id] = ev;
                }
            }

            // event and subscription handling

            /**
             * Searches from the EventTarget up the DOM tree looking for an element with the 
             * registered event type.
             * @param {plat.ui.ICustomElement} eventTarget The current target of the touch event.
             * @param {string} type The type of event being searched for.
             * with the first found element in the tree and the event type. Used to trigger the event at this 
             * point in the DOM tree.
             */
            private __findFirstSubscriber(eventTarget: ICustomElement, type: string): DomEvent {
                if (isNull(eventTarget)) {
                    return;
                }

                var plat: ICustomElementProperty,
                    subscriber: IEventSubscriber,
                    domEvent: DomEvent;

                do {
                    plat = eventTarget.__plat;
                    if (isUndefined(plat) || isUndefined(plat.domEvent)) {
                        continue;
                    }

                    subscriber = this._subscribers[plat.domEvent];
                    domEvent = (<any>subscriber)[type];
                    if (isUndefined(domEvent)) {
                        continue;
                    }

                    return domEvent;
                } while (!isNull(eventTarget = <ICustomElement>eventTarget.parentNode));
            }

            /**
             * Searches from the EventTarget up the DOM tree looking for all elements with the 
             * registered event types.
             * @param {plat.ui.ICustomElement} eventTarget The current target of the touch event.
             * @param {Array<string>} types An array of the types of events being searched for.
             * with the first found element in the tree and the corresponding event type. Used to trigger the events at their lowest 
             * points in the DOM tree.
             */
            private __findFirstSubscribers(eventTarget: ICustomElement, types: Array<string>): Array<DomEvent> {
                if (isNull(eventTarget)) {
                    return [];
                }

                var plat: ICustomElementProperty,
                    subscriber: IEventSubscriber,
                    subscriberKeys: Array<string>,
                    subscriberKey: string,
                    domEvents: Array<DomEvent> = [],
                    index: number;

                do {
                    plat = eventTarget.__plat;
                    if (isUndefined(plat) || isUndefined(plat.domEvent)) {
                        continue;
                    }

                    subscriber = this._subscribers[plat.domEvent];
                    subscriberKeys = Object.keys(subscriber);
                    while (subscriberKeys.length > 0) {
                        subscriberKey = subscriberKeys.pop();
                        index = types.indexOf(subscriberKey);
                        if (index !== -1) {
                            domEvents.push((<any>subscriber)[subscriberKey]);
                            types.splice(index, 1);
                        }
                    }

                } while (types.length > 0 && !isNull(eventTarget = <ICustomElement>eventTarget.parentNode));

                return domEvents;
            }

            /**
             * Adds a listener for listening to a standard event and mapping it to a custom event.
             * @param {number} count The number of mapped events registered.
             * @param {string} mappedEvent The mapped event type.
             * @param {boolean} useCapture? Whether the mapped event listener is fired on the capture or bubble phase.
             */
            private __addMappedEvent(count: number, mappedEvent: string, useCapture?: boolean): IRemoveListener {
                var _document = this._document;

                if (count === 0) {
                    _document.addEventListener(mappedEvent, this.__mappedEventListener, useCapture);
                }

                return () => {
                    _document.removeEventListener(mappedEvent, this.__mappedEventListener, useCapture);
                };
            }

            /**
             * Removes an event listener for a given event type.
             * @param {plat.ui.ICustomElement} element The element to remove the listener from.
             * @param {string} type The type of event being removed.
             * @param {plat.ui.IGestureListener} listener The listener being removed.
             * @param {boolean} useCapture? Whether the listener is fired on the capture or bubble phase.
             */
            private __removeEventListener(element: ICustomElement, type: string, listener: IGestureListener,
                useCapture?: boolean): void {
                var gestures = this._gestures;

                element.removeEventListener(type, listener, useCapture);

                var swipeGesture = gestures.$swipe,
                    trackGesture = gestures.$track,
                    countType = type;

                if (type.indexOf(trackGesture) !== -1) {
                    var trackend = gestures.$trackend;
                    countType = type === trackend ? trackend : trackGesture;
                } else if (type.indexOf(swipeGesture) !== -1) {
                    countType = swipeGesture;
                }

                (<any>this._gestureCount)[countType]--;
                this.__unregisterElement(element, type);
            }

            /**
             * Removes an element from the subscriber object.
             * @param {plat.ui.ICustomElement} element The element being removed.
             */
            private __removeElement(element: ICustomElement): void {
                this.__returnSelections(element);

                if (!isUndefined(element.className)) {
                    removeClass(element, DomEvents.config.styleConfig[0].className);
                }

                var plat = element.__plat;
                deleteProperty(plat, 'domEvent');
                if (isEmpty(plat)) {
                    deleteProperty(element, '__plat');
                }

                // check if no elements are left listening
                if (isEmpty(this._subscribers)) {
                    this.dispose();
                }
            }

            /**
             * Standardizes certain properties on the event object for custom events.
             * @param {plat.ui.IExtendedEvent} ev The event object to be standardized.
             */
            private __standardizeEventObject(ev: IExtendedEvent): IExtendedEvent {
                this.__setTouchPoint(ev);

                var isStart = this._startEvents.indexOf(ev.type) !== -1,
                    touches = ev.touches || this.__pointerEvents,
                    changedTouches = ev.changedTouches,
                    changedTouchesExist = !isUndefined(changedTouches),
                    timeStamp = ev.timeStamp;

                if (changedTouchesExist) {
                    if (isStart) {
                        ev = changedTouches[0];
                    } else {
                        var changedTouchIndex = this.__getTouchIndex(changedTouches);
                        if (changedTouchIndex >= 0) {
                            ev = changedTouches[changedTouchIndex];
                        } else if (this.__getTouchIndex(touches) >= 0) {
                            // we want to return null because our point of interest is in touches 
                            // but was not in changedTouches so it is still playing a part on the page
                            return null;
                        }
                    }
                }

                if (isStart) {
                    this.__setCapture(ev.target);
                }

                this.__normalizeButtons(ev);

                ev.touches = touches;
                ev.offset = this.__getOffset(ev);
                ev.timeStamp = timeStamp;

                return ev;
            }

            /**
             * Normalizes the 'buttons' property on an IExetendedEvent. 
             * @param {plat.ui.IExtendedEvent} ev The event.
             */
            private __normalizeButtons(ev: IExtendedEvent) {
                var buttons: number;
                if (isNumber(ev.buttons)) {
                    if (ev.buttons === 0) {
                        buttons = 1;
                    } else {
                        buttons = ev.buttons;
                    }
                } else if (isNumber((<any>ev).which) && (<any>ev).which > 0) {
                    buttons = (<any>ev).which;
                } else {
                    switch ((<any>ev).button) {
                        case -1:
                            buttons = 0;
                            break;
                        case 0:
                            buttons = 1;
                            break;
                        case 1:
                            buttons = 4;
                            break;
                        case 2:
                            buttons = 2;
                            break;
                        case 3:
                            buttons = 8;
                            break;
                        case 4:
                            buttons = 16;
                            break;
                        default:
                            buttons = 1;
                            break;
                    }
                }

                ev._buttons = buttons;
            }

            /**
             * Searches through the input array looking for the primary 
             * touch down index.
             * @param {Array<plat.ui.IExtendedEvent>} ev The array of touch event objects 
             * to search through.
             * not found.
             */
            private __getTouchIndex(touches: Array<IExtendedEvent>): number {
                var identifier = (this.__lastTouchDown || <IBaseEventProperties>{}).identifier,
                    length = touches.length;

                for (var i = 0; i < length; ++i) {
                    if (touches[i].identifier === identifier) {
                        return i;
                    }
                }

                return -1;
            }

            /**
             * Grabs the x and y offsets of an event object's target.
             * @param {plat.ui.IExtendedEvent} ev The current event object.
             */
            private __getOffset(ev: IExtendedEvent): IPoint {
                var target = this.__capturedTarget || <any>ev.target;
                if (isDocument(target)) {
                    return {
                        x: ev.clientX,
                        y: ev.clientY
                    };
                } else if (!isUndefined(ev.offsetX) && target === ev.target) {
                    return {
                        x: ev.offsetX,
                        y: ev.offsetY
                    };
                }

                var x = target.offsetLeft,
                    y = target.offsetTop;
                while (!isNull(target = target.offsetParent)) {
                    x += target.offsetLeft;
                    y += target.offsetTop;
                }

                return {
                    x: (ev.clientX - x),
                    y: (ev.clientY - y)
                };
            }

            // utility methods

            /**
             * Calculates the distance between two (x, y) coordinate points.
             * @param {number} x1 The x-coordinate of the first point.
             * @param {number} x2 The x-coordinate of the second point.
             * @param {number} y1 The y-coordinate of the first point.
             * @param {number} y2 The y-coordinate of the second point.
             */
            private __getDistance(x1: number, x2: number, y1: number, y2: number): number {
                var x = x2 - x1,
                    y = y2 - y1;
                return Math.sqrt((x * x) + (y * y));
            }

            /**
             * Calculates the velocity between two (x, y) coordinate points over a given time.
             * @param {number} dx The change in x position.
             * @param {number} dy The change in y position.
             * @param {number} dt The change in time.
             */
            private __getVelocity(dx: number, dy: number, dt: number): IVelocity {
                return {
                    x: Math.abs(dx / dt) || 0,
                    y: Math.abs(dy / dt) || 0
                };
            }

            /**
             * Calculates the direction of movement.
             * @param {number} dx The change in x position.
             * @param {number} dy The change in y position.
             * horiztonal and vertical directions of movement.
             */
            private __getDirection(dx: number, dy: number): IDirection {
                var distanceX = Math.abs(dx),
                    distanceY = Math.abs(dy),
                    lastDirection = (this.__lastMoveEvent || <IPointerEvent>{}).direction || <IDirection>{},
                    horizontal = dx === 0 ? (lastDirection.x || 'none') : (dx < 0 ? 'left' : 'right'),
                    vertical = dy === 0 ? (lastDirection.y || 'none') : (dy < 0 ? 'up' : 'down');

                return {
                    x: horizontal,
                    y: vertical,
                    primary: (distanceX === distanceY ? (lastDirection.primary || 'none') : (distanceX > distanceY ? horizontal : vertical))
                };
            }

            /**
             * Checks to see if a swipe direction has changed to recalculate 
             * an origin point.
             * @param {plat.ui.IDirection} direction The current vertical and horiztonal directions of movement.
             */
            private __checkForOriginChanged(direction: IDirection): boolean {
                var lastMove = this.__lastMoveEvent;
                if (isNull(lastMove)) {
                    this.__hasSwiped = false;
                    return true;
                }

                var swipeDirection = lastMove.direction;
                if (swipeDirection.x === direction.x && swipeDirection.y === direction.y) {
                    return false;
                }

                this.__swipeOrigin = {
                    clientX: lastMove.clientX,
                    clientY: lastMove.clientY,
                    timeStamp: lastMove.timeStamp,
                    target: lastMove.target,
                    identifier: lastMove.identifier
                };

                this.__hasSwiped = false;
                return true;
            }

            /**
             * Checks to see if a swipe event has been registered.
             * @param {plat.ui.IDirection} direction The current horizontal and vertical directions of movement.
             * @param {plat.ui.IVelocity} velocity The current horizontal and vertical velocities.
             */
            private __setRegisteredSwipes(direction: IDirection, velocity: IVelocity): void {
                var swipeTarget = <ICustomElement>(this.__swipeOrigin || <IBaseEventProperties>{}).target,
                    swipeGesture = this._gestures.$swipe,
                    minSwipeVelocity = DomEvents.config.velocities.minSwipeVelocity,
                    events = [swipeGesture];

                if (velocity.x >= minSwipeVelocity) {
                    this.__hasSwiped = true;
                    events.push(swipeGesture + direction.x);
                }

                if (velocity.y >= minSwipeVelocity) {
                    this.__hasSwiped = true;
                    events.push(swipeGesture + direction.y);
                }

                this.__swipeSubscribers = this.__findFirstSubscribers(swipeTarget, events);
            }

            /**
             * Checks to see if a swipe event has been registered.
             * @param {string} direction The current direction of movement.
             */
            private __isHorizontal(direction: string): boolean {
                return direction === 'left' || direction === 'right';
            }

            /**
             * Appends CSS to the head for gestures if needed.
             */
            private __appendGestureStyle(): void {
                var _document = this._document,
                    styleClasses: Array<IDefaultStyle>,
                    classLength: number;

                if (this._compat.platCss) {
                    return;
                } else if (!isNull(_document.styleSheets) && _document.styleSheets.length > 0) {
                    var styleSheet = <CSSStyleSheet>_document.styleSheets[0];
                    styleClasses = DomEvents.config.styleConfig;
                    classLength = styleClasses.length;
                    while (classLength-- > 0) {
                        styleSheet.insertRule(this.__createStyle(styleClasses[classLength]), 0);
                    }
                    return;
                }

                var head = _document.head,
                    style = <HTMLStyleElement>_document.createElement('style'),
                    textContent = '';

                style.type = 'text/css';
                styleClasses = DomEvents.config.styleConfig;
                classLength = styleClasses.length;
                while (classLength-- > 0) {
                    textContent = this.__createStyle(styleClasses[classLength]) + textContent;
                }
                style.textContent = textContent;
                head.appendChild(style);
            }

            /**
             * Creates a style text to append to the document head.
             * @param {plat.ui.IDefaultStyle} styleClass The object containing the custom styles for 
             * gestures.
             */
            private __createStyle(styleClass: IDefaultStyle): string {
                var styles: Array<string> = styleClass.styles || [],
                    styleLength = styles.length,
                    style = '.' + styleClass.className + ' { ',
                    textContent = '';

                styleLength = styles.length;

                for (var j = 0; j < styleLength; ++j) {
                    textContent += styles[j] + ';';
                }

                style += textContent + ' } ';

                return style;
            }

            /**
             * Determines whether the target is the currently focused element.
             * @param {EventTarget} target The event target.
             */
            private __isFocused(target: EventTarget): boolean {
                return target === this.__focusedElement;
            }

            /**
             * Handles HTMLInputElements in WebKit based touch applications.
             * @param {HTMLInputElement} target The event target.
             */
            private __handleInput(target: HTMLInputElement): void {
                var nodeName = target.nodeName,
                    focusedElement = this.__focusedElement || <HTMLInputElement>{};

                if (!isString(nodeName)) {
                    this.__focusedElement = null;
                    if (isFunction(focusedElement.blur)) {
                        focusedElement.blur();
                    }
                    return;
                }

                var remover: IRemoveListener;
                switch (nodeName.toLowerCase()) {
                    case 'input':
                        switch (target.type) {
                            case 'range':
                                if (isFunction(focusedElement.blur)) {
                                    focusedElement.blur();
                                }
                                break;
                            case 'button':
                            case 'submit':
                            case 'checkbox':
                            case 'radio':
                            case 'file':
                                if (isFunction(focusedElement.blur)) {
                                    focusedElement.blur();
                                }
                                postpone(() => {
                                    if (this._document.body.contains(target)) {
                                        target.click();
                                    }
                                });
                                break;
                            default:
                                this.__focusedElement = target;
                                target.focus();
                                remover = this.addEventListener(target, 'blur', () => {
                                    if (this.__isFocused(target)) {
                                        this.__focusedElement = null;
                                    }
                                    remover();
                                }, false);
                                return;
                        }
                        break;
                    case 'a':
                    case 'button':
                    case 'label':
                        if (isFunction(focusedElement.blur)) {
                            focusedElement.blur();
                        }
                        postpone(() => {
                            if (this._document.body.contains(target)) {
                                target.click();
                            }
                        });
                        break;
                    case 'textarea':
                        this.__focusedElement = target;
                        target.focus();
                        remover = this.addEventListener(target, 'blur', () => {
                            if (this.__isFocused(target)) {
                                this.__focusedElement = null;
                            }
                            remover();
                        }, false);
                        return;
                    case 'select':
                        if (isFunction(focusedElement.blur)) {
                            focusedElement.blur();
                        }
                        postpone(() => {
                            var _document = this._document;
                            if (_document.body.contains(target)) {
                                var event = <MouseEvent>_document.createEvent('MouseEvents');
                                event.initMouseEvent('mousedown', false, false, null, null, null,
                                    null, null, null, null, null, null, null, null, null);
                                target.dispatchEvent(event);
                            }
                        });
                        break;
                    default:
                        if (isFunction(focusedElement.blur)) {
                            focusedElement.blur();
                        }
                        postpone(() => {
                            if (this._document.body.contains(target) && isFunction(target.click)) {
                                target.click();
                            }
                        });
                        break;
                }

                this.__focusedElement = null;
            }

            /**
             * Handles the phantom click in WebKit based touch applications.
             */
            private __preventClickFromTouch(): void {
                var _document = this._document,
                    delayedClickRemover = defer(() => {
                        _document.removeEventListener('click', preventDefault, true);
                        _document.removeEventListener('mousedown', preventDefault, true);
                        _document.removeEventListener('mouseup', preventDefault, true);
                    }, 400),
                    preventDefault = (ev: Event) => {
                        ev.preventDefault();
                        ev.stopPropagation();
                        _document.removeEventListener(ev.type, preventDefault, true);
                        if (delayedClickRemover === noop) {
                            return false;
                        }
                        delayedClickRemover();
                        delayedClickRemover = noop;

                        var touchDown = this.__lastTouchDown;
                        if (isNull(touchDown) || this.__isFocused(touchDown.target)) {
                            return false;
                        }
                        this.__handleInput(<HTMLInputElement>touchDown.target);
                        return false;
                    };

                postpone(() => {
                    _document.addEventListener('click', preventDefault, true);
                    _document.addEventListener('mousedown', preventDefault, true);
                    _document.addEventListener('mouseup', preventDefault, true);
                });
            }

            /**
             * Removes selection capability from the element.
             * @param {Node} element The element to remove selections on.
             */
            private __removeSelections(element: Node): void {
                if (!isNode(element)) {
                    return;
                }

                if (!isUndefined((<any>element).onselectstart)) {
                    element.addEventListener('selectstart', this.__preventDefault, false);
                }
                if (!isUndefined((<any>element).ondragstart)) {
                    element.addEventListener('dragstart', this.__preventDefault, false);
                }
            }

            /**
             * Returns selection capability from the element.
             * @param {Node} element The element to return selections on.
             */
            private __returnSelections(element: Node): void {
                if (!isNode(element)) {
                    return;
                }

                if (!isUndefined((<any>element).onselectstart)) {
                    element.removeEventListener('selectstart', this.__preventDefault, false);
                }
                if (!isUndefined((<any>element).ondragstart)) {
                    element.removeEventListener('dragstart', this.__preventDefault, false);
                }
            }

            /**
             * Prevents default and stops propagation in all elements other than 
             * inputs and textareas.
             * @param {Event} ev The event object.
             */
            private __preventDefault(ev: Event): boolean {
                var nodeName = (<Node>ev.target).nodeName;
                if (isString(nodeName)) {
                    nodeName = nodeName.toLowerCase();
                }

                if (nodeName === 'input' || nodeName === 'textarea') {
                    return true;
                }

                ev.preventDefault();
                return false;
            }
        }
        register.injectable(__DomEvents, DomEvents);

        /**
         * The Type for referencing the '_domEventsConfig' injectable as a dependency.
         */
        export function IDomEventsConfig(): IDomEventsConfig {
            return DomEvents.config;
        }

        register.injectable(__IDomEventsConfig, IDomEventsConfig);

        /**
         * A class for managing a single custom event.
         */
        export class DomEvent {
            /**
             * Reference to the Document injectable.
             */
            protected _document: Document = acquire(__Document);

            /**
             * The node or window object associated with this DomEvent object.
             */
            element: any;

            /**
             * The event type associated with this DomEvent object.
             */
            event: string;

            /**
             * The event type to dispatch. Defaults to 'CustomEvent'.
             */
            eventType: string;

            /**
             * Initializes the element and event of this DomEvent object.
             * @param {Node} element The element associated with this DomEvent object.
             * @param {string} event The event associated with this DomEvent object.
             * @param {string} eventType? The event type associated with this DomEvent object. 
             * If not specified, it will default to 'CustomEvent'.
             */
            initialize(element: Node, event: string, eventType?: string): void;
            /**
             * Initializes the element and event of this DomEvent object.
             * @param {Window} element The window object.
             * @param {string} event The event associated with this DomEvent object.
             * @param {string} eventType? The event type associated with this DomEvent object. 
             * If not specified, it will default to 'CustomEvent'.
             */
            initialize(element: Window, event: string, eventType?: string): void;
            initialize(element: any, event: string, eventType?: string): void {
                this.element = element;
                this.event = event;
                this.eventType = isString(eventType) ? eventType : 'CustomEvent';
            }

            /**
             * Triggers its event on its element.
             * @param {Object} eventExtension? An event extension to extend the dispatched CustomEvent.
             * @param {any} detailArg? The detail arg to include in the event object
             * @param {Node} dispatchElement? The element to dispatch the Event from. If not specified, 
             * this instance's element will be used.
             */
            trigger(eventExtension?: Object, detailArg?: any, dispatchElement?: Node): boolean {
                var customEv = <CustomEvent>this._document.createEvent(this.eventType);
                if (isObject(eventExtension)) {
                    extend(customEv, eventExtension);
                }
                customEv.initCustomEvent(this.event, true, true, isNull(detailArg) ? 0 : detailArg);
                return <boolean>(dispatchElement || this.element).dispatchEvent(customEv);
            }
        }

        register.injectable(__DomEventInstance, DomEvent, null, __INSTANCE);

        /**
         * A specialized class for managing a single custom touch event in DomEvents.
         */
        class CustomDomEvent extends DomEvent {
            /**
             * The number of listeners added for this event on this element.
             */
            count = 0;

            /**
             * The constructor for a CustomDomEvent. Assigns the 
             * associated element and event.
             * @param {Node} element The associated element.
             * @param {string} event The associated event.
             */
            constructor(element: Node, event: string);
            /**
             * The constructor for a CustomDomEvent. Assigns the 
             * associated element and event.
             * @param {Window} element The window object.
             * @param {string} event The associated event.
             */
            constructor(element: Window, event: string);
            constructor(element: any, event: string) {
                super();
                this.element = element;
                this.event = event;
                this.count++;
            }

            /**
             * Triggers its event on its element.
             * @param {plat.ui.IPointerEvent} ev The current touch event object used to extend the 
             * newly created custom event.
             */
            trigger(ev: IPointerEvent): boolean {
                var customEv = <CustomEvent>this._document.createEvent('CustomEvent'),
                    element = this.element,
                    target = ev.target;

                this.__extendEventObject(customEv, ev);
                customEv.initCustomEvent(this.event, true, true, 0);

                var success = element.contains(target) ? target.dispatchEvent(customEv) : element.dispatchEvent(customEv);
                if (!success) {
                    ev.preventDefault();
                }

                return success;
            }

            /**
             * Extends the custom event to mimic a standardized touch event.
             * @param {plat.ui.IGestureEvent} customEv The newly created custom event object.
             * @param {plat.ui.IPointerEvent} ev The current touch event object.
             */
            private __extendEventObject(customEv: IGestureEvent, ev: IPointerEvent): void {
                // not using extend function because this gets called so often for certain events.
                var pointerType = ev.pointerType;

                customEv.clientX = ev.clientX;
                customEv.clientY = ev.clientY;
                customEv.offsetX = ev.offset.x;
                customEv.offsetY = ev.offset.y;
                customEv.direction = ev.direction || {
                    x: 'none',
                    y: 'none',
                    primary: 'none'
                };
                customEv.touches = ev.touches;
                customEv.velocity = ev.velocity || { x: 0, y: 0 };
                customEv.identifier = ev.identifier || 0;
                customEv.pointerType = isNumber(pointerType) ? this.__convertPointerType(pointerType, ev.type) : pointerType;
                customEv.screenX = ev.screenX;
                customEv.screenY = ev.screenY;
                customEv.pageX = ev.pageX;
                customEv.pageY = ev.pageY;
                customEv.buttons = ev._buttons;
            }

            /**
             * Converts pointer type to a standardized string.
             * @param {any} pointerType The pointer type as either a number or a string.
             * @param {string} eventType The touch event type.
             */
            private __convertPointerType(pointerType: any, eventType: string): string {
                switch (<any>pointerType) {
                    case MSPointerEvent.MSPOINTER_TYPE_MOUSE:
                        return 'mouse';
                    case MSPointerEvent.MSPOINTER_TYPE_PEN:
                        return 'pen';
                    case MSPointerEvent.MSPOINTER_TYPE_TOUCH:
                        return 'touch';
                }

                return (eventType.indexOf('mouse') === -1) ? 'touch' : 'mouse';
            }
        }

        /**
         * Describes the touch event listeners for the document.
         */
        interface ICustomEventListener extends IObject<EventListener> {
            /**
             * The touch start event.
             */
            start: EventListener;

            /**
             * The touch end event.
             */
            end: EventListener;

            /**
             * The touch move event.
             */
            move: EventListener;
        }

        /**
         * An extended event object containing coordinate, time, and target info.
         */
        export interface IBaseEventProperties {
            /**
             * Indicates which mouse button is being pressed in a mouse event.
             */
            _buttons?: number;

            /**
             * The x-coordinate of the event on the screen relative to the upper left corner of the 
             * browser window. This value cannot be affected by scrolling.
             */
            clientX?: number;

            /**
             * The y-coordinate of the event on the screen relative to the upper left corner of the 
             * browser window. This value cannot be affected by scrolling.
             */
            clientY?: number;

            /**
             * A unique touch identifier.
             */
            identifier?: number;

            /**
             * A timestamp.
             */
            timeStamp?: number;

            /**
             * The target of an Event object.
             */
            target?: EventTarget;
        }

        /**
         * An extended event object potentially containing coordinate and movement information.
         */
        export interface IExtendedEvent extends Event {
            _buttons?: number;

            /**
             * Indicates which mouse button is being pressed in a mouse event.
             */
            buttons?: number;

            /**
             * The x-coordinate of the event on the screen relative to the upper left corner of the 
             * browser window. This value cannot be affected by scrolling.
             */
            clientX?: number;

            /**
             * The y-coordinate of the event on the screen relative to the upper left corner of the 
             * browser window. This value cannot be affected by scrolling.
             */
            clientY?: number;

            /**
             * The x-coordinate of the event on the screen relative to the upper left corner of the 
             * physical screen or monitor.
             */
            screenX?: number;

            /**
             * The y-coordinate of the event on the screen relative to the upper left corner of the 
             * physical screen or monitor.
             */
            screenY?: number;

            /**
             * The x-coordinate of the event on the screen relative to the upper left corner of the 
             * fully rendered content area in the browser window. This value can be altered and/or affected by 
             * embedded scrollable pages when the scroll bar is moved.
             */
            pageX?: number;

            /**
             * The y-coordinate of the event on the screen relative to the upper left corner of the 
             * fully rendered content area in the browser window. This value can be altered and/or affected by 
             * embedded scrollable pages when the scroll bar is moved.
             */
            pageY?: number;

            /**
             * The x-coordinate of the event relative to the top-left corner of the 
             * offsetParent element that fires the event.
             */
            offsetX?: number;

            /**
             * The y-coordinate of the event relative to the top-left corner of the 
             * offsetParent element that fires the event.
             */
            offsetY?: number;

            /**
             * The x and y-coordinates of the event as an object relative to the top-left corner of the 
             * offsetParent element that fires the event.
             */
            offset: IPoint;

            /**
             * The horizontal and vertical directions associated with this event.
             */
            direction?: IDirection;

            /**
             * The potential velocity associated with the event.
             */
            velocity?: IVelocity;

            /**
             * An array containing all current touch points. The IExtendedEvents 
             * may slightly differ depending on the browser implementation.
             */
            touches?: Array<IExtendedEvent>;

            /**
             * An array containing all recently changed touch points. This should not be present on 
             * the triggered custom event.
             */
            changedTouches?: Array<IExtendedEvent>;

            /**
             * A unique touch identifier.
             */
            identifier?: number;
        }

        /**
         * An extended event object potentially containing coordinate and movement information as 
         * well as pointer type for pointer events.
         */
        export interface IPointerEvent extends IExtendedEvent {
            /**
             * The type of interaction associated with the touch event ('touch', 'pen', 'mouse', '').
             */
            pointerType?: string;

            /**
             * A unique touch identifier.
             */
            pointerId?: number;
        }

        /**
         * The type of event object passed into the listeners for our custom events.
         */
        export interface IGestureEvent extends CustomEvent {
            /**
             * Indicates which mouse button is being pressed in a mouse event.
             */
            buttons?: number;

            /**
             * The x-coordinate of the event on the screen relative to the upper left corner of the 
             * browser window. This value cannot be affected by scrolling.
             */
            clientX?: number;

            /**
             * The y-coordinate of the event on the screen relative to the upper left corner of the 
             * browser window. This value cannot be affected by scrolling.
             */
            clientY?: number;

            /**
             * The x-coordinate of the event on the screen relative to the upper left corner of the 
             * physical screen or monitor.
             */
            screenX?: number;

            /**
             * The y-coordinate of the event on the screen relative to the upper left corner of the 
             * physical screen or monitor.
             */
            screenY?: number;

            /**
             * The x-coordinate of the event on the screen relative to the upper left corner of the 
             * fully rendered content area in the browser window. This value can be altered and/or affected by 
             * embedded scrollable pages when the scroll bar is moved.
             */
            pageX?: number;

            /**
             * The y-coordinate of the event on the screen relative to the upper left corner of the 
             * fully rendered content area in the browser window. This value can be altered and/or affected by 
             * embedded scrollable pages when the scroll bar is moved.
             */
            pageY?: number;

            /**
             * The x-coordinate of the event relative to the top-left corner of the 
             * offsetParent element that fires the event.
             */
            offsetX?: number;

            /**
             * The y-coordinate of the event relative to the top-left corner of the 
             * offsetParent element that fires the event.
             */
            offsetY?: number;

            /**
             * The horizontal and vertical directions associated with this event.
             */
            direction?: IDirection;

            /**
             * The potential velocity associated with the event.
             */
            velocity?: IVelocity;

            /**
             * An array containing all current touch points. The IExtendedEvents 
             * may slightly differ depending on the browser implementation.
             */
            touches?: Array<IExtendedEvent>;

            /**
             * The type of interaction associated with the touch event ('touch', 'pen', 'mouse', '').
             */
            pointerType?: string;

            /**
             * A unique touch identifier.
             */
            identifier?: number;
        }

        /**
         * The listener interface for our custom DOM events.
         */
        export interface IGestureListener {
            /**
             * The method signature for a IGestureListener. 
             * An EventListener with the argument as an IGestureEvent.
             * @param {plat.ui.IGestureEvent} ev The gesture event object.
             */
            (ev?: IGestureEvent): void;
        }

        /**
         * Describes an object containing information 
         * regarding our base custom events.
         */
        export interface IBaseGestures<T> {
            /**
             * The string type|number of events associated with the tap event.
             */
            $tap?: T;

            /**
             * The string type|number of events associated with the dbltap event.
             */
            $dbltap?: T;

            /**
             * The string type|number of events associated with the hold event.
             */
            $hold?: T;

            /**
             * The string type|number of events associated with the release event.
             */
            $release?: T;

            /**
             * The string type|number of events associated with the swipe event.
             */
            $swipe?: T;

            /**
             * The string type|number of events associated with the track event.
             */
            $track?: T;

            /**
             * The string type|number of events associated with the trackend event.
             */
            $trackend?: T;
        }

        /**
         * Describes an object containing information 
         * regarding all our custom events.
         */
        export interface IGestures<T> extends IBaseGestures<T> {
            /**
             * The string type|number of events associated with the swipeleft event.
             */
            $swipeleft?: T;

            /**
             * The string type|number of events associated with the swiperight event.
             */
            $swiperight?: T;

            /**
             * The string type|number of events associated with the swipeup event.
             */
            $swipeup?: T;

            /**
             * The string type|number of events associated with the swipedown event.
             */
            $swipedown?: T;

            /**
             * The string type|number of events associated with the trackleft event.
             */
            $trackleft?: T;

            /**
             * The string type|number of events associated with the trackright event.
             */
            $trackright?: T;

            /**
             * The string type|number of events associated with the trackup event.
             */
            $trackup?: T;

            /**
             * The string type|number of events associated with the trackdown event.
             */
            $trackdown?: T;
        }

        /**
         * Describes an object to keep track of a single 
         * element's registered custom event types.
         */
        export interface IEventSubscriber extends IGestures<DomEvent> {
            /**
             * The total registered gesture count for the associated element.
             */
            gestureCount: number;
        }

        /**
         * Describes an object containing x and y coordinates.
         */
        export interface IPoint {
            /**
             * The x-coordinate.
             */
            x: number;

            /**
             * The y-coordinate.
             */
            y: number;
        }

        /**
         * Describes an object containing a direction in both the horizontal and vertical directions.
         */
        export interface IDirection {
            /**
             * The horizontal, x-direction
             * Can be either "left" or "right".
             */
            x: string;

            /**
             * The vertical, y-direction.
             * Can be either "up" or "down".
             */
            y: string;

            /**
             * The direction whose vector magnitude is the greatest.
             * Can be "left", "right", "up", "down".
             */
            primary: string;
        }

        /**
         * Describes an object containing a speed in both the horizontal and vertical directions.
         */
        export interface IVelocity {
            /**
             * The horizontal, x velocity.
             */
            x: number;

            /**
             * The vertical, y velocity.
             */
            y: number;
        }

        /**
         * Describes an object containing time interval information that 
         * governs the behavior of certain custom DOM events.
         */
        export interface IIntervals {
            /**
             * The max time in milliseconds a user can hold down on the screen 
             * for a tap event to be fired. Defaults to 200 ms.
             */
            tapInterval: number;

            /**
             * The max time in milliseconds a user can wait between consecutive 
             * taps for a dbltap event to be fired. Defaults to 300 ms.
             */
            dblTapInterval: number;

            /**
             * The time in milliseconds a user must hold down on the screen 
             * before a hold event is fired or a release event can be fired. 
             * Defaults to 400 ms.
             */
            holdInterval: number;

            /**
             * The delay in milliseconds between the time a user taps to the time 
             * the tap event fires. Used in the case where a double-tap-to-zoom 
             * feature is required. Defaults to 0 ms.
             */
            dblTapZoomDelay: number;
        }

        /**
         * Describes an object containing distance information that 
         * governs the behavior of certain custom DOM events.
         */
        export interface IDistances {
            /**
             * The minimum distance a user must move after touch down to register 
             * it as a scroll instead of a tap. Defaults to 5.
             */
            minScrollDistance: number;

            /**
             * The maximum distance between consecutive taps a user is allowed to 
             * register a dbltap event. Defaults to 20.
             */
            maxDblTapDistance: number;
        }

        /**
         * Describes an object containing velocity information that 
         * governs the behavior of certain custom DOM events.
         */
        export interface IVelocities {
            /**
             * The minimum velocity a user must move after touch down to register 
             * a swipe event. Defaults to 0.8.
             */
            minSwipeVelocity: number;
        }

        /**
         * Describes an object used for creating a custom class for styling an element 
         * listening for a custom DOM event.
         */
        export interface IDefaultStyle {
            /**
             * The className that will be used to define the custom style.
             */
            className: string;

            /**
             * An array of string styles in the format:
             * CSS identifier : value
             * (e.g. 'width : 100px')
             */
            styles: Array<string>;
        }

        /**
         * Describes a configuration object for all custom DOM events.
         */
        export interface IDomEventsConfig {
            /**
             * An object containing the different time intervals that govern the behavior of certain 
             * custom DOM events.
             */
            intervals: IIntervals;

            /**
             * An object containing the different minimum/maximum distances that govern the behavior of certain 
             * custom DOM events.
             */
            distances: IDistances;

            /**
             * An object containing the different minimum/maximum velocities that govern the behavior of certain 
             * custom DOM events.
             */
            velocities: IVelocities;

            /**
             * The default CSS styles applied to elements listening for custom DOM events.
             */
            styleConfig: Array<IDefaultStyle>;
        }

    /**
     * Holds all the classes and interfaces related to UI animation components for platypus.
     */
        export module animations {
            /**
             * A class used for animating elements.
             */
            export class Animator {
                protected static _inject: any = {
                    _compat: __Compat
                };

                /**
                 * Reference to the Compat injectable.
                 */
                protected _compat: Compat;

                /**
                 * All elements currently being animated.
                 */
                protected _elements: IObject<IAnimatedElement> = {};

                /**
                 * Animates the element with the defined animation denoted by the key.
                 * @param {Element} element The Element to be animated.
                 * @param {string} key The identifier specifying the type of animation.
                 * @param {any} options? Specified options for the animation.
                 */
                animate(element: Element, key: string, options?: any): IAnimatingThenable {
                    if (!isNode(element) || element.nodeType !== Node.ELEMENT_NODE) {
                        return this.resolve();
                    }

                    var animation = animationInjectors[key],
                        jsAnimation = jsAnimationInjectors[key],
                        animationInstance: BaseAnimation;

                    if (!this._compat.animationSupported || isUndefined(animation)) {
                        if (isUndefined(jsAnimation)) {
                            return this.resolve();
                        }

                        animationInstance = jsAnimation.inject();
                    } else {
                        animationInstance = animation.inject();
                    }

                    var animatingParentId = this.__parentIsAnimating(element),
                        id = this.__setAnimationId(element, animationInstance),
                        // instantiate needs to be called after __setAnimationId in the case that 
                        // the same element is animating while in an animation
                        animationPromise: IAnimationThenable<any> = animationInstance.instantiate(element, options),
                        animatedElement = this._elements[id];

                    if (!isNull(animatingParentId)) {
                        animatedElement.animationEnd(true);

                        var parent = this._elements[animatingParentId];
                        if (isPromise(parent.promise)) {
                            return animationPromise.then(() => {
                                return () => {
                                    return parent.promise;
                                };
                            });
                        }

                        return this.resolve();
                    }

                    this.__stopChildAnimations(element);
                    animationPromise = animationPromise.then(() => {
                        animatedElement.promise = null;
                        animatedElement.animationEnd();
                        return () => {
                            return animationPromise;
                        };
                    });

                    if (isPromise(animatedElement.promise)) {
                        return animatedElement.promise.then(() => {
                            animationInstance.start();
                            return (animatedElement.promise = animationPromise);
                        });
                    }

                    animationInstance.start();
                    return (animatedElement.promise = animationPromise);
                }

                /**
                 * Immediately resolves an empty AnimationPromise.
                 * AnimationPromise.
                 */
                resolve(): IAnimatingThenable {
                    var animationPromise = new AnimationPromise((resolve) => {
                        resolve(<IGetAnimatingThenable>() => {
                            return <IAnimationThenable<void>><any>animationPromise;
                        });
                    });

                    return animationPromise;
                }

                /**
                 * Checks whether or not any parent elements are animating.
                 * @param {Node} element The element whose parents we need to check.
                 */
                private __parentIsAnimating(element: Node): string {
                    var animationId: string;
                    while (!isDocument(element = element.parentNode) && element.nodeType === Node.ELEMENT_NODE) {
                        if (hasClass(<HTMLElement>element, __Animating)) {
                            animationId = ((<ICustomElement>element).__plat || <ICustomElementProperty>{}).animation;
                            if (isString(animationId)) {
                                if (!isNull(this._elements[animationId])) {
                                    return animationId;
                                }

                                deleteProperty((<ICustomElement>element).__plat, 'animation');
                                if (isEmpty(plat)) {
                                    deleteProperty(element, '__plat');
                                }
                                removeClass(<HTMLElement>element, __Animating);
                            }
                        }
                    }
                }

                /**
                 * Sets an new, unique animation ID and denotes the element as currently being animated.
                 * @param {Node} element The element being animated.
                 * @param {plat.ui.animations.BaseAnimation} animationInstance The animation instance doing the animating.
                 */
                private __setAnimationId(element: Node, animationInstance: BaseAnimation): string {
                    var elements = this._elements,
                        plat = (<ICustomElement>element).__plat,
                        id: string;

                    if (isUndefined(plat)) {
                        (<ICustomElement>element).__plat = plat = {};
                    }

                    if (isUndefined(plat.animation)) {
                        plat.animation = id = uniqueId('animation_');
                    } else {
                        id = plat.animation;
                    }

                    var animatedElement = elements[id],
                        removeListener = (cancel?: boolean, reanimating?: boolean) => {
                            if (cancel === true) {
                                animationInstance.cancel();
                                animationInstance.end();
                                if (reanimating === true) {
                                    return;
                                }
                            }

                            removeClass(<HTMLElement>element, __Animating);
                            deleteProperty(elements, id);
                            deleteProperty(plat, 'animation');
                            if (isEmpty(plat)) {
                                deleteProperty(element, '__plat');
                            }
                        };

                    if (isUndefined(animatedElement)) {
                        addClass(<HTMLElement>element, __Animating);
                        elements[id] = {
                            animationEnd: removeListener
                        };
                    } else {
                        animatedElement.animationEnd(true, true);
                        animatedElement.animationEnd = removeListener;
                    }

                    return id;
                }

                /**
                 * Forces child nodes of an animating element to stop animating.
                 * @param {Element} element The element being animated.
                 */
                private __stopChildAnimations(element: Element): void {
                    var elements = this._elements,
                        customAnimationElements = Array.prototype.slice.call(element.querySelectorAll('.' + __Animating)),
                        customAnimationElement: ICustomElement,
                        animatedElement: IAnimatedElement,
                        plat: ICustomElementProperty,
                        id: string;

                    while (customAnimationElements.length > 0) {
                        customAnimationElement = customAnimationElements.pop();
                        plat = customAnimationElement.__plat || <ICustomElementProperty>{};
                        id = plat.animation;
                        if (isNull(id)) {
                            continue;
                        }

                        animatedElement = elements[id] || <IAnimatedElement>{};
                        if (isFunction(animatedElement.animationEnd)) {
                            animatedElement.animationEnd(true);
                        }
                    }
                }
            }
            register.injectable(__Animator, Animator);

            /**
             * Describes an object representing a currenlty animated element.
             */
            export interface IAnimatedElement {
                /**
                 * The function called at the conclusion of the animation.
                 * @param {boolean} cancel? Specifies whether the animation is being cancelled.
                 * @param {boolean} reanimating? Specifies whether the element is being reanimated while 
                 * in a current animation. Cancel must be set to true for reanimation to take effect.
                 */
                animationEnd: (cancel?: boolean, reanimating?: boolean) => void;

                /**
                 * A promise representing an element's current state of animation.
                 */
                promise?: IAnimationThenable<any>;
            }

            /**
             * Describes a function used to obtain an animating parent element's animation thenable.
             */
            export interface IGetAnimatingThenable {
                /**
                 * The method signature for IGetAnimatingThenable.
                 */
                (): IAnimationThenable<void>;
            }

            /**
             * Describes a type of Promise that can be optionally cancelled and/or disposed of. 
             * Further, in the case where it may have a parent that is animating (which will cause it to immediately cancel and fulfill 
             * itself, it resolves with a IGetAnimatingThenable for acccessing 
             * the IAnimationThenable of the animating parent element.
             */
            export class AnimationPromise extends async.Promise<IGetAnimatingThenable> implements IAnimatingThenable {
                /**
                 * The animation instance to cancel if needed.
                 */
                private __animationInstance: BaseAnimation;

                /**
                 * The constructor method for the {@link plat.async.AjaxPromise}.
                 * @param {(resolve: (value?: plat.ui.animations.IParentAnimationFn) => any) => void} resolveFunction A resolve function 
                 * that only allows for a resolve of void and no reject.
                 */
                constructor(resolveFunction: (resolve: (value?: IGetAnimatingThenable) => any) => void);
                /**
                 * The constructor method for the {@link plat.async.AjaxPromise}.
                 * @param {(resolve: (value?: plat.ui.animations.IParentAnimationFn) => any) => void} resolveFunction A resolve function 
                 * that only allows for a resolve of void and no reject.
                 * @param {any} promise The promise object to allow for cancelling the {@link plat.ui.animations.AnimationPromise}.
                 */
                constructor(resolveFunction: (resolve: (value?: IGetAnimatingThenable) => any) => void, promise: any);
                constructor(resolveFunction: (resolve: (value?: IGetAnimatingThenable) => any) => void, promise?: any) {
                    super(resolveFunction);
                    if (!isNull(promise)) {
                        this.__animationInstance = promise.__animationInstance;
                    }
                }

                /**
                 * Initializes the promise, providing it with the {@link plat.ui.animations.BaseAnimation} instance.
                 * @param {plat.ui.animations.BaseAnimation} instance The animation instance for this promise.
                 */
                initialize(instance: BaseAnimation): void {
                    if (isObject(instance) && isNull(this.__animationInstance)) {
                        this.__animationInstance = instance;
                    }
                }

                /**
                 * A method to cancel the associated animation.
                 */
                cancel(): IAnimatingThenable {
                    var animationInstance = this.__animationInstance;
                    if (!isNull(animationInstance)) {
                        if (isFunction(animationInstance.cancel)) {
                            animationInstance.cancel();
                        }
                        if (isFunction(animationInstance.end)) {
                            animationInstance.end();
                        }
                    }

                    return this;
                }

                /**
                 * A method to dispose the associated animation in order to remove any end states 
                 * as determined by the animation class itself.
                 */
                dispose(): IAnimatingThenable {
                    var animationInstance = this.__animationInstance;
                    if (!isNull(animationInstance)) {
                        if (isFunction(animationInstance.dispose)) {
                            animationInstance.dispose();
                        }
                    }

                    return this;
                }

                /**
                 * Takes in two methods, called when/if the promise fulfills.
                 * next then method in the promise chain.
                 * @param {(success: plat.ui.animations.IParentAnimationFn) => U} onFulfilled A method called when/if the promise fulfills. 
                 * If undefined the next onFulfilled method in the promise chain will be called.
                 */
                then<U>(onFulfilled: (success: IGetAnimatingThenable) => U): IAnimationThenable<U>;
                /**
                 * Takes in two methods, called when/if the promise fulfills.
                 * next then method in the promise chain.
                 * @param {(success: plat.ui.animations.IParentAnimationFn) => plat.ui.animations.IAnimationThenable<U>} onFulfilled 
                 * A method called when/if the promise fulfills. 
                 * If undefined the next onFulfilled method in the promise chain will be called.
                 */
                then<U>(onFulfilled: (success: IGetAnimatingThenable) => IAnimationThenable<U>): IAnimationThenable<U>;
                /**
                 * Takes in two methods, called when/if the promise fulfills.
                 * next then method in the promise chain.
                 * @param {(success: plat.ui.animations.IParentAnimationFn) => plat.async.IThenable<U>} onFulfilled 
                 * A method called when/if the promise fulfills. 
                 * If undefined the next onFulfilled method in the promise chain will be called.
                 */
                then<U>(onFulfilled: (success: IGetAnimatingThenable) => async.IThenable<U>): IAnimationThenable<U>;
                then<U>(onFulfilled: (success: IGetAnimatingThenable) => any): IAnimationThenable<U> {
                    return <IAnimationThenable<U>><any>super.then<U>(onFulfilled);
                }

                /**
                 * A wrapper method for Promise.then(undefined, onRejected);
                 * @param {(error: any) => plat.ui.animations.IAnimationThenable<U>} onRejected A method called when/if the promise rejects. 
                 * If undefined the next onRejected method in the promise chain will be called.
                 */
                catch<U>(onRejected: (error: any) => IAnimationThenable<U>): IAnimationThenable<U>;
                /**
                 * A wrapper method for Promise.then(undefined, onRejected);
                 * @param {(error: any) => U} onRejected A method called when/if the promise rejects. If undefined the next
                 * onRejected method in the promise chain will be called.
                 */
                catch<U>(onRejected: (error: any) => U): IAnimationThenable<U>;
                catch<U>(onRejected: (error: any) => any): IAnimationThenable<U> {
                    return <IAnimationThenable<U>><any>super.catch<U>(onRejected);
                }
            }

            /**
             * Describes a chaining function that fulfills when the previous link is complete and is 
             * able to be caught in the case of an error.
             */
            export interface IAnimationThenable<R> extends async.IThenable<R> {
                /**
                 * Initializes the promise, providing it with the {@link plat.ui.animations.BaseAnimation} instance.
                 * @param {plat.ui.animations.BaseAnimation} instance The animation instance for this promise.
                 */
                initialize? (instance: BaseAnimation): void;

                /**
                 * A method to cancel the associated animation.
                 */
                cancel(): IAnimationThenable<R>;

                /**
                 * A method to dispose the associated animation in order to remove any end states 
                 * as determined by the animation class itself.
                 */
                dispose(): IAnimationThenable<R>;

                /**
                 * Takes in two methods, called when/if the promise fulfills/rejects.
                 * @param {(success: R) => plat.ui.animations.IAnimationThenable<U>} onFulfilled A method called when/if the promise fulills. 
                 * If undefined the next onFulfilled method in the promise chain will be called.
                 * @param {(error: any) => plat.ui.animations.IAnimationThenable<U>} onRejected? A method called when/if the promise rejects. 
                 * If undefined the next onRejected method in the promise chain will be called.
                 */
                then<U>(onFulfilled: (success: R) => IAnimationThenable<U>,
                    onRejected?: (error: any) => IAnimationThenable<U>): IAnimationThenable<U>;
                /**
                 * Takes in two methods, called when/if the promise fulfills/rejects.
                 * @param {(success: R) => plat.ui.animations.IAnimationThenable<U>} onFulfilled A method called when/if the promise fulills. 
                 * If undefined the next onFulfilled method in the promise chain will be called.
                 * @param {(error: any) => U} onRejected? A method called when/if the promise rejects. 
                 * If undefined the next onRejected method in the promise chain will be called.
                 */
                then<U>(onFulfilled: (success: R) => IAnimationThenable<U>, onRejected?: (error: any) => U): IAnimationThenable<U>;
                /**
                 * Takes in two methods, called when/if the promise fulfills/rejects.
                 * @param {(success: R) => U} onFulfilled A method called when/if the promise fulills. 
                 * If undefined the next onFulfilled method in the promise chain will be called.
                 * @param {(error: any) => plat.ui.animations.IAnimationThenable<U>} onRejected? A method called when/if the promise rejects. 
                 * If undefined the next onRejected method in the promise chain will be called.
                 */
                then<U>(onFulfilled: (success: R) => U, onRejected?: (error: any) => IAnimationThenable<U>): IAnimationThenable<U>;
                /**
                 * Takes in two methods, called when/if the promise fulfills/rejects.
                 * @param {(success: R) => U} onFulfilled A method called when/if the promise fulills. 
                 * If undefined the next onFulfilled method in the promise chain will be called.
                 * @param {(error: any) => U} onRejected? A method called when/if the promise rejects. 
                 * If undefined the next onRejected method in the promise chain will be called.
                 */
                then<U>(onFulfilled: (success: R) => U, onRejected?: (error: any) => U): IAnimationThenable<U>;

                /**
                 * A wrapper method for Promise.then(undefined, onRejected);
                 * @param {(error: any) => plat.ui.animations.IAnimationThenable<U>} onRejected A method called when/if the promise rejects. 
                 * If undefined the next onRejected method in the promise chain will be called.
                 */
                catch<U>(onRejected: (error: any) => IAnimationThenable<U>): IAnimationThenable<U>;
                /**
                 * A wrapper method for Promise.then(undefined, onRejected);
                 * @param {(error: any) => U} onRejected A method called when/if the promise rejects. If undefined the next
                 * onRejected method in the promise chain will be called.
                 */
                catch<U>(onRejected: (error: any) => U): IAnimationThenable<U>;
            }

            /**
             * Describes a type of IPromise that resolves when an animation is 
             * finished. It can be optionally cancelled and/or disposed of. Further, in the case where it may have 
             * a parent that is animating (which will cause it to immediately cancel and fulfill itself, it resolves  
             * with a IGetAnimatingThenable for acccessing 
             * the IAnimationThenable of the animating parent element.
             */
            export interface IAnimatingThenable extends IAnimationThenable<IGetAnimatingThenable> { }

            /**
             * A class representing a single animation for a single element.
             */
            export class BaseAnimation {
                protected static _inject: any = {
                    _compat: __Compat,
                    dom: __Dom
                };

                /**
                 * Reference to the Compat injectable.
                 */
                protected _compat: Compat;

                /**
                 * The node having the animation performed on it.
                 */
                element: HTMLElement;

                /**
                 * Contains DOM helper methods for manipulating this control's element.
                 */
                dom: Dom;

                /**
                 * Specified options for the animation.
                 */
                options: any;

                /**
                 * The resolve function for the end of the animation.
                 */
                protected _resolve: () => void;

                /**
                 * A function for initializing the animation or any of its properties before start.
                 */
                initialize(): void { }

                /**
                 * A function denoting the start of the animation.
                 */
                start(): void { }

                /**
                 * A function to be called when the animation is over.
                 */
                end(): void {
                    if (isFunction(this._resolve)) {
                        this._resolve();
                        this._resolve = null;
                    }
                }

                /**
                 * A function to be called to let it be known the animation is being cancelled.
                 */
                cancel(): void { }

                /**
                 * A function for reverting any modifications or changes that may have been made as a 
                 * result of this animation.
                 */
                dispose(): void { }

                /**
                 * Initializes the element and key properties of this animation and grabs a 
                 * reference to its resolve function.
                 * @param {Element} element The element on which the animation will occur.
                 * @param {any} options Specified options for the animation.
                 * animation is complete and end() is called.
                 */
                instantiate(element: Element, options?: any): IAnimatingThenable {
                    this.element = <HTMLElement>element;
                    this.options = options;

                    var promise = new AnimationPromise((resolve) => {
                        this._resolve = resolve;
                        this.initialize();
                    });

                    promise.initialize(this);

                    return promise;
                }
            }

            /**
             * A class representing a single CSS animation for a single element.
             */
            export class CssAnimation extends BaseAnimation {
                /**
                 * A set of browser compatible CSS animation events capable of being listened to.
                 */
                private __animationEvents: IAnimationEvents = this._compat.animationEvents;
                /**
                 * A collection of animation event subscriptions used for chaining.
                 */
                private __subscribers: Array<() => void> = [];
                /**
                 * The function to stop listening to the current event/animation in occurrence.
                 */
                private __removeListener: IRemoveListener;

                /**
                 * A function for reverting any modifications or changes that may have been made as a 
                 * result of this animation.
                 */
                dispose(): void {
                    if (isFunction(this.__removeListener)) {
                        this.__removeListener();
                        this.__removeListener = null;
                    }
                    this.__subscribers = [];
                }
        
                /**
                 * A function to listen to the start of an animation event.
                 * @param {() => void} listener The function to call when the animation begins.
                 */
                animationStart(listener: () => void): CssAnimation {
                    var animationEvents = this.__animationEvents;
                    if (isUndefined(animationEvents)) {
                        return this;
                    }

                    return this.__addEventListener(animationEvents.$animationStart, listener);
                }
        
                /**
                 * A function to listen to the start of a transition event.
                 * @param {() => void} listener The function to call when the transition begins.
                 */
                transitionStart(listener: () => void): CssAnimation {
                    var animationEvents = this.__animationEvents;
                    if (isUndefined(animationEvents)) {
                        return this;
                    }

                    return this.__addEventListener(animationEvents.$transitionStart, listener);
                }
        
                /**
                 * A function to listen to the end of an animation event.
                 * @param {() => void} listener The function to call when the animation ends.
                 */
                animationEnd(listener: () => void): CssAnimation {
                    var animationEvents = this.__animationEvents;
                    if (isUndefined(animationEvents)) {
                        return this;
                    }

                    return this.__addEventListener(animationEvents.$animationEnd, listener);
                }
        
                /**
                 * A function to listen to the end of a transition event.
                 * @param {() => void} listener The function to call when the transition ends.
                 */
                transitionEnd(listener: () => void): CssAnimation {
                    var animationEvents = this.__animationEvents;
                    if (isUndefined(animationEvents)) {
                        return this;
                    }

                    return this.__addEventListener(animationEvents.$transitionEnd, listener);
                }
        
                /**
                 * Adds the listener for the desired event and handles subscription management and 
                 * chaining.
                 * @param {string} event The event to subscribe to.
                 * @param {() => void} listener The function to call when the event fires.
                 */
                private __addEventListener(event: string, listener: () => void): CssAnimation {
                    var subscribers = this.__subscribers,
                        subscriber = () => {
                            this.__removeListener = this.dom.addEventListener(this.element, event,(ev: Event) => {
                                this.__removeListener();
                                this.__removeListener = null;

                                if (subscribers.length === 0) {
                                    return;
                                }

                                listener.call(this);
                                subscribers.shift();

                                if (subscribers.length === 0) {
                                    return;
                                }

                                subscribers[0]();
                            }, false);
                        };

                    subscribers.push(subscriber);

                    if (subscribers.length === 1) {
                        subscriber();
                    }

                    return this;
                }
            }

            /**
             * A class for creating a single JavaScript animation for a single element.
             */
            export class JsAnimation extends BaseAnimation {
                /**
                 * A flag specifying that this animation is a JavaScript implementation.
                 */
                isJs = true;
            }

            /**
             * A simple CSS Animation class that places the 'plat-animation' class on an 
             * element, checks for animation properties, and waits for the animation to end.
             */
            export class SimpleCssAnimation extends CssAnimation {
                protected static _inject: any = {
                    _window: __Window
                };

                /**
                 * Reference to the Window injectable.
                 */
                protected _window: Window;

                /**
                 * The class name added to the animated element.
                 */
                className = __SimpleAnimation;

                /**
                 * An optional options object that can denote a pseudo element animation.
                 */
                options: ISimpleCssAnimationOptions;

                /**
                 * Adds the class to start the animation.
                 */
                initialize(): void {
                    var element = this.element,
                        className = this.className,
                        hasClassName = hasClass(element, className);

                    removeClass(element, className + ' ' + className + __END_SUFFIX);
                    if (hasClassName) {
                        postpone(addClass, [element, className]);
                        return;
                    }

                    addClass(element, className);
                }

                /**
                 * A function denoting the start of the animation.
                 */
                start(): void {
                    var animationId = this._compat.animationEvents.$animation,
                        element = this.element,
                        className = this.className,
                        computedStyle = this._window.getComputedStyle(element, (this.options || <ISimpleCssAnimationOptions>{}).pseudo),
                        animationName = computedStyle[<any>(animationId + 'Name')];

                    if (animationName === '' ||
                        animationName === 'none' ||
                        computedStyle[<any>(animationId + 'PlayState')] === 'paused') {
                        replaceClass(element, className, className + __END_SUFFIX);
                        this.end();
                        return;
                    }

                    this.animationEnd(() => {
                        replaceClass(element, className, className + __END_SUFFIX);
                        this.end();
                    });
                }

                /**
                 * A function to be called to let it be known the animation is being cancelled. 
                 * Replaces the animation class with the animation class and "-end" appended to it 
                 * to allow it to jump to final state.
                 */
                cancel(): void {
                    var className = this.className;
                    replaceClass(this.element, className, className + __END_SUFFIX);
                }

                /**
                 * A function to remove the end state from the element. Can be useful when combining 
                 * multiple types of animations on the same element.
                 */
                dispose(): void {
                    var className = this.className;
                    removeClass(this.element, className + ' ' + className + __END_SUFFIX);
                }
            }

            register.animation(__SimpleAnimation, SimpleCssAnimation);

            /**
             * An interface describing the options for SimpleCssAnimation.
             */
            export interface ISimpleCssAnimationOptions {
                /**
                 * The pseudo element identifier (i.e. '::before' if defined as .red::before).
                 */
                pseudo?: string;
            }

            /**
             * An animation control that fades in an element as defined by the included CSS.
             */
            export class FadeIn extends SimpleCssAnimation {
                /**
                 * The class name added to the element fading in.
                 */
                className = __FadeIn;
            }

            register.animation(__FadeIn, FadeIn);

            /**
             * An animation control that fades out an element as defined by the included CSS.
             */
            export class FadeOut extends SimpleCssAnimation {
                /**
                 * The class name added to the element fading out.
                 */
                className = __FadeOut;
            }

            register.animation(__FadeOut, FadeOut);

            /**
             * An animation control that causes an element to enter as defined by the included CSS.
             */
            export class Enter extends SimpleCssAnimation {
                /**
                 * The class name added to the entering element.
                 */
                className = __Enter;
            }

            register.animation(__Enter, Enter);

            /**
             * An animation control that causes an element to leave as defined by the included CSS.
             */
            export class Leave extends SimpleCssAnimation {
                /**
                 * The class name added to the leaving element.
                 */
                className = __Leave;
            }

            register.animation(__Leave, Leave);

            /**
             * A simple CSS Animation class that places the 'plat-transition' class on an 
             * element, checks for transition properties, and waits for the transition to end.
             */
            export class SimpleCssTransition extends CssAnimation {
                protected static _inject: any = {
                    _window: __Window
                };

                /**
                 * Reference to the Window injectable.
                 */
                protected _window: Window;

                /**
                 * An optional options object that can denote a pseudo element animation and specify 
                 * properties to modify during the transition.
                 */
                options: ISimpleCssTransitionOptions;

                /**
                 * The class name added to the animated element.
                 */
                className = __SimpleTransition;

                /**
                 * A JavaScript object containing all modified properties as a result 
                 * of this animation. Used in the case of a disposal to reset the changed 
                 * properties.
                 */
                protected _modifiedProperties: IObject<string> = {};

                /**
                 * Denotes whether or not the animation was ever started.
                 */
                protected _started = false;

                /**
                 * Adds the class to enable the transition.
                 */
                initialize(): void {
                    addClass(this.element, this.className);
                }

                /**
                 * A function denoting the start of the animation.
                 */
                start(): void {
                    var transitionId = this._compat.animationEvents.$transition,
                        element = this.element,
                        endFn = () => {
                            removeClass(element, this.className);
                            this.end();
                        },
                        computedStyle = this._window.getComputedStyle(element, (this.options || <ISimpleCssTransitionOptions>{}).pseudo),
                        transitionProperty = computedStyle[<any>(transitionId + 'Property')],
                        transitionDuration = computedStyle[<any>(transitionId + 'Duration')];

                    this._started = true;

                    if (transitionProperty === '' || transitionProperty === 'none' ||
                        transitionDuration === '' || transitionDuration === '0s') {
                        this._animate();
                        endFn();
                        return;
                    }

                    this.transitionEnd(endFn);

                    if (this._animate()) {
                        return;
                    }

                    endFn();
                }

                /**
                 * A function to be called to let it be known the animation is being cancelled.
                 */
                cancel(): void {
                    removeClass(this.element, this.className);

                    if (this._started) {
                        return;
                    }

                    this._animate();
                }

                /**
                 * A function to be called to reset the last transition to its previous state.
                 */
                dispose(): void {
                    var style = this.element.style || {},
                        modifiedProperties = this._modifiedProperties,
                        keys = Object.keys(modifiedProperties),
                        key: any;

                    while (keys.length > 0) {
                        key = keys.pop();
                        style[key] = modifiedProperties[key];
                    }
                }

                /**
                 * Animate the element based on the options passed in.
                 * If false, the control should begin cleaning up.
                 */
                protected _animate(): boolean {
                    var style = this.element.style || {},
                        properties = (this.options || <ISimpleCssTransitionOptions>{}).properties || {},
                        keys = Object.keys(properties),
                        length = keys.length,
                        key: any,
                        modifiedProperties = this._modifiedProperties,
                        currentProperty: string,
                        newProperty: string,
                        unchanged = 0;

                    while (keys.length > 0) {
                        key = keys.shift();
                        currentProperty = style[key];
                        newProperty = properties[key];
                        if (!isString(newProperty)) {
                            unchanged++;
                            continue;
                        }

                        style[key] = newProperty;
                        if (currentProperty === style[key]) {
                            unchanged++;
                        } else {
                            modifiedProperties[key] = currentProperty;
                        }
                    }

                    return unchanged < length;
                }
            }

            register.animation(__SimpleTransition, SimpleCssTransition);

            export interface ISimpleCssTransitionOptions extends ISimpleCssAnimationOptions {
                /**
                 * A JavaScript object with key value pairs for adjusting transition values. 
                 * (e.g. { width: '800px' } would set the element's width to 800px.
                 */
                properties: IObject<string>;
            }
        }

    /**
     * Holds classes and interfaces related to UI control components in platypus.
     */
        export module controls {


            export class Viewport extends TemplateControl implements routing.ISupportRouteNavigation {
                protected static _inject: any = {
                    _Router: __RouterStatic,
                    _Promise: __Promise,
                    _Injector: __InjectorStatic,
                    _ElementManagerFactory: __ElementManagerFactory,
                    _document: __Document,
                    _managerCache: __ManagerCache,
                    _animator: __Animator,
                    navigator: __NavigatorInstance
                };

                protected _Router: typeof routing.Router;
                protected _Promise: async.IPromise;
                protected _Injector: typeof dependency.Injector;
                protected _ElementManagerFactory: processing.IElementManagerFactory;
                protected _document: Document;

                /**
                 * Reference to an injectable that caches ElementManagers.
                 */
                protected _managerCache: storage.Cache<processing.ElementManager>;

                /**
                 * Reference to the Animator injectable.
                 */
                protected _animator: animations.Animator;

                /**
                 * A promise used for disposing the end state of the previous animation prior to starting a new one.
                 */
                protected _animationPromise: animations.IAnimationThenable<animations.IGetAnimatingThenable>;

                navigator: routing.Navigator;
                router: routing.Router;
                parentRouter: routing.Router;
                controls: Array<ViewControl>;
                nextInjector: dependency.Injector<ViewControl>;
                nextView: ViewControl;

                initialize() {
                    var router = this.router = this._Router.currentRouter(),
                        parentViewport = this._getParentViewport(),
                        parentRouter: routing.Router;

                    if (!(isNull(parentViewport) || isNull(parentViewport.router))) {
                        parentRouter = this.parentRouter = parentViewport.router;
                        parentRouter.addChild(router);
                    }

                    this.navigator.initialize(router);
                }

                setTemplate() {
                    postpone(() => {
                        this.router.register(this);
                    });
                }

                canNavigateTo(routeInfo: routing.IRouteInfo): async.IThenable<boolean> {
                    var getRouter = this._Router.currentRouter,
                        currentRouter = getRouter(),
                        response: any = true,
                        injector: dependency.Injector<ViewControl> = this._Injector.getDependency(routeInfo.delegate.view),
                        view = injector.inject(),
                        parameters = routeInfo.parameters,
                        resolve = this._Promise.resolve.bind(this._Promise),
                        nextRouter = getRouter();

                    if (!isObject(view)) {
                        return resolve();
                    }

                    if (currentRouter !== nextRouter) {
                        nextRouter.initialize(this.router);
                        var navigator: routing.Navigator = acquire(__NavigatorInstance);
                        view.navigator = navigator;
                        navigator.initialize(nextRouter);
                    } else {
                        view.navigator = this.navigator;
                    }

                    if (isFunction(view.canNavigateTo)) {
                        response = view.canNavigateTo(parameters, routeInfo.query);
                    }

                    return resolve(response).then((canNavigateTo: boolean) => {
                        this.nextInjector = injector;
                        this.nextView = view;
                        return canNavigateTo;
                    });
                }

                canNavigateFrom(): async.IThenable<boolean> {
                    var view = this.controls[0],
                        response: any = true;

                    if (isObject(view) && isFunction(view.canNavigateFrom)) {
                        response = view.canNavigateFrom();
                    }

                    return this._Promise.resolve(response);
                }

                navigateTo(routeInfo: routing.IRouteInfo) {
                    var resolve = this._Promise.resolve.bind(this._Promise),
                        injector = this.nextInjector || this._Injector.getDependency(routeInfo.delegate.view),
                        nodeMap = this._createNodeMap(injector),
                        element = this.element,
                        node = nodeMap.element,
                        parameters = routeInfo.parameters,
                        query = routeInfo.query,
                        control = <ViewControl>nodeMap.uiControlNode.control;

                    element.appendChild(node);

                    var animationPromise = this._animationPromise;
                    if (isPromise(animationPromise)) {
                        animationPromise.dispose();
                    }

                    this._animationPromise = this._animator.animate(this.element, __Enter);

                    var viewportManager = this._managerCache.read(this.uid),
                        manager = this._ElementManagerFactory.getInstance(),
                        promise: async.IThenable<void>;

                    viewportManager.children = [];
                    manager.initialize(nodeMap, viewportManager);

                    if (isFunction(control.navigatedTo)) {
                        promise = resolve(control.navigatedTo(routeInfo.parameters, query));
                    } else {
                        promise = resolve();
                    }

                    return promise
                        .catch(noop)
                        .then(() => {
                            manager.setUiControlTemplate();
                            return manager.templatePromise;
                        });
                }

                navigateFrom() {
                    var view = this.controls[0],
                        promise: async.IThenable<void>;

                    if (isObject(view) && isFunction(view.navigatingFrom)) {
                        promise = this._Promise.resolve(view.navigatingFrom());
                    } else {
                        promise = this._Promise.resolve();
                    }

                    return promise
                        .catch(noop)
                        .then(() => {
                            Control.dispose(view);
                        });
                }

                dispose() {
                    this.router.unregister(this);
                    this.navigator.dispose();
                }

                protected _createNodeMap(injector: dependency.Injector<ViewControl>) {
                    var control = this.nextView || injector.inject(),
                        doc = this._document,
                        type = injector.name,
                        replaceWith = control.replaceWith,
                        node: HTMLElement = (isEmpty(replaceWith) || replaceWith === 'any') ?
                            doc.createElement('div') : doc.createElement(replaceWith);

                    node.setAttribute(__Control, type);
                    node.className = __ViewControl;

                    return <processing.INodeMap>{
                        element: node,
                        attributes: {},
                        nodes: [],
                        uiControlNode: {
                            control: <any>control,
                            nodeName: type,
                            expressions: <Array<expressions.IParsedExpression>>[],
                            injector: <any>injector,
                            childManagerLength: 0
                        }
                    };
                }

                protected _getParentViewport(): Viewport {
                    var viewport = this.parent,
                        type = this.type;

                    while (!isNull(viewport) && viewport.type !== type) {
                        viewport = viewport.parent;
                    }

                    return <Viewport><any>viewport;
                }
            }

            register.control(__Viewport, Viewport);

            /**
             * A TemplateControl for easily reusing a 
             * defined HTML template.
             */
            export class Template extends TemplateControl {
                protected static _inject: any = {
                    _Promise: __Promise,
                    _templateCache: __TemplateCache,
                    _document: __Document
                };

                /**
                 * Reference to the IPromise injectable.
                 */
                protected _Promise: async.IPromise;

                /**
                 * Reference to an injectable for storing HTML templates.
                 */
                protected _templateCache: storage.TemplateCache;

                /**
                 * Reference to the Document injectable.
                 */
                protected _document: Document;

                /**
                 * Removes the <plat-template> node from the DOM
                 */
                replaceWith: string = null;

                /**
                 * The evaluated plat-options object.
                 */
                options: observable.IObservableProperty<ITemplateOptions>;

                /**
                 * The unique ID used to reference a particular 
                 * template.
                 */
                protected _id: string;

                /**
                 * The optional URL associated with this 
                 * particular template.
                 */
                protected _url: string;

                /**
                 * Whether or not this is the first instance of the control, 
                 * specifying that it defines the template to copy.
                 */
                private __isFirst = false;

                /**
                 * A promise that resolves when the template is retrieved and ready.
                 */
                private __templatePromise: async.IThenable<Template>;

                /**
                 * HTML template storage for all instances of this control.
                 */
                private __templateControlCache: storage.Cache<any>;

                /**
                 * The constructor for a Template. Creates the control cache.
                 */
                constructor() {
                    super();
                    var _CacheFactory: storage.ICacheFactory = acquire(__CacheFactory);
                    this.__templateControlCache = _CacheFactory.create<any>(__TemplateControlCache);
                }

                /**
                 * Initializes the creation of the template.
                 */
                initialize(): void {
                    var optionsObj = this.options || <observable.IObservableProperty<ITemplateOptions>>{},
                        options = optionsObj.value || <ITemplateOptions>{},
                        id = this._id = options.id;

                    if (isNull(id)) {
                        var _Exception: IExceptionStatic = this._Exception;
                        _Exception.warn(this.type + ' instantiated without an id option', _Exception.COMPILE);
                        return;
                    }

                    this._url = options.templateUrl;

                    var templatePromise: async.IThenable<Template> = this.__templateControlCache.read(id);
                    if (!isNull(templatePromise)) {
                        this.__templatePromise = templatePromise;
                        return;
                    }

                    this.__isFirst = true;
                    this._initializeTemplate();
                }

                /**
                 * Decides if this is a template definition or 
                 * a template instance.
                 */
                loaded(): void {
                    if (!this.__isFirst) {
                        this._waitForTemplateControl(this.__templatePromise);
                    }
                }

                /**
                 * Removes the template from the template cache.
                 */
                dispose(): void {
                    if (this.__isFirst) {
                        var cache = this.__templateControlCache;
                        cache.remove(this._id);
                        if (cache.info().size === 0) {
                            cache.dispose();
                        }
                    }
                }

                /**
                 * Determines whether a URL or innerHTML is being used, 
                 * creates the bindable template, and stores the template 
                 * in a template cache for later use.
                 */
                protected _initializeTemplate(): void {
                    var id = this._id;

                    if (isNull(id)) {
                        return;
                    }

                    var parentNode = this.endNode.parentNode,
                        url = this._url,
                        template: any;

                    if (!isNull(url)) {
                        template = this._templateCache.read(url);
                        clearNodeBlock(this.elementNodes, parentNode);
                    } else {
                        template = this._document.createDocumentFragment();
                        appendChildren(this.elementNodes, template);
                    }

                    var controlPromise: async.IThenable<TemplateControl>;
                    if (isPromise(template)) {
                        controlPromise = template.catch((error: Error) => {
                            if (isNull(error)) {
                                return TemplateControl.determineTemplate(this, url);
                            }
                        }).then((template: DocumentFragment) => {
                                this.bindableTemplates.add(id, template.cloneNode(true));
                                return this;
                            });
                    } else {
                        this.bindableTemplates.add(id, template.cloneNode(true));

                        controlPromise = this._Promise.resolve(this);
                    }

                    this.__templateControlCache.put(id, controlPromise);
                }

                /**
                 * Waits for the template promise to resolve, then initializes 
                 * the binding of the bindable template and places it into the 
                 * DOM.
                 * @param {plat.async.IThenable<plat.ui.controls.Template>} templatePromise The promise 
                 * associated with the first instance of the control with this ID.
                 */
                protected _waitForTemplateControl(templatePromise: async.IThenable<Template>): void {
                    var _Exception: IExceptionStatic = this._Exception;
                    templatePromise.then((templateControl: Template) => {
                        if (!(isNull(this._url) || (this._url === templateControl._url))) {
                            _Exception.warn('The specified url: ' + this._url +
                                ' does not match the original ' + this.type + ' with id: ' +
                                '"' + this._id + '". The original url will be loaded.',
                                _Exception.TEMPLATE);
                        }

                        this.__mapBindableTemplates(templateControl);
                        return this.bindableTemplates.bind(this._id);
                    }).then((clone) => {
                            var endNode = this.endNode;
                            insertBefore(endNode.parentNode, clone, endNode);
                        }).catch((error) => {
                            postpone(() => {
                                _Exception.warn('Problem resolving ' + this.type + ' url: ' +
                                    error.response, _Exception.TEMPLATE);
                            });
                        });
                }

                /**
                 * Maps the bindable templates cache and html templates of the first 
                 * control with the proper ID to this control's bindable templates.
                 * @param {plat.ui.controls.Template} control The first of the controls 
                 * with this corresponding ID that defined the HTML template to reuse.
                 */
                private __mapBindableTemplates(control: Template): void {
                    var bindableTemplates = this.bindableTemplates;
                    bindableTemplates.cache = control.bindableTemplates.cache;
                    bindableTemplates.templates = control.bindableTemplates.templates;
                }
            }

            /**
             * The available options for the Template control.
             */
            export interface ITemplateOptions {
                /**
                 * The unique ID used to label a template 
                 * and use it as DOM.
                 */
                id: string;

                /**
                 * An optional URL to specify a template 
                 * instead of using the element's innerHTML.
                 */
                templateUrl: string;
            }

            register.control(__Template, Template);

            /**
             * A TemplateControl for inner HTML that contains controls  
             * and/or markup and not having it bind or evaluate.
             */
            export class Ignore extends TemplateControl {
                /**
                 * Removes the innerHTML from the DOM and saves it.
                 */
                setTemplate(): void {
                    this.innerTemplate = <DocumentFragment>appendChildren(this.element.childNodes);
                }

                /**
                 * Places the saved innerHTML back into the DOM.
                 */
                loaded(): void {
                    this.element.appendChild(this.innerTemplate.cloneNode(true));
                }
            }

            register.control(__Ignore, Ignore);

            /**
             * A TemplateControl for repeating a block of 
             * DOM nodes bound to an array.
             */
            export class ForEach extends TemplateControl {
                protected static _inject: any = {
                    _animator: __Animator,
                    _Promise: __Promise
                };

                /**
                 * Reference to the Animator injectable.
                 */
                protected _animator: animations.Animator;

                /**
                 * Reference to the IPromise injectable.
                 */
                protected _Promise: async.IPromise;

                /**
                 * The required context of the control (must be of type Array).
                 */
                context: Array<any>;

                /**
                 * The load priority of the control (needs to load before a Bind control).
                 */
                priority = 120;

                /**
                 * The child controls of the control. All will be of type TemplateControl.
                 */
                controls: Array<TemplateControl>;

                /**
                 * A Promise that fulfills when the items are loaded.
                 */
                itemsLoaded: async.IThenable<void>;

                /**
                 * The options for the ForEach control.
                 */
                options: observable.IObservableProperty<IForEachOptions>;

                /**
                 * Used to hold the alias tokens for the built-in foreach aliases. You 
                 * can overwrite these with the options for 
                 * the ForEach control. 
                 */
                protected _aliases: IForEachAliasOptions = {
                    index: __forEachAliasOptions.index,
                    even: __forEachAliasOptions.even,
                    odd: __forEachAliasOptions.odd,
                    first: __forEachAliasOptions.first,
                    last: __forEachAliasOptions.last
                };

                /**
                 * The container to which items will be added.
                 */
                protected _container: HTMLElement;

                /**
                 * The node length of each item's childNodes (innerHTML). 
                 * For the ForEach it should be a 
                 * single constant number.
                 */
                protected _blockLength: any = 0;

                /**
                 * An array to aggregate all current animation promises.
                 */
                protected _currentAnimations: Array<animations.IAnimationThenable<any>> = [];

                /**
                 * Whether or not the Array listener has been set.
                 */
                private __listenerSet = false;
                /**
                 * The resolve function for the itemsLoaded promise.
                 */
                private __resolveFn: () => void;

                /**
                 * The constructor for a ForEach. Creates the itemsLoaded promise.
                 */
                constructor() {
                    super();
                    this.itemsLoaded = new this._Promise<void>((resolve) => {
                        this.__resolveFn = resolve;
                    });
                }

                /**
                 * Creates a bindable template with the control element's childNodes (innerHTML).
                 */
                setTemplate(): void {
                    var childNodes: Array<Node> = Array.prototype.slice.call(this.element.childNodes);
                    this.bindableTemplates.add('item', childNodes);
                }

                /**
                 * Re-syncs the ForEach child controls and DOM with the new 
                 * array.
                 * @param {Array<any>} newValue? The new Array
                 * @param {Array<any>} oldValue? The old Array
                 */
                contextChanged(newValue?: Array<any>, oldValue?: Array<any>): void {
                    if (!isArray(newValue)) {
                        var _Exception: IExceptionStatic = this._Exception;
                        _Exception.warn(this.type + ' context set to something other than an Array.', _Exception.CONTEXT);
                        return;
                    }

                    this._setListener();

                    if (newValue.length === 0) {
                        this._removeItems(this.controls.length);
                        return;
                    }

                    this._setAliases();
                    this._executeEvent({
                        method: 'splice',
                        arguments: null,
                        returnValue: null,
                        oldArray: oldValue || [],
                        newArray: newValue || []
                    });
                }

                /**
                 * Observes the Array context for changes and adds initial items to the DOM.
                 */
                loaded(): void {
                    var context = this.context;
                    this._container = this.element;

                    if (!isArray(context)) {
                        if (!isNull(context)) {
                            var _Exception: IExceptionStatic = this._Exception;
                            _Exception.warn(this.type + ' context set to something other than an Array.', _Exception.CONTEXT);
                        }
                        return;
                    }

                    this._setAliases();
                    this._addItems(context.length, 0);
                    this._setListener();
                }

                /**
                 * Removes any potentially held memory.
                 */
                dispose(): void {
                    this.__resolveFn = null;
                }

                /**
                 * Sets the alias tokens to use for all the items in the ForEach context array.
                 */
                protected _setAliases() {
                    var optionsObj = this.options || <observable.IObservableProperty<IForEachOptions>>{},
                        options = optionsObj.value || <IForEachOptions>{},
                        aliases = options.aliases;

                    if (!isObject(aliases)) {
                        return;
                    }

                    var _aliases = this._aliases,
                        keys = Object.keys(_aliases),
                        length = keys.length,
                        value: string;

                    for (var i = 0; i < length; ++i) {
                        value = aliases[keys[i]];

                        if (isString(value)) {
                            _aliases[keys[i]] = value;
                        }
                    }
                }

                /**
                 * Adds new items to the control's element when items are added to 
                 * the array.
                 * @param {number} numberOfItems The number of items to add.
                 * @param {number} index The point in the array to start adding items.
                 * @param {boolean} animate? Whether or not to animate the new items
                 */
                protected _addItems(numberOfItems: number, index: number, animate?: boolean): async.IThenable<void> {
                    var context = this.context,
                        max = +(index + numberOfItems);
                    if (!isArray(context) || !isNumber(max) || (context.length < max)) {
                        return;
                    }

                    var promises: Array<async.IThenable<DocumentFragment>> = [];
                    while (index < max) {
                        promises.push(this._bindItem(index++));
                    }

                    if (promises.length > 0) {
                        this.itemsLoaded = this._Promise.all(promises).then<void>((templates) => {
                            this._setBlockLength(templates);

                            if (animate === true) {
                                var length = templates.length;
                                for (var i = 0; i < length; ++i) {
                                    this._appendAnimatedItem(templates[i], __Enter);
                                }
                            } else {
                                this._appendItems(templates);
                            }

                            if (isFunction(this.__resolveFn)) {
                                this.__resolveFn();
                                this.__resolveFn = null;
                            }
                        }).catch((error) => {
                                postpone(() => {
                                    var _Exception: IExceptionStatic = this._Exception;
                                    _Exception.warn(error, _Exception.BIND);
                                });
                            });
                    } else {
                        if (isFunction(this.__resolveFn)) {
                            this.__resolveFn();
                            this.__resolveFn = null;
                        }
                        this.itemsLoaded = new this._Promise<void>((resolve) => {
                            this.__resolveFn = resolve;
                        });
                    }

                    return this.itemsLoaded;
                }

                /**
                 * Adds an Array of items to the element without animating.
                 * @param {Array<Node>} items The Array of items to add.
                 */
                protected _appendItems(items: Array<Node>): void {
                    appendChildren(items, this._container);
                }

                /**
                 * Adds an item to the control's element animating its elements.
                 * @param {DocumentFragment} item The HTML fragment representing a single item.
                 * @param {string} key The animation key/type.
                 */
                protected _appendAnimatedItem(item: DocumentFragment, key: string): void {
                    if (!isNode(item)) {
                        return;
                    }

                    var _animator = this._animator,
                        childNodes: Array<Element> = Array.prototype.slice.call(item.childNodes),
                        childNode: Element;

                    insertBefore(this._container, item);

                    var currentAnimations = this._currentAnimations;
                    while (childNodes.length > 0) {
                        childNode = childNodes.shift();
                        if (childNode.nodeType === Node.ELEMENT_NODE) {
                            currentAnimations.push(_animator.animate(childNode, key).then(() => {
                                currentAnimations.shift();
                            }));
                        }
                    }
                }

                /**
                 * Removes items from the control's element.
                 * @param {number} numberOfItems The number of items to remove.
                 */
                protected _removeItems(numberOfItems: number): void {
                    for (var i = 0; i < numberOfItems; ++i) {
                        this._removeItem();
                    }

                    if (this.controls.length > 0) {
                        this._updateResources();
                    }
                }

                /**
                 * Removes an item from the control's element.
                 */
                protected _removeItem(): void {
                    var controls = this.controls,
                        length = controls.length - 1;

                    TemplateControl.dispose(controls[length]);
                }

                /**
                 * Binds the item to a template at that index.
                 * the a DocumentFragment that represents an item.
                 */
                protected _bindItem(index: number): async.IThenable<DocumentFragment> {
                    return this.bindableTemplates.bind('item', index, this._getAliases(index));
                }

                /**
                 * Sets the corresponding block length for animation.
                 */
                protected _setBlockLength(templates: Array<Node>): void {
                    if (this._blockLength > 0 || templates.length === 0) {
                        return;
                    }

                    this._blockLength = templates[0].childNodes.length;
                }

                /**
                 * Updates the control's children resource objects when 
                 * the array changes.
                 */
                protected _updateResources(): void {
                    var controls = this.controls,
                        length = controls.length;

                    for (var i = 0; i < length; ++i) {
                        controls[i].resources.add(this._getAliases(i));
                    }
                }

                /**
                 * Sets a listener for the changes to the array.
                 */
                protected _setListener(): void {
                    if (!this.__listenerSet) {
                        this.observeArray(this, __CONTEXT, this._preprocessEvent, this._executeEvent);
                        this.__listenerSet = true;
                    }
                }

                /**
                 * Receives an event prior to a method being called on an array and maps the array 
                 * method to its associated pre-method handler.
                 * @param {plat.observable.IPreArrayChangeInfo} ev The Array mutation event information.
                 */
                protected _preprocessEvent(ev: observable.IPreArrayChangeInfo): void {
                    var method = '_pre' + ev.method;
                    if (isFunction((<any>this)[method])) {
                        (<any>this)[method](ev);
                    }
                }

                /**
                 * Receives an event when a method has been called on an array and maps the array 
                 * method to its associated method handler.
                 * @param {plat.observable.IPostArrayChangeInfo<any>} ev The Array mutation event information.
                 */
                protected _executeEvent(ev: observable.IPostArrayChangeInfo<any>): void {
                    var method = '_' + ev.method;
                    if (isFunction((<any>this)[method])) {
                        (<any>this)[method](ev);
                    }
                }

                /**
                 * Returns a resource alias object for an item in the array. The 
                 * resource object contains index:number, even:boolean, odd:boolean, 
                 * first:boolean, and last:boolean.
                 * @param {number} index The index used to create the resource aliases.
                 */
                protected _getAliases(index: number): IObject<IResource> {
                    var isEven = (index & 1) === 0,
                        aliases: IObject<ui.IResource> = {},
                        _aliases = this._aliases,
                        type = __OBSERVABLE_RESOURCE;

                    aliases[_aliases.index] = {
                        value: index,
                        type: type
                    };

                    aliases[_aliases.even] = {
                        value: isEven,
                        type: type
                    };

                    aliases[_aliases.odd] = {
                        value: !isEven,
                        type: type
                    };

                    aliases[_aliases.first] = {
                        value: index === 0,
                        type: type
                    };

                    aliases[_aliases.last] = {
                        value: index === (this.context.length - 1),
                        type: type
                    };

                    return aliases;
                }

                /**
                 * Handles items being pushed into the array.
                 * @param {plat.observable.IPostArrayChangeInfo<any>} ev The Array mutation event information.
                 */
                protected _push(ev: observable.IPostArrayChangeInfo<any>): void {
                    this._addItems(ev.arguments.length, ev.oldArray.length, true);
                }

                /**
                 * Handles items being popped off the array.
                 * @param {plat.observable.IPostArrayChangeInfo<any>} ev The Array mutation event information.
                 */
                protected _pop(ev: observable.IPostArrayChangeInfo<any>): void {
                    this._animateItems(ev.newArray.length, 1, __Leave).then(() => {
                        this._removeItems(1);
                    });
                }

                /**
                 * Handles items being shifted off the array.
                 * @param {plat.observable.IPreArrayChangeInfo} ev The Array mutation event information.
                 */
                protected _preshift(ev: observable.IPreArrayChangeInfo): void {
                    this._animateItems(0, 1, __Leave, true);
                }

                /**
                 * Handles items being shifted off the array.
                 * @param {plat.observable.IPostArrayChangeInfo<any>} ev The Array mutation event information.
                 */
                protected _shift(ev: observable.IPostArrayChangeInfo<any>): void {
                    this._removeItems(1);
                }

                /**
                 * Handles adding/removing items when an array is spliced.
                 * @param {plat.observable.IPreArrayChangeInfo} ev The Array mutation event information.
                 */
                protected _presplice(ev: observable.IPreArrayChangeInfo): void {
                    var arguments = ev.arguments,
                        addCount = arguments.length - 2,
                        deleteCount = arguments[1];

                    // check if adding more items than deleting
                    if (addCount >= deleteCount) {
                        this._animateItems(arguments[0], addCount, __Enter);
                        return;
                    }

                    this._animateItems(arguments[0], deleteCount, __Leave, true);
                }

                /**
                 * Handles adding/removing items when an array is spliced.
                 * @param {plat.observable.IPostArrayChangeInfo<any>} ev The Array mutation event information.
                 */
                protected _splice(ev: observable.IPostArrayChangeInfo<any>): void {
                    var oldLength = this.controls.length,
                        newLength = ev.newArray.length;

                    if (newLength > oldLength) {
                        this._addItems(newLength - oldLength, oldLength);
                    } else if (oldLength > newLength) {
                        this._removeItems(oldLength - newLength);
                    }
                }

                /**
                 * Handles animating items being unshifted into the array.
                 * @param {plat.observable.IPreArrayChangeInfo} ev The Array mutation event information.
                 */
                protected _preunshift(ev: observable.IPreArrayChangeInfo): void {
                    this._animateItems(0, 1, __Enter);
                }

                /**
                 * Handles items being unshifted into the array.
                 * @param {plat.observable.IPostArrayChangeInfo<any>} ev The Array mutation event information.
                 */
                protected _unshift(ev: observable.IPostArrayChangeInfo<any>): void {
                    this._addItems(ev.arguments.length, ev.oldArray.length);
                }

                /**
                 * Handles when the array is sorted.
                 * @param {plat.observable.IPostArrayChangeInfo<any>} ev The Array mutation event information.
                 */
                protected _sort(ev: observable.IPostArrayChangeInfo<any>): void { }

                /**
                 * Handles when the array is reversed.
                 * @param {plat.observable.IPostArrayChangeInfo<any>} ev The Array mutation event information.
                 */
                protected _reverse(ev: observable.IPostArrayChangeInfo<any>): void { }

                /**
                 * Animates the indicated items.
                 * @param {number} startIndex The starting index of items to animate.
                 * @param {number} numberOfItems The number of consecutive items to animate.
                 * @param {string} key The animation key/type.
                 * @param {boolean} clone? Whether to clone the items and animate the clones or simply animate the items itself.
                 * @param {boolean} cancel? Whether or not the animation should cancel all current animations. 
                 * Defaults to true.
                 */
                protected _animateItems(startIndex: number, numberOfItems: number, key: string, clone?: boolean,
                    cancel?: boolean): async.IThenable<void> {
                    var blockLength = this._blockLength;
                    if (blockLength === 0) {
                        return this._Promise.resolve();
                    }

                    var start = startIndex * blockLength;
                    return this._initiateAnimation(start, numberOfItems * blockLength + start, key, clone, cancel);
                }

                /**
                 * Animates a block of elements.
                 * @param {number} startNode The starting childNode of the ForEach to animate.
                 * @param {number} endNode The ending childNode of the ForEach to animate.
                 * @param {string} key The animation key/type.
                 * @param {boolean} clone? Whether to clone the items and animate the clones or simply animate the items itself.
                 * @param {boolean} cancel? Whether or not the animation should cancel all current animations. 
                 * Defaults to true.
                 */
                protected _initiateAnimation(startNode: number, endNode: number, key: string, clone?: boolean,
                    cancel?: boolean): async.IThenable<void> {
                    var animationPromises: Array<animations.IAnimatingThenable> = [],
                        currentAnimations = this._currentAnimations,
                        length = currentAnimations.length;

                    if (length === 0 || cancel === false) {
                        return this.__handleAnimation(startNode, endNode, key, clone);
                    }

                    while (length-- > 0) {
                        animationPromises.push(currentAnimations[length].cancel());
                    }

                    return this._Promise.all(animationPromises).then(() => {
                        return this.__handleAnimation(startNode, endNode, key, clone);
                    });
                }

                /**
                 * Handles the animation of a block of elements.
                 * @param {number} startNode The starting childNode of the ForEach to animate
                 * @param {number} endNode The ending childNode of the ForEach to animate
                 * @param {string} key The animation key/type
                 * @param {boolean} clone Whether to clone the items and animate the clones or simply animate the items itself.
                 */
                private __handleAnimation(startNode: number, endNode: number, key: string, clone: boolean): async.IThenable<void> {
                    var container = this._container,
                        nodes: Array<Node> = Array.prototype.slice.call(container.childNodes, startNode, endNode),
                        node: Node,
                        firstNode = nodes[0],
                        _animator = this._animator,
                        currentAnimations = this._currentAnimations,
                        callback: () => void,
                        animationPromise: animations.IAnimationThenable<void>;

                    clone = clone === true;
                    while (nodes.length > 0) {
                        node = nodes.shift();
                        if (node.nodeType === Node.ELEMENT_NODE) {
                            if (clone) {
                                node = node.cloneNode(true);
                                container.insertBefore(node, firstNode);
                                // bind callback to current cloned node due to loop
                                callback = function () {
                                    currentAnimations.shift();
                                    container.removeChild(this);
                                }.bind(node);
                            } else {
                                callback = () => {
                                    currentAnimations.shift();
                                };
                            }

                            animationPromise = _animator.animate(<Element>node, key).then(callback);
                            currentAnimations.push(animationPromise);
                        }
                    }

                    return animationPromise;
                }
            }

            register.control(__ForEach, ForEach);

            /**
             * The options object for the 
             * ForEach control.
             */
            export interface IForEachOptions {
                /**
                 * Used to specify alternative alias tokens for the built-in foreach aliases.
                 */
                aliases?: IForEachAliasOptions;
            }

            /**
             * The alias tokens for the ForEach options object for the 
             * ForEach control.
             */
            export interface IForEachAliasOptions extends IObject<string> {
                /**
                 * Used to specify an alternative alias for the index in a ForEach 
                 * item template.
                 */
                index?: string;

                /**
                 * Used to specify an alternative alias for the even in a ForEach 
                 * item template.
                 */
                even?: string;

                /**
                 * Used to specify an alternative alias for the odd in a ForEach 
                 * item template.
                 */
                odd?: string;

                /**
                 * Used to specify an alternative alias for the first in a ForEach 
                 * item template.
                 */
                first?: string;

                /**
                 * Used to specify an alternative alias for the last in a ForEach 
                 * item template.
                 */
                last?: string;
            }

            /**
             * A TemplateControl for adding HTML to the 
             * DOM through bound context strings.
             */
            export class Html extends TemplateControl {
                /**
                 * Loads the DOM with the new HTML String.
                 */
                contextChanged(): void {
                    this.loaded();
                }

                /**
                 * Loads the context string as the innerHTML of the element.
                 */
                loaded(): void {
                    var context = this.context;

                    if (!isString(context)) {
                        return;
                    }

                    setInnerHtml(this.element, context);
                }
            }

            register.control(__Html, Html);

            /**
             * A TemplateControl for binding an HTML select element 
             * to an Array context.
             */
            export class Select extends TemplateControl {
                protected static _inject: any = {
                    _Promise: __Promise,
                    _document: __Document
                };

                /**
                 * Reference to the IPromise injectable.
                 */
                protected _Promise: async.IPromise;

                /**
                 * Reference to the Document injectable.
                 */
                protected _document: Document;

                /**
                 * Replaces the <plat-select> node with 
                 * a <select> node.
                 */
                replaceWith = 'select';

                /**
                 * The load priority of the control (needs to load before a Bind control).
                 */
                priority = 120;

                /**
                 * The required context of the control (must be of type Array).
                 */
                context: Array<any>;

                /**
                 * An object that keeps track of unique 
                 * optgroups.
                 */
                groups: IObject<Element> = {};

                /**
                 * The evaluated plat-options object.
                 */
                options: observable.IObservableProperty<ISelectOptions>;

                /**
                 * A Promise that will fulfill whenever all items are loaded.
                 */
                itemsLoaded: async.IThenable<void>;

                /**
                 * Whether or not the Array listener has been set.
                 */
                private __listenerSet: boolean;
                /**
                 * Whether or not the select is grouped.
                 */
                private __isGrouped = false;
                /**
                 * Whether or not the select should be treated as a 
                 * native (unbound) select element.
                 */
                private __isNativeSelect = false;
                /**
                 * The property used to group the objects.
                 */
                private __group: string;
                /**
                 * An optional default option specified in the control element's 
                 * innerHTML.
                 */
                private __defaultOption: HTMLOptionElement;
                /**
                 * The function to resolve the itemsLoaded promise.
                 */
                private __resolveFn: () => void;

                /**
                 * The constructor for a Select. Creates the itemsLoaded promise.
                 */
                constructor() {
                    super();
                    this.itemsLoaded = new this._Promise<void>((resolve) => {
                        this.__resolveFn = resolve;
                    });
                }

                /**
                 * Creates the bindable option template and grouping 
                 * template if necessary.
                 */
                setTemplate(): void {
                    var _document = this._document,
                        options = this.options || <observable.IObservableProperty<ISelectOptions>>{},
                        platOptions = options.value || <ISelectOptions>{},
                        option = _document.createElement('option'),
                        value = platOptions.value,
                        textContent = platOptions.textContent;

                    // check if the element should be treated as a normal select.
                    if (isUndefined(value) && isUndefined(textContent)) {
                        this.__isNativeSelect = true;
                        return;
                    }

                    if (!isNull(platOptions.group)) {
                        var group = this.__group = platOptions.group,
                            optionGroup = _document.createElement('optgroup');

                        optionGroup.label = __startSymbol + group + __endSymbol;

                        this.bindableTemplates.add('group', optionGroup);
                    }

                    if (!isString(value) || isEmpty(value)) {
                        value = undefined;
                    }

                    if (!isString(textContent) || isEmpty(textContent)) {
                        textContent = undefined;
                    }

                    option.value = __startSymbol + (value || textContent) + __endSymbol;
                    option.textContent = __startSymbol + (textContent || value) + __endSymbol;

                    this.bindableTemplates.add('option', option);
                }

                /**
                 * Re-observes the new array context and modifies 
                 * the options accordingly.
                 * @param {Array<any>} newValue? The new array context.
                 * @param {Array<any>} oldValue? The old array context.
                 */
                contextChanged(newValue?: Array<any>, oldValue?: Array<any>): void {
                    if (this.__isNativeSelect || !isArray(newValue)) {
                        return;
                    }

                    var newLength = isArray(newValue) ? newValue.length : 0,
                        oldLength = isArray(oldValue) ? oldValue.length : 0;

                    this._setListener();

                    if (newLength > oldLength) {
                        this._addItems(newLength - oldLength, oldLength);
                    } else if (newLength < oldLength) {
                        this._removeItems(oldLength - newLength);
                    }
                }

                /**
                 * Observes the new array context and adds 
                 * the options accordingly.
                 */
                loaded(): void {
                    if (this.__isNativeSelect) {
                        return;
                    }

                    var options = this.options || <observable.IObservableProperty<ISelectOptions>>{},
                        platOptions = options.value || <ISelectOptions>{};
                    if (isUndefined(platOptions.value) && isUndefined(platOptions.textContent)) {
                        this.__isNativeSelect = true;
                        return;
                    }

                    var context = this.context,
                        element = this.element,
                        firstElementChild = element.firstElementChild;
                    if (isNode(firstElementChild) && firstElementChild.nodeName.toLowerCase() === 'option') {
                        this.__defaultOption = <HTMLOptionElement>firstElementChild.cloneNode(true);
                    }

                    this.__isGrouped = !isNull((this.__group = platOptions.group));

                    if (!isArray(context)) {
                        return;
                    }

                    this._addItems(context.length, 0);
                    this._setListener();
                }

                /**
                 * Removes any potentially held memory.
                 */
                dispose(): void {
                    this.__resolveFn = null;
                    this.__defaultOption = null;
                }

                /**
                 * Sets a listener for the changes to the array.
                 */
                protected _setListener(): void {
                    if (!this.__listenerSet) {
                        this.observeArray(this, __CONTEXT, null, this._executeEvent);
                        this.__listenerSet = true;
                    }
                }

                /**
                 * Receives an event when a method has been called on an array and maps the array 
                 * method to its associated method handler.
                 * @param {plat.observable.IPostArrayChangeInfo<any>} ev The Array mutation event information.
                 */
                protected _executeEvent(ev: observable.IPostArrayChangeInfo<any>): void {
                    var method = '_' + ev.method;
                    if (isFunction((<any>this)[method])) {
                        (<any>this)[method](ev);
                    }
                }

                /**
                 * Adds the options to the select element.
                 * @param {number} numberOfItems The number of items to add.
                 * @param {number} length The current index of the next 
                 * set of items to add.
                 */
                protected _addItems(numberOfItems: number, length: number): async.IThenable<void> {
                    var index = length,
                        item: any,
                        bindableTemplates = this.bindableTemplates,
                        promises: Array<async.IThenable<void>> = [];

                    for (var i = 0; i < numberOfItems; ++i, ++index) {
                        item = this.context[index];

                        promises.push(bindableTemplates.bind('option', index).then<void>(this._insertOptions.bind(this, index, item)));
                    }

                    if (promises.length > 0) {
                        this.itemsLoaded = this._Promise.all(promises).then(() => {
                            if (isFunction(this.__resolveFn)) {
                                this.__resolveFn();
                                this.__resolveFn = null;
                            }
                            return;
                        });
                    } else {
                        if (isFunction(this.__resolveFn)) {
                            this.__resolveFn();
                            this.__resolveFn = null;
                        }
                        this.itemsLoaded = new this._Promise<void>((resolve) => {
                            this.__resolveFn = resolve;
                        });
                    }

                    return this.itemsLoaded;
                }

                /**
                 * The callback used to add an option after 
                 * its template has been bound.
                 * @param {number} index The current index of the item being added.
                 * @param {any} item The item being added.
                 * @param {DocumentFragment} optionClone The bound DocumentFragment to be 
                 * inserted into the DOM.
                 * or optgroup has successfully be inserted.
                 */
                protected _insertOptions(index: number, item: any, optionClone: DocumentFragment): async.IThenable<any> {
                    var element = this.element;
                    if (this.__isGrouped) {
                        var groups = this.groups,
                            newGroup = item[this.__group],
                            optgroup: any = groups[newGroup];

                        if (isNull(optgroup)) {
                            return (groups[newGroup] = <any>this.bindableTemplates.bind('group', index)
                                .then((groupClone: DocumentFragment) => {
                                    optgroup = groups[newGroup] = <Element>groupClone.childNodes[1];

                                    optgroup.appendChild(optionClone);
                                    element.appendChild(groupClone);
                                    return optgroup;
                                }));
                        } else if (isPromise(optgroup)) {
                            return optgroup.then((group: Element) => {
                                group.appendChild(optionClone);
                                return group;
                            });
                        }

                        optgroup.appendChild(optionClone);
                        return this._Promise.resolve(null);
                    }

                    element.appendChild(optionClone);
                    return this._Promise.resolve(null);
                }

                /**
                 * Removes the specified option item from the DOM.
                 * @param {number} index The control index to remove.
                 */
                protected _removeItem(index: number): void {
                    if (index < 0) {
                        return;
                    }

                    TemplateControl.dispose(<TemplateControl>this.controls[index]);
                }

                /**
                 * Removes a specified number of elements.
                 * @param {number} numberOfItems The number of items 
                 * to remove.
                 */
                protected _removeItems(numberOfItems: number): void {
                    var controls = this.controls,
                        length = controls.length - 1;

                    while (numberOfItems-- > 0) {
                        this._removeItem(length--);
                    }
                }

                /**
                 * The function called when an item has been removed 
                 * from the array context.
                 * @param {plat.observable.IPostArrayChangeInfo<any>} ev The array mutation object
                 */
                protected _itemRemoved(ev: observable.IPostArrayChangeInfo<any>): void {
                    if (ev.oldArray.length === 0) {
                        return;
                    } else if (this.__isGrouped) {
                        this._resetSelect();
                        return;
                    }

                    this._removeItems(1);
                }

                /**
                 * Resets the select element by removing all its 
                 * items and adding them back.
                 */
                protected _resetSelect(): void {
                    var itemLength = this.context.length,
                        element = this.element,
                        nodeLength = element.childNodes.length;

                    this._removeItems(nodeLength);
                    this.groups = {};
                    if (!isNull(this.__defaultOption)) {
                        element.appendChild(this.__defaultOption.cloneNode(true));
                    }

                    this._addItems(itemLength, 0);
                }

                /**
                 * The function called when an element is pushed to 
                 * the array context.
                 * @param {plat.observable.IPostArrayChangeInfo<any>} ev The array mutation object
                 */
                protected _push(ev: observable.IPostArrayChangeInfo<any>): void {
                    this._addItems(ev.arguments.length, ev.oldArray.length);
                }

                /**
                 * The function called when an item is popped 
                 * from the array context.
                 * @param {plat.observable.IPostArrayChangeInfo<any>} ev The array mutation object
                 */
                protected _pop(ev: observable.IPostArrayChangeInfo<any>): void {
                    this._itemRemoved(ev);
                }

                /**
                 * The function called when an item is shifted 
                 * from the array context.
                 * @param {plat.observable.IPostArrayChangeInfo<any>} ev The array mutation object
                 */
                protected _shift(ev: observable.IPostArrayChangeInfo<any>): void {
                    this._itemRemoved(ev);
                }

                /**
                 * The function called when items are spliced 
                 * from the array context.
                 * @param {plat.observable.IPostArrayChangeInfo<any>} ev The array mutation object
                 */
                protected _splice(ev: observable.IPostArrayChangeInfo<any>): void {
                    if (this.__isGrouped) {
                        this._resetSelect();
                        return;
                    }

                    var oldLength = ev.oldArray.length,
                        newLength = ev.newArray.length;

                    if (newLength > oldLength) {
                        this._addItems(newLength - oldLength, oldLength);
                    } else if (oldLength > newLength) {
                        this._removeItems(oldLength - newLength);
                    }
                }

                /**
                 * The function called when an item is unshifted 
                 * onto the array context.
                 * @param {plat.observable.IPostArrayChangeInfo<any>} ev The array mutation object
                 */
                protected _unshift(ev: observable.IPostArrayChangeInfo<any>): void {
                    if (this.__isGrouped) {
                        this._resetSelect();
                        return;
                    }

                    this._addItems(ev.arguments.length, ev.oldArray.length);
                }

                /**
                 * The function called when the array context 
                 * is sorted.
                 * @param {plat.observable.IPostArrayChangeInfo<any>} ev The array mutation object
                 */
                protected _sort(ev: observable.IPostArrayChangeInfo<any>): void {
                    if (this.__isGrouped) {
                        this._resetSelect();
                    }
                }

                /**
                 * The function called when the array context 
                 * is reversed.
                 * @param {plat.observable.IPostArrayChangeInfo<any>} ev The array mutation object
                 */
                protected _reverse(ev: observable.IPostArrayChangeInfo<any>): void {
                    if (this.__isGrouped) {
                        this._resetSelect();
                    }
                }
            }

            /**
             * The available options for the Select control.
             */
            export interface ISelectOptions {
                /**
                 * The property in your context array 
                 * of objects to use to group the objects 
                 * into optgroups.
                 */
                group: string;

                /**
                 * The property in your context array of 
                 * objects with which to use to bind to the 
                 * option's value.
                 */
                value: string;

                /**
                 * The property in your context array of 
                 * objects with which to use to bind to the 
                 * option's textContent.
                 */
                textContent: string;
            }

            register.control(__Select, Select);

            /**
             * A TemplateControl conditionally adding or removing 
             * a block of nodes to or from the DOM.
             */
            export class If extends TemplateControl {
                protected static _inject: any = {
                    _animator: __Animator,
                    _Promise: __Promise
                };

                /**
                 * Reference to the Animator injectable.
                 */
                protected _animator: animations.Animator;

                /**
                 * Reference to the IPromise injectable.
                 */
                protected _Promise: async.IPromise;

                /**
                 * The evaluated plat-options object.
                 */
                options: observable.IObservableProperty<IIfOptions>;

                /**
                 * The Comment used to hold the place of the plat-if element.
                 */
                commentNode: Comment;

                /**
                 * The DocumentFragment that stores the plat-if element when hidden.
                 */
                fragmentStore: DocumentFragment;

                /**
                 * The current evaluated condition (whether or not the 
                 * control is visible) of the control.
                 */
                private __condition = true;
                /**
                 * A boolean value stating whether or not the condition has already 
                 * been evaluated.
                 */
                private __firstTime = true;
                /**
                 * A function to stop listening to changes on the options object.
                 */
                private __removeListener: IRemoveListener;
                /**
                 * A promise that resolves when the leave animation is finished.
                 */
                private __leaveAnimation: animations.IAnimationThenable<any>;
                /**
                 * A promise that resolves when the entrance animation is finished.
                 */
                private __enterAnimation: animations.IAnimationThenable<any>;

                /**
                 * A promise that resolves when the template has been bound.
                 */
                private __initialBind: async.IThenable<void>;

                /**
                 * The constructor for a If. Creates the 
                 * DocumentFragment for holding the conditional nodes.
                 */
                constructor() {
                    super();
                    var _document: Document = acquire(__Document);
                    this.commentNode = _document.createComment('plat-if' + __BOUND_PREFIX + 'placeholder');
                }

                /**
                 * Checks the options and initializes the 
                 * evaluation.
                 */
                contextChanged(): async.IThenable<void> {
                    var options = this.options.value;

                    if (isEmpty(options)) {
                        return;
                    }

                    return this._setter(options);
                }

                /**
                 * Creates a bindable template with the control element's childNodes (innerHTML).
                 */
                setTemplate(): void {
                    var childNodes: Array<Node> = Array.prototype.slice.call(this.element.childNodes);
                    this.bindableTemplates.add('template', childNodes);
                }

                /**
                 * Sets the visibility to true if no options are 
                 * defined, kicks off the evaluation, and observes 
                 * the options for changes.
                 */
                loaded(): async.IThenable<void> {
                    if (isNull(this.options)) {
                        var _Exception: IExceptionStatic = this._Exception;
                        _Exception.warn('No condition specified in plat-options for plat-if.', _Exception.BIND);

                        this.options = {
                            value: {
                                condition: true
                            },
                            observe: <any>noop
                        };
                    }

                    var promise = this.contextChanged();

                    this.__removeListener = this.options.observe(this._setter);

                    return promise;
                }

                /**
                 * Stops listening to the options for changes.
                 */
                dispose(): void {
                    if (isFunction(this.__removeListener)) {
                        this.__removeListener();
                        this.__removeListener = null;
                    }

                    this.commentNode = null;
                    this.fragmentStore = null;
                }

                /**
                 * Checks the condition and decides 
                 * whether or not to add or remove 
                 * the node from the DOM.
                 */
                protected _setter(options: IIfOptions): async.IThenable<void> {
                    var value = !!options.condition,
                        promise: async.IThenable<void>;

                    if (value === this.__condition && !this.__firstTime) {
                        return this._Promise.resolve(null);
                    }

                    if (value) {
                        if (!isNull(this.__leaveAnimation)) {
                            promise = <any>this.__leaveAnimation.cancel().then(() => {
                                this.__leaveAnimation = null;
                                return this._addItem();
                            });
                        } else {
                            promise = this._addItem();
                        }
                    } else {
                        if (!isNull(this.__enterAnimation)) {
                            promise = this.__enterAnimation.cancel().then(() => {
                                this.__enterAnimation = null;
                                return <any>this._removeItem();
                            });
                        } else {
                            this._removeItem();
                            promise = this._Promise.resolve(null);
                        }
                    }

                    this.__condition = value;

                    return promise;
                }

                /**
                 * Adds the conditional nodes to the DOM.
                 */
                protected _addItem(): async.IThenable<void> {
                    if (!isNode(this.commentNode.parentNode) && !this.__firstTime) {
                        return this._Promise.resolve(null);
                    }

                    if (this.__firstTime) {
                        this.__firstTime = false;
                        this.__initialBind = this.bindableTemplates.bind('template').then((template) => {
                            var element = this.element;

                            element.appendChild(template);
                            this.__initialBind = null;

                            if (element.parentNode === this.fragmentStore) {
                                return <any>this._animateEntrance();
                            }

                            return this.__enterAnimation = this._animator.animate(element, __Enter);
                        }).then(() => {
                            this.__enterAnimation = null;
                        });

                        return this.__initialBind;
                    }

                    if (isPromise(this.__initialBind)) {
                        return this.__initialBind.then(() => {
                            return this._animateEntrance();
                        });
                    }

                    return this._animateEntrance();
                }

                /**
                 * Animates the template as it enters the DOM.
                 */
                protected _animateEntrance(): animations.IAnimationThenable<void> {
                    var commentNode = this.commentNode,
                        parentNode = commentNode.parentNode;

                    parentNode.replaceChild(this.fragmentStore, commentNode);
                    return this.__enterAnimation = this._animator.animate(this.element, __Enter).then(() => {
                        this.__enterAnimation = null;
                    });
                }

                /**
                 * Removes the conditional nodes from the DOM.
                 */
                protected _removeItem(): async.IThenable<void> {
                    if (isPromise(this.__initialBind)) {
                        return this.__initialBind.then(() => {
                            return this._animateLeave();
                        });
                    }

                    return this._animateLeave();
                }

                /**
                 * Animates the template as it leaves the DOM.
                 */
                protected _animateLeave(): animations.IAnimationThenable<void> {
                    var element = this.element;

                    return this.__leaveAnimation = this._animator.animate(element, __Leave).then(() => {
                        this.__leaveAnimation = null;
                        element.parentNode.insertBefore(this.commentNode, element);

                        if (!isDocumentFragment(this.fragmentStore)) {
                            var _document: Document = plat.acquire(__Document);
                            this.fragmentStore = _document.createDocumentFragment();
                        }

                        insertBefore(this.fragmentStore, element);
                    });
                }
            }

            /**
             * The available options for the If control.
             */
            export interface IIfOptions {
                /**
                 * A boolean expression to bind to whether or not the conditional 
                 * nodes are present on the DOM.
                 */
                condition: boolean;
            }

            register.control(__If, If);

            /**
             * A TemplateControl for adding additonal 
             * functionality to a native HTML anchor tag.
             */
            export class Link extends TemplateControl {
                protected static _inject: any = {
                    _Router: __RouterStatic,
                    _Injector: __InjectorStatic,
                    _browser: __Browser
                };

                /**
                 * Replaces the Link's element with a native anchor tag.
                 */
                replaceWith = 'a';

                /**
                 * The RouterStatic injectable instance
                 */
                protected _Router: typeof routing.Router;

                /**
                 * The Injector injectable instance
                 */
                protected _Injector: typeof dependency.Injector;

                /**
                 * The Browser injectable instance
                 */
                protected _browser: web.Browser;

                /**
                 * The router associated with this link.
                 */
                router: routing.Router;

                /**
                 * The options for Link, if ignore is true, anchor will ignore changing the url.
                 */
                options: observable.IObservableProperty<ILinkOptions>;

                /**
                 * The control's anchor element.
                 */
                element: HTMLAnchorElement;

                /**
                 * The a method for removing the click event listener for this control's element.
                 */
                removeClickListener: IRemoveListener = noop;

                constructor() {
                    super();
                    this.router = this._Router.currentRouter();
                }

                /**
                 * Prevents default on the anchor tag if the href attribute is left empty, also determines internal links.
                 */
                initialize(): void {
                    var element = this.element;

                    this.addEventListener(element, 'click', (ev: Event) => {
                        ev.preventDefault();
                    }, false);

                    this.addEventListener(element, __tap, (ev: IExtendedEvent) => {
                        if (ev.buttons !== 1) {
                            return;
                        }

                        var href = this.getHref();
                        if (isUndefined(href)) {
                            return;
                        }

                        ev.preventDefault();
                        element.href = '#';

                        postpone(() => {
                            this._browser.url(href);
                        });

                        //this.removeClickListener();
                        //element.addEventListener('click', this.getListener(element));
                    }, false);
                }

                /**
                 * Returns a click event listener. Also handles disposing of the listener.
                 */
                getListener(element: HTMLAnchorElement) {
                    var listener = (ev: Event) => {
                        ev.preventDefault();
                        this.removeClickListener();
                        cancel();
                        element.removeEventListener('click', listener);
                    };

                    var cancel = defer(() => {
                        element.removeEventListener('click', listener);
                    }, 3000);

                    return listener;
                }

                /**
                 * Calls to normalize the href for internal links.
                 */
                loaded(): void {
                    this.setHref();
                }

                /**
                 * Sets the element href to the one formed using the associated options.
                 */
                setHref(): void {
                    var href = this.getHref();

                    if (!isEmpty(href)) {
                        this.element.href = href;
                        this.element.setAttribute('data-href', href);
                    }
                }

                /**
                 * Determines the href based on the input options.
                 */
                getHref(): string {
                    if (isNull(this.router)) {
                        return;
                    }

                    if (!isObject(this.options)) {
                        return '';
                    }

                    var value = this.options.value;

                    if (!isObject(value)) {
                        return '';
                    }

                    var href = value.view;

                    if (value.isUrl !== true) {
                        var parameters = value.parameters,
                            query = value.query;

                        if (isEmpty(href)) {
                            return href;
                        }

                        href = this._Injector.convertDependency(href);
                        href = this.router.generate(href, parameters, query);
                    }

                    return this._browser.formatUrl(href);
                }
            }

            export interface ILinkOptions extends routing.INavigateOptions {
                view: any;
            }

            register.control(__Link, Link);
        }
    }
    /**
     * Holds classes and interfaces related to Document processing in platypus.
     */
    export module processing {
        /**
         * Responsible for iterating through the DOM and collecting controls.
         */
        export class Compiler {
            protected static _inject: any = {
                _ElementManagerFactory: __ElementManagerFactory,
                _TextManagerFactory: __TextManagerFactory,
                _CommentManagerFactory: __CommentManagerFactory,
                _managerCache: __ManagerCache
            };

            /**
             * Reference to the IElementManagerFactory injectable.
             */
            protected _ElementManagerFactory: IElementManagerFactory;

            /**
             * Reference to the ITextManagerFactory injectable.
             */
            protected _TextManagerFactory: ITextManagerFactory;

            /**
             * Reference to the ICommentManagerFactory injectable.
             */
            protected _CommentManagerFactory: ICommentManagerFactory;

            /**
             * Reference to a cache injectable that stores ElementManagers.
             */
            protected _managerCache: storage.Cache<NodeManager>;

            /**
             * Goes through the child Nodes of the given Node, finding elements that contain controls as well as
             * text that contains markup.
             * @param {Node} node The node whose childNodes are going to be compiled.
             * @param {plat.ui.TemplateControl} control? The parent control for the given Node. The parent must implement the 
             * TemplateControl interface since only they can contain templates.
             */
            compile(node: Node, control?: ui.TemplateControl): void;
            /**
             * Goes through the Node array, finding elements that contain controls as well as
             * text that contains markup.
             * @param {Array<Node>} nodes The nodes that are going to be compiled.
             * @param {plat.ui.TemplateControl} control? The parent control for the given Node. The parent must implement the 
             * TemplateControl interface since only they can contain templates.
             */
            compile(nodes: Array<Node>, control?: ui.TemplateControl): void;
            /**
             * Goes through the NodeList, finding elements that contain controls as well as
             * text that contains markup.
             * @param {NodeList} nodes The NodeList that is going to be compiled.
             * @param {plat.ui.TemplateControl} control? The parent control for the given Node. The parent must implement the 
             * TemplateControl interface since only they can contain templates.
             */
            compile(nodes: NodeList, control?: ui.TemplateControl): void;
            compile(node: any, control?: ui.TemplateControl): void {
                var childNodes = node.childNodes,
                    length: number,
                    newLength: number,
                    childNode: Node,
                    hasControl = !isNull(control),
                    manager = <ElementManager>(hasControl ? this._managerCache.read(control.uid) : null),
                    create = this._ElementManagerFactory.create;

                if (!isUndefined(childNodes)) {
                    childNodes = Array.prototype.slice.call(childNodes);
                } else if (isFunction(node.push)) {
                    childNodes = node;
                } else {
                    childNodes = Array.prototype.slice.call(node);
                }

                if (isNull(manager)) {
                    length = childNodes.length;

                    for (var i = 0; i < length; ++i) {
                        childNode = childNodes[i];
                        if (childNode.nodeType === Node.ELEMENT_NODE) {
                            if (!isNull(create(<Element>childNode))) {
                                this.compile(childNode);
                            }
                        }

                        newLength = childNodes.length;
                        i += newLength - length;
                        length = newLength;
                    }
                } else {
                    this._compileNodes(childNodes, manager);
                }
            }
        
            /**
             * Iterates through the array of nodes creating ElementManagers on Element 
             * nodes, TextManagers on text nodes, and 
             * CommentManagers on comment nodes.
             * @param {Array<Node>} nodes The array of nodes to be compiled. 
             * @param {plat.processing.ElementManager} manager The parent ElementManagers 
             * for the given array of nodes.
             */
            /**
             * Iterates through the array of nodes creating Element Managers on Element 
             * nodes, Text Managers on text nodes, and Comment Managers on comment nodes.
             * @param nodes The NodeList to be compiled. 
             * @param manager The parent Element Manager for the given array of nodes.
             */
            protected _compileNodes(nodes: Array<Node>, manager: ElementManager): void {
                var length = nodes.length,
                    node: Node,
                    newManager: ElementManager,
                    newLength: number,
                    create = this._ElementManagerFactory.create,
                    commentCreate = this._CommentManagerFactory.create,
                    textCreate = this._TextManagerFactory.create;

                for (var i = 0; i < length; ++i) {
                    node = nodes[i];
                    switch (node.nodeType) {
                        case Node.ELEMENT_NODE:
                            newManager = create(<Element>node, manager);
                            if (!isNull(newManager)) {
                                this._compileNodes(Array.prototype.slice.call(node.childNodes), newManager);
                            }
                            break;
                        case Node.TEXT_NODE:
                            textCreate(node, manager);
                            break;
                        case Node.COMMENT_NODE:
                            commentCreate(node, manager);
                            break;
                    }
                    newLength = nodes.length;
                    i += newLength - length;
                    length = newLength;
                }
            }
        }

        register.injectable(__Compiler, Compiler);

        /**
         * Responsible for data binding a data context to a Node.
         */
        export class NodeManager {
            /**
             * Reference to the IContextManagerStatic injectable.
             */
            protected static _ContextManager: observable.IContextManagerStatic;

            /**
             * Reference to the Parser injectable.
             */
            protected static _parser: expressions.Parser;

            /**
             * Reference to the ITemplateControlFactory injectable.
             */
            protected static _TemplateControlFactory: ui.ITemplateControlFactory;

            /**
             * Reference to the IExceptionStatic injectable.
             */
            protected static _Exception: IExceptionStatic;

            /**
             * Determines if a string has the markup notation.
             * @param {string} text The text string in which to search for markup.
             */
            static hasMarkup(text: string): boolean {
                return NodeManager._markupRegex.test(text);
            }

            /**
             * Given a string, finds markup in the string and creates an array of 
             * IParsedExpression.
             * @param {string} text The text string in which to search for markup.
             * composes the output given a proper context.
             */
            static findMarkup(text: string): Array<expressions.IParsedExpression> {
                var start: number,
                    end: number,
                    parsedExpressions: Array<expressions.IParsedExpression> = [],
                    wrapExpression = NodeManager._wrapExpression,
                    substring: string,
                    expression: expressions.IParsedExpression,
                    _parser = NodeManager._parser;

                text = text.replace(NodeManager._newLineRegex, '');

                while ((start = text.indexOf(__startSymbol)) !== -1 && (end = text.indexOf(__endSymbol)) !== -1) {
                    if (start !== 0) {
                        parsedExpressions.push(wrapExpression(text.slice(0, start)));
                    }

                    // incremement with while loop instead of just += 2 for nested object literal case.
                    while (text[++end] === '}') { }

                    substring = text.slice(start + 2, end - 2);

                    // check for one-time databinding
                    if (substring[0] === '=') {
                        expression = _parser.parse(substring.slice(1).trim());
                        expression.oneTime = true;
                        parsedExpressions.push(expression);
                    } else {
                        parsedExpressions.push(_parser.parse(substring.trim()));
                    }

                    text = text.slice(end);
                }

                if (start > -1 && end >= 0) {
                    parsedExpressions.push(wrapExpression(text.slice(end)));
                } else if (text !== '') {
                    parsedExpressions.push(wrapExpression(text));
                }

                return parsedExpressions;
            }

            /**
             * Takes in a control with a data context and an array of IParsedExpression 
             * and outputs a string of the evaluated expressions.
             * @param {Array<plat.expressions.IParsedExpression>} expressions The composition array to evaluate.
             * @param {plat.ui.TemplateControl} control? The TemplateControl used to parse 
             * the expressions.
             */
            static build(expressions: Array<expressions.IParsedExpression>, control?: ui.TemplateControl): string {
                var text = '',
                    length = expressions.length,
                    resources = <IObject<any>>{},
                    expression: expressions.IParsedExpression,
                    value: any,
                    evaluateExpression = NodeManager._TemplateControlFactory.evaluateExpression;

                for (var i = 0; i < length; ++i) {
                    expression = expressions[i];

                    value = evaluateExpression(expression, control, resources);

                    if (isObject(value)) {
                        try {
                            text += JSON.stringify(value, null, 4);
                        } catch (e) {
                            if (!isNull(e.description)) {
                                e.description = 'Cannot stringify object: ' + e.description;
                            }
                            e.message = 'Cannot stringify object: ' + e.message;

                            var _Exception: IExceptionStatic = NodeManager._Exception;
                            _Exception.warn(e, _Exception.PARSE);
                        }
                    } else if (!isNull(value)) {
                        text += value;
                    }

                    if (expression.oneTime && !isUndefined(value)) {
                        expressions[i] = NodeManager._wrapExpression(value);
                    }
                }

                return text;
            }

            /**
             * Registers a listener to be notified of a change in any associated identifier.
             * @param {Array<plat.expressions.IParsedExpression>} expressions An Array of 
             * IParsedExpressions to observe.
             * @param {plat.ui.TemplateControl} control The TemplateControl associated 
             * to the identifiers.
             * @param {(...args: Array<any>) => void} listener The listener to call when any identifier property changes.
             */
            static observeExpressions(expressions: Array<expressions.IParsedExpression>, control: ui.TemplateControl,
                listener: (...args: Array<any>) => void): void {
                var uniqueIdentiifers = NodeManager.__findUniqueIdentifiers(expressions),
                    identifiers = uniqueIdentiifers.identifiers,
                    oneTimeIdentifiers = uniqueIdentiifers.oneTimeIdentifiers,
                    oneTimeIdentifier: string,
                    observableCallback = {
                        listener: listener,
                        uid: control.uid
                    },
                    observationDetails: IObservationDetails,
                    manager: observable.ContextManager,
                    absoluteIdentifier: string,
                    stopObserving: IRemoveListener,
                    stopListening: IRemoveListener;

                while (identifiers.length > 0) {
                    observationDetails = NodeManager.__getObservationDetails(identifiers.pop(), control);
                    manager = observationDetails.manager;
                    if (!isNull(manager)) {
                        manager.observe(observationDetails.absoluteIdentifier, observableCallback);
                    }
                }

                while (oneTimeIdentifiers.length > 0) {
                    oneTimeIdentifier = oneTimeIdentifiers.pop();
                    observationDetails = NodeManager.__getObservationDetails(oneTimeIdentifier, control);
                    manager = observationDetails.manager;
                    if (!(isNull(manager) || observationDetails.isDefined)) {
                        absoluteIdentifier = observationDetails.absoluteIdentifier;
                        stopObserving = manager.observe(absoluteIdentifier, observableCallback);
                        stopListening = manager.observe(absoluteIdentifier, {
                            uid: control.uid,
                            listener: () => {
                                stopObserving();
                                stopListening();
                            }
                        });
                    }
                }
            }

            /**
             * A regular expression for finding markup
             */
            protected static _markupRegex: RegExp;

            /**
             * A regular expression for finding newline characters.
             */
            protected static _newLineRegex: RegExp;

            /**
             * Wraps constant text as a static IParsedExpression.
             * @param text The text to wrap into a static expression.
             */
            protected static _wrapExpression(text: string): expressions.IParsedExpression {
                return {
                    evaluate: () => text,
                    identifiers: [],
                    aliases: [],
                    expression: text
                };
            }

            /**
             * Given an IParsedExpression array, creates an array of unique identifers 
             * to use with binding. This allows us to avoid creating multiple listeners for the identifier and node.
             * @param {Array<plat.expressions.IParsedExpression>} expressions An array of parsed expressions to search for identifiers.
             * one way binding as well as an array of unique identifiers for one time binding.
             */
            private static __findUniqueIdentifiers(expressions: Array<expressions.IParsedExpression>): IUniqueIdentifiers {
                var length = expressions.length,
                    expression: expressions.IParsedExpression;

                if (length === 1) {
                    expression = expressions[0];
                    if (expression.oneTime) {
                        return {
                            identifiers: [],
                            oneTimeIdentifiers: expression.identifiers.slice(0)
                        };
                    }

                    return {
                        identifiers: expression.identifiers.slice(0),
                        oneTimeIdentifiers: []
                    };
                }

                var uniqueIdentifierObject: IObject<boolean> = {},
                    oneTimeIdentifierObject: IObject<boolean> = {},
                    uniqueIdentifiers: Array<string> = [],
                    oneTimeIdentifiers: Array<string> = [],
                    identifiers: Array<string>,
                    identifier: string,
                    j: number,
                    jLength: number,
                    oneTime: boolean;

                for (var i = 0; i < length; ++i) {
                    expression = expressions[i];
                    oneTime = expression.oneTime;
                    identifiers = expression.identifiers;
                    jLength = identifiers.length;

                    for (j = 0; j < jLength; ++j) {
                        identifier = identifiers[j];
                        if (oneTime) {
                            if (uniqueIdentifierObject[identifier] === true) {
                                continue;
                            }

                            if (!oneTimeIdentifierObject[identifier]) {
                                oneTimeIdentifierObject[identifier] = true;
                                oneTimeIdentifiers.push(identifier);
                            }
                        } else {
                            if (!uniqueIdentifierObject[identifier]) {
                                uniqueIdentifierObject[identifier] = true;
                                uniqueIdentifiers.push(identifier);
                            }

                            if (oneTimeIdentifierObject[identifier] === true) {
                                oneTimeIdentifierObject[identifier] = false;
                                oneTimeIdentifiers.splice(oneTimeIdentifiers.indexOf(identifier), 1);
                            }
                        }
                    }
                }

                return {
                    identifiers: uniqueIdentifiers,
                    oneTimeIdentifiers: oneTimeIdentifiers
                };
            }

            /**
             * Takes in an identifier and returns an object containing both its converted absolute path and the 
             * ContextManager needed to observe it.
             * @param {string} identifier The identifier looking to be observed.
             * @param {plat.ui.TemplateControl} control The TemplateControl associated 
             * to the identifiers.
             * identifier.
             */
            private static __getObservationDetails(identifier: string, control: ui.TemplateControl): IObservationDetails {
                var $contextManager = NodeManager._ContextManager,
                    manager: observable.ContextManager,
                    split = identifier.split('.'),
                    absoluteIdentifier = '',
                    isDefined = false;

                if (identifier[0] === '@') {
                    // we found an alias
                    var resourceObj: { resource: ui.IResource; control: ui.TemplateControl; },
                        resources: IObject<{
                            resource: ui.IResource;
                            control: ui.TemplateControl;
                        }> = {},
                        alias = split.shift().slice(1);

                    if (split.length > 0) {
                        absoluteIdentifier = '.' + split.join('.');
                    }

                    resourceObj = resources[alias];

                    if (isNull(resourceObj)) {
                        resourceObj = resources[alias] = control.findResource(alias);
                    }

                    if (!isNull(resourceObj) && !isNull(resourceObj.resource) && resourceObj.resource.type === __OBSERVABLE_RESOURCE) {
                        manager = $contextManager.getManager(resources[alias].control);
                        absoluteIdentifier = 'resources.' + alias + '.value' + absoluteIdentifier;
                    }
                } else {
                    // look on the control.context
                    isDefined = !isUndefined($contextManager.getContext(control.context, split));

                    if (isDefined || isUndefined($contextManager.getContext(control, split))) {
                        manager = $contextManager.getManager(Control.getRootControl(control));
                        absoluteIdentifier = control.absoluteContextPath + '.' + identifier;
                    } else {
                        manager = null;
                    }
                }

                return {
                    absoluteIdentifier: absoluteIdentifier,
                    manager: manager,
                    isDefined: isDefined
                };
            }

            /**
             * The type of NodeManager.
             */
            type: string;
            /**
             * The INodeMap for this NodeManager. 
             * Contains the compiled Node.
             */
            nodeMap: INodeMap;
            /**
             * The parent ElementManager.
             */
            parent: ElementManager;
            /**
             * Whether or not this NodeManager is a clone.
             */
            isClone = false;

            /**
             * Initializes the manager's properties.
             * @param {plat.processing.INodeMap} nodeMap The mapping associated with this manager. We have to use an 
             * Used to treat all NodeManagers the same.
             * @param {plat.processing.ElementManager} parent The parent ElementManager.
             */
            initialize(nodeMap: INodeMap, parent: ElementManager): void {
                this.nodeMap = nodeMap;
                this.parent = parent;

                if (!isNull(parent)) {
                    this.isClone = parent.isClone;
                    parent.children.push(this);
                }
            }

            /**
             * Retrieves the parent control associated with the parent manager.
             */
            getParentControl(): ui.TemplateControl {
                var parent = this.parent,
                    control: ui.TemplateControl;

                while (isNull(control)) {
                    if (isNull(parent)) {
                        break;
                    }

                    control = parent.getUiControl();
                    parent = parent.parent;
                }

                return control;
            }

            /**
             * Clones this NodeManager with the new node.
             * @param {Node} newNode The new node associated with the new manager.
             * @param {plat.processing.ElementManager} parentManager The parent 
             * ElementManager for the clone.
             */
            clone(newNode: Node, parentManager: ElementManager): number {
                return 1;
            }

            /**
             * The function used for data-binding a data context to the DOM.
             */
            bind(): void { }
        }

        /**
         * The Type for referencing the '_NodeManager' injectable as a dependency.
         */
        export function INodeManagerStatic(
            _regex?: expressions.Regex,
            _ContextManager?: observable.IContextManagerStatic,
            _parser?: expressions.Parser,
            _TemplateControlFactory?: ui.ITemplateControlFactory,
            _Exception?: IExceptionStatic): INodeManagerStatic {
            // NOTE: This is not advised by TypeScript, but we want to do this.
            (<any>NodeManager)._markupRegex = _regex.markupRegex;
            (<any>NodeManager)._newLineRegex = _regex.newLineRegex;
            (<any>NodeManager)._ContextManager = _ContextManager;
            (<any>NodeManager)._parser = _parser;
            (<any>NodeManager)._TemplateControlFactory = _TemplateControlFactory;
            (<any>NodeManager)._Exception = _Exception;
            return NodeManager;
        }

        register.injectable(__NodeManagerStatic, INodeManagerStatic, [
            __Regex,
            __ContextManagerStatic,
            __Parser,
            __TemplateControlFactory
        ], __STATIC);

        /**
         * Performs essential Node management and binding functions. 
         */
        export interface INodeManagerStatic {
            /**
             * Determines if a string has the markup notation.
             * @param {string} text The text string in which to search for markup.
             */
            hasMarkup(text: string): boolean;

            /**
             * Given a string, finds markup in the string and creates an array of 
             * IParsedExpression.
             * @param {string} text The text string in which to search for markup.
             * composes the output given a proper context.
             */
            findMarkup(text: string): Array<expressions.IParsedExpression>;

            /**
             * Takes in a control with a data context and an array of IParsedExpression 
             * and outputs a string of the evaluated expressions.
             * @param {Array<plat.expressions.IParsedExpression>} expressions The composition array to evaluate.
             * @param {plat.ui.TemplateControl} control? The TemplateControl used to parse 
             * the expressions.
             */
            build(expressions: Array<expressions.IParsedExpression>, control?: ui.TemplateControl): string;

            /**
             * Registers a listener to be notified of a change in any associated identifier.
             * @param {Array<plat.expressions.IParsedExpression>} expressions An Array of 
             * IParsedExpressions to observe.
             * @param {plat.ui.TemplateControl} control The TemplateControl associated 
             * to the identifiers.
             * @param {(...args: Array<any>) => void} listener The listener to call when any identifier property changes.
             */
            observeExpressions(expressions: Array<expressions.IParsedExpression>,
                control: ui.TemplateControl, listener: (...args: Array<any>) => void): void;
        }

        /**
         * Describes a compiled Node.
         */
        export interface INode {
            /**
             * The control associated with the Node, if one exists.
             */
            control?: Control;

            /**
             * The Node that is compiled.
             */
            node?: Node;

            /**
             * The name of the Node.
             */
            nodeName?: string;

            /**
             * Any IParsedExpressions contained in the Node.
             */
            expressions?: Array<expressions.IParsedExpression>;

            /**
             * The injector for a control associated with the Node, if one exists.
             */
            injector?: dependency.Injector<Control>;
        }

        /**
         * Defines the interface for a compiled Element.
         */
        export interface IUiControlNode extends INode {
            /**
             * The control associated with the Element, if one exists.
             */
            control: ui.TemplateControl;

            /**
             * The resources element, if one exists, defined as the control element's first
             * element child.
             */
            resourceElement?: HTMLElement;
        }

        /**
         * Describes a compiled Element with all 
         * associated nodes contained within its tag.
         */
        export interface INodeMap {
            /**
             * The Element that is compiled.
             */
            element?: HTMLElement;

            /**
             * The compiled attribute Nodes for the Element.
             */
            nodes: Array<INode>;

            /**
             * An object of key/value attribute pairs.
             */
            attributes?: IObject<string>;

            /**
             * The relative context path for the node's corresponding 
             * TemplateControl, if specified.
             */
            childContext?: string;

            /**
             * Indicates whether or not an Control was found on the Element.
             */
            hasControl?: boolean;

            /**
             * A type of INode for a node that contains a TemplateControl, 
             * if one was found for the Element.
             */
            uiControlNode?: IUiControlNode;
        }

        /**
         * Holds an array of identifiers for one way bindings and an 
         * array of identifiers for one time bindings.
         */
        interface IUniqueIdentifiers {
            /**
             * An array of identifiers used for one way bindings.
             */
            identifiers: Array<string>;
            /**
             * An array of identifiers used for one time bindings.
             */
            oneTimeIdentifiers: Array<string>;
        }

        /**
         * Contains information needed for observing properties.
         */
        interface IObservationDetails {
            /**
             * The absolute identifier to be observed.
             */
            absoluteIdentifier: string;
            /**
             * The ContextManager that will 
             * be doing the observing.
             */
            manager: observable.ContextManager;
            /**
             * Signifies that a context value is defined for one time data binding.
             */
            isDefined: boolean;
        }

        /**
         * A class used to manage element nodes. Provides a way for compiling and binding the 
         * element/template. Also provides methods for cloning an 
         * ElementManager.
         */
        export class ElementManager extends NodeManager {
            /**
             * Reference to the Document injectable.
             */
            protected static _document: Document;

            /**
             * Reference to a cache injectable that stores ElementManagers.
             */
            protected static _managerCache: storage.Cache<ElementManager>;

            /**
             * Reference to the ResourcesFactory injectable.
             */
            protected static _ResourcesFactory: ui.IResourcesFactory;

            /**
             * Reference to the BindableTemplatesFactory injectable.
             */
            protected static _BindableTemplatesFactory: ui.IBindableTemplatesFactory;

            /**
             * Reference to the IExceptionStatic injectable.
             */
            protected static _Exception: IExceptionStatic;

            /**
             * Determines if the associated Element has controls that need to be instantiated or Attr nodes
             * containing text markup. If controls exist or markup is found a new 
             * ElementManager will be created,
             * else an empty NodeManager will be added to the Array of 
             * NodeManagers.
             * @param {Element} element The Element to use to identifier markup and controls.
             * @param {plat.processing.ElementManager} parent? The parent ElementManager 
             * used for context inheritance.
             */
            static create(element: Element, parent?: ElementManager): ElementManager {
                var name = element.nodeName.toLowerCase(),
                    nodeName = name,
                    injector = controlInjectors[name] || viewControlInjectors[name],
                    noControlAttribute = true,
                    hasUiControl = false,
                    uiControlNode: IUiControlNode;

                if (isNull(injector)) {
                    if (element.hasAttribute(__Control)) {
                        name = element.getAttribute(__Control).toLowerCase();
                        injector = controlInjectors[name] || viewControlInjectors[name];
                        noControlAttribute = false;
                    } else if (element.hasAttribute(__AttributePrefix + __Control)) {
                        name = element.getAttribute(__AttributePrefix + __Control).toLowerCase();
                        injector = controlInjectors[name] || viewControlInjectors[name];
                        noControlAttribute = false;
                    }
                }

                if (!isNull(injector)) {
                    var uiControl = <ui.TemplateControl>injector.inject(),
                        resourceElement = ElementManager.locateResources(element);

                    uiControlNode = {
                        control: uiControl,
                        resourceElement: resourceElement,
                        nodeName: name,
                        expressions: [],
                        injector: injector
                    };

                    hasUiControl = true;

                    if (noControlAttribute) {
                        element.setAttribute(__Control, name);
                    }

                    var replacementType = uiControl.replaceWith,
                        replaceWithDiv = replacementType === 'any' && noControlAttribute;
                    if (!isEmpty(replacementType) && (replacementType !== 'any' || replaceWithDiv) &&
                        replacementType.toLowerCase() !== nodeName) {
                        if (replaceWithDiv) {
                            replacementType = 'div';
                        }

                        var replacement = ElementManager._document.createElement(replacementType);
                        if (replacement.nodeType === Node.ELEMENT_NODE) {
                            element = replaceWith(element, <HTMLElement>replacement);
                        }
                    }
                }

                var elementMap = ElementManager._collectAttributes(element.attributes),
                    manager: ElementManager = acquire(ElementManager);

                elementMap.element = <HTMLElement>element;
                elementMap.uiControlNode = uiControlNode;

                manager.initialize(elementMap, parent);

                if (!(elementMap.hasControl || hasUiControl)) {
                    manager.bind = () => { return []; };
                } else {
                    manager.setUiControlTemplate();
                    return hasUiControl ? null : manager;
                }

                return manager;
            }

            /**
             * Looks through the Node's child nodes to try and find any 
             * defined Resources in a <plat-resources> tags.
             * @param {Node} node The node whose child nodes may contain Resources.
             */
            static locateResources(node: Node): HTMLElement {
                var childNodes: Array<Node> = Array.prototype.slice.call(node.childNodes),
                    childNode: Node,
                    nodeName: string;

                while (childNodes.length > 0) {
                    childNode = childNodes.shift();
                    nodeName = childNode.nodeName.toLowerCase();

                    if (nodeName === __Resources || nodeName === 'x-' + __Resources) {
                        return <HTMLElement>node.removeChild(childNode);
                    }
                }

                return null;
            }

            /**
             * Clones an ElementManager with a new element.
             * @param {plat.processing.ElementManager} sourceManager The original ElementManager.
             * @param {plat.processing.ElementManager} parent The parent ElementManager 
             * for the new clone.
             * @param {Element} element The new element to associate with the clone.
             * @param {plat.ui.TemplateControl} newControl? An optional control to associate with the clone.
             * @param {plat.processing.INodeMap} nodeMap? The {@link plat.processing.INodeMap} used to clone this 
             * ElementManager.
             */
            static clone(sourceManager: ElementManager, parent: ElementManager,
                element: Element, newControl?: ui.TemplateControl, nodeMap?: INodeMap): ElementManager {

                if (isNull(nodeMap)) {
                    nodeMap = ElementManager._cloneNodeMap(sourceManager.nodeMap, element, parent.getUiControl() ||
                        parent.getParentControl(), newControl);
                }

                var manager: ElementManager = acquire(ElementManager),
                    hasNewControl = !isNull(newControl);

                manager.nodeMap = nodeMap;
                manager.parent = parent;

                if (!isNull(parent)) {
                    parent.children.push(manager);
                }

                manager.replace = sourceManager.replace;
                manager.replaceNodeLength = sourceManager.replaceNodeLength;
                manager.hasOwnContext = sourceManager.hasOwnContext;
                manager.isClone = true;

                if (!(nodeMap.hasControl || hasNewControl)) {
                    manager.bind = () => { return []; };
                }

                if (hasNewControl) {
                    ElementManager._managerCache.put(newControl.uid, manager);
                }

                return manager;
            }

            /**
             * Clones an TemplateControl with a new INodeMap.
             * @param {plat.processing.INodeMap} sourceMap The source INodeMap used to clone the 
             * TemplateControl.
             * @param {plat.ui.TemplateControl} parent The parent control of the clone.
             */
            static cloneUiControl(sourceMap: INodeMap, parent: ui.TemplateControl): ui.TemplateControl {
                var uiControlNode = sourceMap.uiControlNode;

                if (isNull(uiControlNode) || isNull(uiControlNode.injector)) {
                    return;
                }

                var uiControl = uiControlNode.control,
                    newUiControl = <ui.TemplateControl>uiControlNode.injector.inject(),
                    resources = ElementManager._ResourcesFactory.getInstance(),
                    attributes: ui.Attributes = acquire(__AttributesInstance);

                newUiControl.parent = parent;
                parent.controls.push(newUiControl);
                newUiControl.controls = [];

                attributes.initialize(newUiControl, sourceMap.attributes);
                newUiControl.attributes = attributes;

                resources.initialize(newUiControl, uiControl.resources);
                newUiControl.resources = resources;

                ElementManager._ResourcesFactory.addControlResources(newUiControl);

                if (!isNull(uiControl.innerTemplate)) {
                    newUiControl.innerTemplate = <DocumentFragment>uiControl.innerTemplate.cloneNode(true);
                }

                newUiControl.type = uiControl.type;
                newUiControl.bindableTemplates = ElementManager._BindableTemplatesFactory.create(newUiControl, uiControl.bindableTemplates);
                newUiControl.replaceWith = uiControl.replaceWith;

                return newUiControl;
            }

            /**
             * Creates new INodes corresponding to the element 
             * associated with the INodeMap or the passed-in element.
             * @param {plat.processing.INodeMap} nodeMap The INodeMap that contains 
             * the attribute nodes.
             * @param {plat.ui.TemplateControl} parent The parent TemplateControl for 
             * the newly created controls.
             * @param {plat.ui.TemplateControl} templateControl? The TemplateControl 
             * linked to these created controls if one exists.
             * @param {Element} newElement? An optional element to use for attributes (used in cloning).
             * @param {boolean} isClone? Whether or not these controls are clones.
             */
            static createAttributeControls(nodeMap: INodeMap, parent: ui.TemplateControl,
                templateControl?: ui.TemplateControl, newElement?: Element, isClone?: boolean): Array<INode> {
                var nodes = nodeMap.nodes,
                    element = isClone === true ? newElement : nodeMap.element,
                    attributes: NamedNodeMap;

                if (isNode(element)) {
                    if (element.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
                        return isClone === true ? ElementManager._copyAttributeNodes(nodes) : [];
                    }

                    attributes = element.attributes;
                }

                var attrs = nodeMap.attributes,
                    newAttributes: ui.Attributes,
                    node: INode,
                    injector: dependency.Injector<Control>,
                    control: AttributeControl,
                    newNodes: Array<INode> = [],
                    length = nodes.length,
                    nodeName: string,
                    i: number;

                for (i = 0; i < length; ++i) {
                    node = nodes[i];
                    nodeName = node.nodeName;
                    injector = node.injector;
                    control = null;

                    if (!isNull(injector)) {
                        control = <AttributeControl>injector.inject();
                        node.control = control;
                        control.parent = parent;
                        control.element = <HTMLElement>element;

                        newAttributes = acquire(__AttributesInstance);
                        newAttributes.initialize(control, attrs);
                        control.attributes = newAttributes;

                        control.type = nodeName;

                        if (!isString(control.uid)) {
                            control.uid = uniqueId(__Plat);
                        }

                        control.templateControl = templateControl;
                    }

                    if (isClone === true) {
                        newNodes.push({
                            control: control,
                            expressions: node.expressions,
                            node: !attributes ? null : (attributes.getNamedItem(nodeName) ||
                            attributes.getNamedItem(__AttributePrefix + nodeName)),
                            nodeName: nodeName,
                            injector: injector
                        });

                        if (!isNull(control)) {
                            if (!isNull(parent)) {
                                parent.controls.push(control);
                            }

                            if (isFunction(control.initialize)) {
                                control.initialize();
                            }
                        }
                    }
                }

                if (!isClone) {
                    nodes.sort((a, b) => {
                        var aControl = <AttributeControl>a.control,
                            bControl = <AttributeControl>b.control;

                        if (isNull(aControl)) {
                            return 1;
                        } else if (isNull(bControl)) {
                            return -1;
                        }

                        var aPriority = isNumber(aControl.priority) ? aControl.priority : 0,
                            bPriority = isNumber(bControl.priority) ? bControl.priority : 0;

                        return bPriority - aPriority;
                    });

                    for (i = 0; i < length; ++i) {
                        node = nodes[i];
                        control = <AttributeControl>node.control;

                        if (!isNull(control)) {
                            if (!isNull(parent)) {
                                parent.controls.push(control);
                            }

                            if (isFunction(control.initialize)) {
                                control.initialize();
                            }
                        }
                    }
                }

                return newNodes;
            }

            /**
             * Returns a new instance of an ElementManager.
             */
            static getInstance(): ElementManager {
                return acquire(ElementManager);
            }

            /**
             * Iterates over the attributes (NamedNodeMap), creating an INodeMap. 
             * This map will contain injectors for all the Controls as well as parsed expressions 
             * and identifiers found for each Attribute (useful for data binding).
             * @param {NamedNodeMap} attributes The attributes used to create the INodeMap.
             */
            protected static _collectAttributes(attributes: NamedNodeMap): INodeMap {
                var nodes: Array<INode> = [],
                    attribute: Attr,
                    name: string,
                    value: string,
                    childContext: expressions.IParsedExpression,
                    childIdentifier: string,
                    hasMarkup: boolean,
                    hasMarkupFn = NodeManager.hasMarkup,
                    findMarkup = NodeManager.findMarkup,
                    _parser = NodeManager._parser,
                    build = NodeManager.build,
                    expressions: Array<expressions.IParsedExpression>,
                    hasControl = false,
                    injector: dependency.Injector<Control>,
                    length = attributes.length,
                    controlAttributes: IObject<string> = {};

                for (var i = 0; i < length; ++i) {
                    attribute = attributes[i];
                    value = attribute.value;
                    name = attribute.name.replace(/^data-/i, '').toLowerCase();
                    injector = controlInjectors[name] || viewControlInjectors[name];

                    if (name === __Context) {
                        if (value !== '') {
                            childContext = _parser.parse(value);
                            if (childContext.identifiers.length !== 1) {
                                var _Exception: IExceptionStatic = ElementManager._Exception;
                                _Exception.warn('Incorrect ' + __Context + ': ' +
                                    value + ', must contain a single identifier.', _Exception.COMPILE);
                            }
                            childIdentifier = childContext.identifiers[0];
                        }
                    } else if (name !== __Control) {
                        hasMarkup = hasMarkupFn(value);
                        expressions = hasMarkup ? findMarkup(value) : [];

                        if (!hasControl && (hasMarkup || !isNull(injector))) {
                            hasControl = true;
                        }

                        nodes.push({
                            control: null,
                            node: attribute,
                            nodeName: name,
                            expressions: expressions,
                            injector: injector
                        });
                    }

                    controlAttributes[camelCase(name)] = value;
                }

                return {
                    element: null,
                    attributes: controlAttributes,
                    nodes: nodes,
                    childContext: childIdentifier,
                    hasControl: hasControl
                };
            }

            /**
             * Used to copy the attribute nodes during the cloning process.
             * @param {Array<plat.processing.INode>} nodes The compiled INodes 
             * to be cloned.
             */
            protected static _copyAttributeNodes(nodes: Array<INode>): Array<INode> {
                var newNodes: Array<INode> = [],
                    length = nodes.length,
                    node: INode;

                for (var i = 0; i < length; ++i) {
                    node = nodes[i];
                    newNodes.push({
                        expressions: node.expressions,
                        nodeName: node.nodeName
                    });
                }

                return newNodes;
            }

            /**
             * Clones an INode with a new node.
             * @param {plat.processing.INode} sourceNode The original INode.
             * @param {Node} node The new node used for cloning.
             * @param {plat.ui.TemplateControl} newControl? An optional new control to associate with the cloned node.
             */
            protected static _cloneNode(sourceNode: INode, node: Node, newControl?: ui.TemplateControl): INode {
                return {
                    control: newControl,
                    injector: sourceNode.injector,
                    expressions: sourceNode.expressions,
                    node: node,
                    nodeName: sourceNode.nodeName
                };
            }

            /**
             * Clones an INodeMap with a new element.
             * @param {plat.processing.INodeMap} sourceMap The original INodeMap.
             * @param {Element} element The new Element used for cloning.
             * @param {plat.ui.TemplateControl} parent The TemplateControl associated 
             * with the parent ElementManager. 
             * @param {plat.ui.TemplateControl} newControl? An optional new TemplateControl 
             * to associate with the element.
             */
            protected static _cloneNodeMap(sourceMap: INodeMap, element: Element,
                parent: ui.TemplateControl, newControl?: ui.TemplateControl): INodeMap {
                var hasControl = sourceMap.hasControl,
                    nodeMap: INodeMap = {
                        attributes: sourceMap.attributes,
                        childContext: sourceMap.childContext,
                        nodes: [],
                        element: <HTMLElement>element,
                        uiControlNode: !isNull(sourceMap.uiControlNode) ?
                        <IUiControlNode>ElementManager._cloneNode(sourceMap.uiControlNode, element, newControl) : null,
                        hasControl: hasControl
                    };

                if (hasControl) {
                    nodeMap.nodes = ElementManager.createAttributeControls(sourceMap, parent, newControl, element, true);
                }

                return nodeMap;
            }

            protected static _inject: any = {
                _Promise: __Promise,
                _ContextManager: __ContextManagerStatic,
                _compiler: __Compiler,
                _CommentManagerFactory: __CommentManagerFactory,
                _ControlFactory: __ControlFactory,
                _TemplateControlFactory: __TemplateControlFactory,
                _BindableTemplatesFactory: __BindableTemplatesFactory,
                _Exception: __ExceptionStatic
            };

            /**
             * Reference to the IPromise injectable.
             */
            protected _Promise: async.IPromise;

            /**
             * Reference to the Compiler injectable.
             */
            protected _compiler: Compiler;

            /**
             * Reference to the ContextManagerStatic injectable.
             */
            protected _ContextManager: observable.IContextManagerStatic;

            /**
             * Reference to the ICommentManagerFactory injectable.
             */
            protected _CommentManagerFactory: ICommentManagerFactory;

            /**
             * Reference to the IControlFactory injectable.
             */
            protected _ControlFactory: IControlFactory;

            /**
             * Reference to the ITemplateControlFactory injectable.
             */
            protected _TemplateControlFactory: ui.ITemplateControlFactory;

            /**
             * Reference to the IBindableTemplatesFactory injectable.
             */
            protected _BindableTemplatesFactory: ui.IBindableTemplatesFactory;

            /**
             * Reference to the IExceptionStatic injectable.
             */
            protected _Exception: IExceptionStatic;

            /**
             * The child managers for this manager.
             */
            children: Array<NodeManager> = [];

            /**
             * Specifies the type for this NodeManager. 
             * It's value is "element".
             */
            type = 'element';

            /**
             * Specifies whether or not this manager has a TemplateControl which has a 
             * replaceWith property set to null or empty string.
             */
            replace = false;

            /**
             * Indicates whether the TemplateControl for this manager has its own context 
             * or inherits it from a parent.
             */
            hasOwnContext = false;

            /**
             * The length of a replaced control, indicates the number of nodes to slice 
             * out of the parent's childNodes.
             */
            replaceNodeLength: number;

            /**
             * In the event that a control has its own context, we need a promise to fullfill 
             * when the control is loaded to avoid loading its parent control first.
             */
            loadedPromise: async.IThenable<void>;

            /**
             * In the event that a control does not have its own context, we need a promise to fullfill 
             * when the control's context has been set.
             */
            contextPromise: async.IThenable<void>;

            /**
             * A promise that is set when an TemplateControl specifies a templateUrl 
             * and its HTML needs to be asynchronously obtained.
             */
            templatePromise: async.IThenable<void>;

            /**
             * Clones the ElementManager with a new node.
             * @param {Node} newNode The new element used to clone the ElementManager.
             * @param {plat.processing.ElementManager} parentManager The parent manager for the clone.
             * @param {plat.processing.INodeMap} nodeMap? An optional INodeMap to clone a ui control if needed.
             */
            clone(newNode: Node, parentManager: ElementManager, nodeMap?: INodeMap): number {
                var childNodes: Array<Node>,
                    clonedManager: ElementManager,
                    replace = this.replace,
                    children = this.children,
                    newControl = !isNull(nodeMap) ? nodeMap.uiControlNode.control : null,
                    newControlExists = !isNull(newControl),
                    startNodeManager: NodeManager,
                    endNodeManager: NodeManager;

                if (!newControlExists) {
                    // create new control
                    newControl = ElementManager.cloneUiControl(this.nodeMap,
                        (parentManager.getUiControl() || parentManager.getParentControl()));

                    newControlExists = !isNull(newControl);
                }

                if (replace) {
                    // definitely have newControl
                    var nodes = newNode.parentNode.childNodes,
                        arrayProto = Array.prototype,
                        startIndex = arrayProto.indexOf.call(nodes, newNode);

                    childNodes = arrayProto.slice.call(nodes, startIndex + 1, startIndex + this.replaceNodeLength);
                    clonedManager = ElementManager.clone(this, parentManager, null, newControl, nodeMap);
                    newControl.elementNodes = childNodes;
                    newControl.startNode = newNode;
                    newControl.endNode = childNodes.pop();

                    startNodeManager = children.shift();
                    endNodeManager = children.shift();

                    startNodeManager.clone(newControl.startNode, clonedManager);
                    endNodeManager.clone(newControl.endNode, clonedManager);

                    if (isFunction(newControl.initialize)) {
                        newControl.initialize();
                    }
                } else {
                    childNodes = Array.prototype.slice.call(newNode.childNodes);
                    clonedManager = ElementManager.clone(this, parentManager, <Element>newNode, newControl, nodeMap);
                    nodeMap = clonedManager.nodeMap;

                    if (newControlExists) {
                        newControl.element = <HTMLElement>newNode;
                        if (isFunction(newControl.initialize)) {
                            newControl.initialize();
                        }
                    }
                }

                if (clonedManager.hasOwnContext) {
                    postpone(() => {
                        clonedManager.observeRootContext(newControl, clonedManager.bindAndLoad);
                    });
                }

                var length = children.length,
                    childNodeOffset = 0;

                for (var i = 0; i < length; ++i) {
                    // clone children
                    childNodeOffset += children[i].clone(childNodes[childNodeOffset], clonedManager);
                }

                if (replace) {
                    children.unshift(endNodeManager);
                    children.unshift(startNodeManager);

                    return childNodeOffset + 2;
                }

                return 1;
            }

            /**
             * Initializes both the manager itself and all the controls associated to the manager's 
             * INodeMap.
             * @param {plat.processing.INodeMap} nodeMap A map of the nodes (element and attributes) 
             * associated with this ElementManager.
             * @param {plat.processing.ElementManager} parent The parent 
             * ElementManager.
             * @param {boolean} dontInitialize? Specifies whether or not the initialize method should 
             * be called for a TemplateControl if one is attached 
             * to this ElementManager.
             */
            initialize(nodeMap: INodeMap, parent: ElementManager, dontInitialize?: boolean): void {
                super.initialize(nodeMap, parent);

                var controlNode = nodeMap.uiControlNode,
                    hasUiControl = !isNull(controlNode),
                    control: ui.TemplateControl;

                if (hasUiControl) {
                    this._populateUiControl();
                    control = controlNode.control;
                    this.hasOwnContext = control.hasOwnContext;
                }

                if (nodeMap.hasControl) {
                    ElementManager.createAttributeControls(nodeMap, this.getParentControl(), control);
                }

                if (!dontInitialize && hasUiControl && isFunction(control.initialize)) {
                    control.initialize();
                }
            }

            /**
             * Links the data context to the DOM (data-binding).
             * ElementManager's associated 
             * INodeMap.
             */
            bind(): Array<Control> {
                var nodeMap = this.nodeMap,
                    parent = this.getParentControl(),
                    controlNode = nodeMap.uiControlNode,
                    controls: Array<Control> = [];

                if (!isNull(controlNode)) {
                    var uiControl = controlNode.control,
                        childContext = nodeMap.childContext,
                        getManager = this._ContextManager.getManager,
                        contextManager: observable.ContextManager,
                        absoluteContextPath = isNull(parent) ? __CONTEXT : parent.absoluteContextPath,
                        _TemplateControlFactory = this._TemplateControlFactory,
                        inheritsContext = !uiControl.hasOwnContext;

                    controls.push(uiControl);

                    if (inheritsContext && !isNull(childContext)) {
                        if (childContext[0] === '@') {
                            var split = childContext.split('.'),
                                alias = split.shift().slice(1),
                                resourceObj = _TemplateControlFactory.findResource(uiControl, alias),
                                _Exception: IExceptionStatic = this._Exception;

                            if (isObject(resourceObj)) {
                                var resource = resourceObj.resource;
                                if (isObject(resource) && resource.type === __OBSERVABLE_RESOURCE) {
                                    absoluteContextPath = 'resources.' + alias + '.value' + (split.length > 0 ? ('.' + split.join('.')) : '');
                                    uiControl.root = resourceObj.control;
                                } else {
                                    _Exception.warn('Only resources of type "observable" can be set as context.',
                                        _Exception.CONTEXT);
                                }
                            } else {
                                _Exception.warn('Could not set the context of ' + uiControl.type +
                                    ' with the resource specified as "' + childContext + '".',
                                    _Exception.CONTEXT);
                            }
                        } else {
                            absoluteContextPath += '.' + childContext;
                        }
                    }

                    uiControl.root = this._ControlFactory.getRootControl(uiControl) || uiControl;

                    contextManager = getManager(uiControl.root);

                    var awaitContext = false;

                    if (inheritsContext) {
                        uiControl.context = contextManager.getContext(absoluteContextPath.split('.'));
                        awaitContext = isUndefined(uiControl.context);
                    } else {
                        absoluteContextPath = __CONTEXT;
                    }

                    if (awaitContext) {
                        this.contextPromise = new this._Promise<void>((resolve, reject) => {
                            var removeListener = contextManager.observe(absoluteContextPath, {
                                uid: uiControl.uid,
                                listener: (newValue, oldValue) => {
                                    if (isUndefined(newValue)) {
                                        return;
                                    }
                                    removeListener();
                                    uiControl.context = newValue;
                                    this._beforeLoad(uiControl, absoluteContextPath);
                                    resolve();
                                }
                            });
                        });
                    } else {
                        this._beforeLoad(uiControl, absoluteContextPath);
                    }
                }

                this._observeControlIdentifiers(nodeMap.nodes, parent, controls);

                return controls;
            }

            /**
             * Sets the template for an manager by obtaining any needed HTML templates and 
             * calling its associated TemplateControl's 
             * setTemplate method.
             * @param {string} templateUrl? The URL for the associated TemplateControl's 
             * HTML template.
             */
            setUiControlTemplate(templateUrl?: string): void {
                var controlNode = this.nodeMap.uiControlNode;

                if (!isNull(controlNode)) {
                    var control = controlNode.control;

                    this.templatePromise = this._TemplateControlFactory.determineTemplate(control, templateUrl).then((template) => {
                        this.templatePromise = null;
                        this._initializeControl(control, <DocumentFragment>template.cloneNode(true));
                    }, (error) => {
                            this.templatePromise = null;
                            if (isNull(error)) {
                                var template: DocumentFragment = error;

                                if (this._BindableTemplatesFactory.isBoundControl(control)) {
                                    template = <DocumentFragment>appendChildren(control.element.childNodes);
                                }

                                this._initializeControl(control, template);
                            } else {
                                postpone(() => {
                                    var _Exception: IExceptionStatic = this._Exception;
                                    _Exception.fatal(error, _Exception.COMPILE);
                                });
                            }
                        });

                    return;
                }

                if (!isNull(this.parent)) {
                    return;
                }

                this.bindAndLoad();
            }

            /**
             * Retrieves the TemplateControl instance 
             * associated with this ElementManager.
             * associated with this ElementManager.
             */
            getUiControl(): ui.TemplateControl {
                var uiControlNode = this.nodeMap.uiControlNode;
                if (isNull(uiControlNode)) {
                    return;
                }

                return uiControlNode.control;
            }

            /**
             * Fullfills any template promises and finishes the compile phase for the HTML template associated 
             * with this ElementManager.
             * child manager's templates have been fulfilled.
             */
            fulfillTemplate(): async.IThenable<void> {
                if (!isNull(this.templatePromise)) {
                    return this.templatePromise.then(() => {
                        return this._fulfillChildTemplates();
                    });
                }

                return this._fulfillChildTemplates();
            }

            /**
             * Binds context to the DOM and loads controls.
             * child manager's controls have been bound and loaded.
             */
            bindAndLoad(): async.IThenable<void> {
                var controls = this.bind(),
                    promise: async.IThenable<void[]>;

                if (isPromise(this.contextPromise)) {
                    promise = this.contextPromise.then(() => {
                        return this._bindChildren();
                    });
                } else {
                    promise = this._bindChildren();
                }

                return promise.then(() => {
                    return this._loadControls(<Array<AttributeControl>>controls, this.getUiControl());
                }).catch((error: any) => {
                        postpone(() => {
                            var _Exception: IExceptionStatic = this._Exception;
                            _Exception.fatal(error, _Exception.BIND);
                        });
                    });
            }

            /**
             * Observes the root context for controls that specify their own context, and initiates 
             * a load upon a successful set of the context.
             * @param {plat.ui.TemplateControl} root The TemplateControl specifying its own context.
             * @param {() => async.IThenable<void>} loadMethod The function to initiate the loading of the root control and its 
             * children.
             */
            observeRootContext(root: ui.TemplateControl, loadMethod: () => async.IThenable<void>): void {
                loadMethod = loadMethod.bind(this);
                if (!isNull(root.context)) {
                    this.loadedPromise = loadMethod();
                    return;
                }

                this.loadedPromise = new this._Promise<void>((resolve) => {
                    var removeListener = this._ContextManager.getManager(root).observe(__CONTEXT, {
                        listener: () => {
                            removeListener();
                            loadMethod().then(resolve);
                        },
                        uid: root.uid
                    });
                }).catch((error) => {
                        postpone(() => {
                            var _Exception: IExceptionStatic = this._Exception;
                            _Exception.fatal(error, _Exception.BIND);
                        });
                    });
            }

            /**
             * Finalizes all the properties on an TemplateControl 
             * before loading.
             * @param {plat.ui.TemplateControl} uiControl The control to finalize.
             * @param {string} absoluteContextPath The absoluteContextPath of the uiControl.
             */
            protected _beforeLoad(uiControl: ui.TemplateControl, absoluteContextPath: string): void {
                var contextManager = this._ContextManager.getManager(uiControl.root),
                    _TemplateControlFactory = this._TemplateControlFactory;

                (<any>uiControl).zCC__plat = contextManager.observe(absoluteContextPath, {
                    uid: uiControl.uid,
                    listener: (newValue, oldValue) => {
                        uiControl.context = newValue;
                    }
                });

                _TemplateControlFactory.setAbsoluteContextPath(uiControl, absoluteContextPath);
                _TemplateControlFactory.setContextResources(uiControl);
                ElementManager._ResourcesFactory.bindResources(uiControl.resources);

                if (!this.replace) {
                    var element = uiControl.element;
                    if (!isNull(element) && isFunction(element.removeAttribute)) {
                        element.removeAttribute(__Hide);
                    }
                }
            }

            /**
             * Binds context to the DOM and calls bindAndLoad on all children.
             * child manager's controls have been bound and loaded.
             */
            protected _bindChildren(): async.IThenable<void[]> {
                var children = this.children,
                    length = children.length,
                    child: ElementManager,
                    promises: Array<async.IThenable<void>> = [];

                for (var i = 0; i < length; ++i) {
                    child = <ElementManager>children[i];

                    if (child.hasOwnContext) {
                        promises.push(child.loadedPromise);
                    } else if (!isUndefined(child.children)) {
                        promises.push(child.bindAndLoad());
                    } else {
                        child.bind();
                    }
                }

                return this._Promise.all(promises);
            }

            /**
             * Observes the identifiers associated with this manager's INodes.
             * @param {Array<plat.processing.INode>} nodes The array of INodes to iterate through.
             * @param {plat.ui.TemplateControl} parent The parent TemplateControl for context.
             * @param {Array<plat.Control>} controls The array of controls whose attributes will need to be updated 
             * upon the context changing.
             */
            protected _observeControlIdentifiers(nodes: Array<INode>, parent: ui.TemplateControl, controls: Array<Control>): void {
                var length = nodes.length,
                    bindings: Array<INode> = [],
                    attributeChanged = this._attributeChanged,
                    hasParent = !isNull(parent),
                    node: INode,
                    control: Control,
                    i = 0;

                for (; i < length; ++i) {
                    node = nodes[i];
                    control = node.control;

                    if (hasParent && node.expressions.length > 0) {
                        NodeManager.observeExpressions(node.expressions, parent,
                            attributeChanged.bind(this, node, parent, controls));
                        bindings.push(node);
                    }

                    if (!isNull(control)) {
                        controls.push(control);
                    }
                }

                length = bindings.length;
                for (i = 0; i < length; ++i) {
                    this._attributeChanged(bindings[i], parent, controls);
                }
            }

            /**
             * Loads the potential attribute based controls associated with this 
             * ElementManager and 
             * attaches the corresponding TemplateControl if available.
             * @param {Array<plat.AttributeControl>} controls The array of attribute based controls to load.
             * @param {plat.ui.TemplateControl} templateControl The TemplateControl 
             * associated with this manager.
             */
            protected _loadControls(controls: Array<AttributeControl>, templateControl: ui.TemplateControl): async.IThenable<void> {
                var length = controls.length,
                    control: AttributeControl,
                    load = this._ControlFactory.load,
                    templateControlLoaded = isNull(templateControl),
                    promise: async.IThenable<void>,
                    templateControlPriority: number,
                    i: number;

                if (templateControlLoaded) {
                    // don't need to set templateControlPriority because it will never be checked.
                    i = 0;
                } else {
                    var priority = templateControl.priority;
                    templateControlPriority = isNumber(priority) ? priority : 100;
                    i = 1;
                }

                for (; i < length; ++i) {
                    control = controls[i];
                    control.templateControl = templateControl;

                    if (!templateControlLoaded && templateControlPriority > control.priority) {
                        templateControlLoaded = true;
                        promise = load(templateControl);
                    }

                    load(control);
                }

                if (!templateControlLoaded) {
                    promise = load(templateControl);
                }

                return promise;
            }

            /**
             * Fulfills the template promise prior to binding and loading the control.
             * its associated controls are bound and loaded.
             */
            protected _fulfillAndLoad(): async.IThenable<void> {
                return this.fulfillTemplate().then(() => {
                    return this.bindAndLoad();
                }).catch((error) => {
                        postpone(() => {
                            var _Exception: IExceptionStatic = this._Exception;
                            _Exception.fatal(error, _Exception.BIND);
                        });
                    });
            }

            /**
             * Populates the TemplateControl properties associated with this manager  
             * if one exists.
             */
            protected _populateUiControl(): void {
                var nodeMap = this.nodeMap,
                    parent = this.getParentControl(),
                    controlNode = nodeMap.uiControlNode,
                    uiControl = controlNode.control,
                    uid = uiControl.uid,
                    resources = uiControl.resources,
                    element = nodeMap.element,
                    childNodes = Array.prototype.slice.call(element.childNodes),
                    newAttributes: ui.Attributes = acquire(__AttributesInstance),
                    replace = this.replace = (uiControl.replaceWith === null || uiControl.replaceWith === '');

                if (!isString(uid)) {
                    uid = uiControl.uid = uniqueId(__Plat);
                }

                ElementManager._managerCache.put(uid, this);

                if (!isNull(parent) && uiControl.parent !== parent) {
                    parent.controls.push(uiControl);
                    uiControl.parent = parent;
                }

                if (isFunction(element.setAttribute)) {
                    element.setAttribute(__Hide, '');
                }

                uiControl.element = element;
                uiControl.controls = [];

                newAttributes.initialize(uiControl, nodeMap.attributes);
                uiControl.attributes = newAttributes;

                if (isObject(resources) && isFunction(resources.add)) {
                    resources.add(controlNode.resourceElement);
                } else {
                    resources = ElementManager._ResourcesFactory.getInstance();
                    resources.initialize(uiControl, controlNode.resourceElement);
                    uiControl.resources = resources;
                }

                ElementManager._ResourcesFactory.addControlResources(uiControl);
                uiControl.type = controlNode.nodeName;

                uiControl.bindableTemplates = uiControl.bindableTemplates || this._BindableTemplatesFactory.create(uiControl);

                if (childNodes.length > 0 && (!isEmpty(uiControl.templateString) || !isEmpty(uiControl.templateUrl))) {
                    uiControl.innerTemplate = <DocumentFragment>appendChildren(childNodes);
                }

                if (replace) {
                    this._replaceElement(uiControl, nodeMap);
                }
            }

            /**
             * Removes the TemplateControl's element. Called if its replaceWith property is 
             * null or empty string.
             * @param {plat.ui.TemplateControl} control The TemplateControl whose element 
             * will be removed.
             * @param {plat.processing.INodeMap} nodeMap The INodeMap associated with this manager.
             */
            protected _replaceElement(control: ui.TemplateControl, nodeMap: INodeMap): void {
                var element = nodeMap.element,
                    parentNode = element.parentNode,
                    _document = ElementManager._document,
                    controlType = control.type,
                    controlUid = control.uid,
                    startNode = control.startNode = _document.createComment(controlType + ' ' + controlUid + __START_NODE),
                    endNode = control.endNode = _document.createComment(controlType + ' ' + controlUid + __END_NODE),
                    create = this._CommentManagerFactory.create;

                create(startNode, this);
                create(endNode, this);

                parentNode.insertBefore(startNode, element);
                parentNode.insertBefore(endNode, element.nextSibling);
                control.elementNodes = replace(element);

                control.element = nodeMap.element = null;
            }

            /**
             * Initializes a control's template and compiles the control.
             * @param {plat.ui.TemplateControl} uiControl The TemplateControl 
             * associated with this manager.
             * @param {DocumentFragment} template The associated TemplateControl's 
             * template.
             */
            protected _initializeControl(uiControl: ui.TemplateControl, template: DocumentFragment): void {
                var element = this.nodeMap.element,
                    // have to check if null since isNull checks for undefined case
                    replaceElement = this.replace,
                    endNode: Node;

                if (!isNull(template)) {
                    var resourceElement = ElementManager.locateResources(template);

                    if (!isNull(resourceElement)) {
                        uiControl.resources.add(ElementManager._ResourcesFactory.parseElement(resourceElement));
                    }

                    if (replaceElement) {
                        endNode = uiControl.endNode;
                        uiControl.elementNodes = Array.prototype.slice.call(template.childNodes);
                        insertBefore(endNode.parentNode, template, endNode);
                    } else {
                        insertBefore(element, template, element.lastChild);
                    }
                }

                if (isFunction(uiControl.setTemplate)) {
                    uiControl.setTemplate();
                }

                if (replaceElement) {
                    this._compiler.compile(uiControl.elementNodes, uiControl);
                    var startNode = uiControl.startNode,
                        parentNode = startNode.parentNode,
                        childNodes: Array<Node> = Array.prototype.slice.call(parentNode.childNodes);

                    endNode = uiControl.endNode;

                    uiControl.elementNodes = childNodes.slice(childNodes.indexOf(startNode) + 1, childNodes.indexOf(endNode));
                    this.replaceNodeLength = uiControl.elementNodes.length + 2;
                } else {
                    this._compiler.compile(element, uiControl);
                }

                if (uiControl.hasOwnContext && !this.isClone) {
                    this.observeRootContext(uiControl, this._fulfillAndLoad);
                } else if (isNull(uiControl.parent)) {
                    this._fulfillAndLoad();
                }
            }

            /**
             * A function to handle updating an attribute on all controls that have it 
             * as a property upon a change in its value.
             * @param {plat.processing.INode} node The INode where the change occurred.
             * @param {plat.ui.TemplateControl} parent The parent TemplateControl used for context.
             * @param {Array<plat.Control>} controls The controls that have the changed attribute as a property.
             */
            protected _attributeChanged(node: INode, parent: ui.TemplateControl, controls: Array<Control>): void {
                var length = controls.length,
                    key = camelCase(node.nodeName),
                    value = NodeManager.build(node.expressions, parent),
                    attributes: ui.Attributes,
                    oldValue: any;

                for (var i = 0; i < length; ++i) {
                    attributes = <ui.Attributes>controls[i].attributes;
                    oldValue = attributes[key];
                    attributes[key] = value;

                    (<any>attributes)._attributeChanged(key, value, oldValue);
                }

                if (!this.replace) {
                    (<Attr>node.node).value = value;
                }
            }

            /**
             * Runs through all the children of this manager and calls fulfillTemplate.
             * child managers have fullfilled their templates.
             */
            protected _fulfillChildTemplates(): async.IThenable<void> {
                var children = this.children,
                    child: ElementManager,
                    length = children.length,
                    promises: Array<async.IThenable<void>> = [];

                for (var i = 0; i < length; ++i) {
                    child = <ElementManager>children[i];
                    if (!isUndefined(child.children)) {
                        promises.push(child.fulfillTemplate());
                    }
                }

                return this._Promise.all(promises).catch((error) => {
                    postpone(() => {
                        var _Exception: IExceptionStatic = this._Exception;
                        _Exception.fatal(error, _Exception.COMPILE);
                    });
                });
            }
        }

        /**
         * The Type for referencing the '_ElementManagerFactory' injectable as a dependency.
         */
        export function IElementManagerFactory(
            _document?: Document,
            _managerCache?: storage.Cache<ElementManager>,
            _ResourcesFactory?: ui.IResourcesFactory,
            _BindableTemplatesFactory?: ui.IBindableTemplatesFactory,
            _Exception?: IExceptionStatic): IElementManagerFactory {
            (<any>ElementManager)._document = _document;
            (<any>ElementManager)._managerCache = _managerCache;
            (<any>ElementManager)._ResourcesFactory = _ResourcesFactory;
            (<any>ElementManager)._BindableTemplatesFactory = _BindableTemplatesFactory;
            (<any>ElementManager)._Exception = _Exception;
            return ElementManager;
        }

        register.injectable(__ElementManagerFactory, IElementManagerFactory, [
            __Document,
            __ManagerCache,
            __ResourcesFactory,
            __BindableTemplatesFactory,
            __ExceptionStatic
        ], __FACTORY);

        /**
         * Creates and manages a class for dealing with Element nodes.
         */
        export interface IElementManagerFactory {
            /**
             * Determines if the associated Element has controls that need to be instantiated or Attr nodes
             * containing text markup. If controls exist or markup is found a new 
             * ElementManager will be created,
             * else an empty NodeManager will be added to the Array of 
             * NodeManagers.
             * @param {Element} element The Element to use to identifier markup and controls.
             * @param {plat.processing.ElementManager} parent? The parent ElementManager 
             * used for context inheritance.
             */
            create(element: Element, parent?: ElementManager): ElementManager;

            /**
             * Creates new INodes corresponding to the element 
             * associated with the INodeMap or the passed-in element.
             * @param {plat.processing.INodeMap} nodeMap The INodeMap that contains 
             * the attribute nodes.
             * @param {plat.ui.TemplateControl} parent The parent TemplateControl for 
             * the newly created controls.
             * @param {plat.ui.TemplateControl} templateControl? The TemplateControl 
             * linked to these created controls if one exists.
             * @param {Element} newElement? An optional element to use for attributes (used in cloning).
             * @param {boolean} isClone? Whether or not these controls are clones.
             */
            createAttributeControls(nodeMap: INodeMap, parent: ui.TemplateControl,
                templateControl?: ui.TemplateControl, newElement?: Element, isClone?: boolean): Array<INode>;

            /**
             * Clones an TemplateControl with a new INodeMap.
             * @param {plat.processing.INodeMap} sourceMap The source INodeMap used to clone the 
             * TemplateControl.
             * @param {plat.ui.TemplateControl} parent The parent control of the clone.
             */
            cloneUiControl(sourceMap: INodeMap, parent: ui.TemplateControl): ui.TemplateControl;

            /**
             * Clones an ElementManager with a new element.
             * @param {plat.processing.ElementManager} sourceManager The original ElementManager.
             * @param {plat.processing.ElementManager} parent The parent ElementManager 
             * for the new clone.
             * @param {Element} element The new element to associate with the clone.
             * @param {plat.ui.TemplateControl} newControl? An optional control to associate with the clone.
             * @param {plat.processing.INodeMap} nodeMap? The {@link plat.processing.INodeMap} used to clone this 
             * ElementManager.
             */
            clone(sourceManager: ElementManager, parent: ElementManager,
                element: Element, newControl?: ui.TemplateControl, nodeMap?: INodeMap): ElementManager;

            /**
             * Looks through the Node's child nodes to try and find any 
             * defined Resources in a <plat-resources> tags.
             * @param {Node} node The node whose child nodes may contain Resources.
             */
            locateResources(node: Node): HTMLElement;

            /**
             * Returns a new instance of an ElementManager.
             */
            getInstance(): ElementManager;
        }

        /**
         * The class responsible for initializing and data-binding values to text nodes.
         */
        export class TextManager extends NodeManager {
            /**
             * Determines if a text node has markup, and creates a TextManager if it does. 
             * An TextManager responsible for markup in the passed in node or an empty 
             * TextManager if not markup is found will be added to the managers array.
             * @param {Node} node The Node used to find markup.
             * @param {plat.processing.ElementManager} parent The parent ElementManager 
             * for the node.
             * responsible for the passed in Text Node.
             */
            static create(node: Node, parent: ElementManager): TextManager {
                var value = node.nodeValue,
                    manager = acquire(TextManager);

                if (NodeManager.hasMarkup(value)) {
                    var expressions = NodeManager.findMarkup(value),
                        map = {
                            nodes: [{
                                node: node,
                                expressions: expressions
                            }]
                        };

                    manager.initialize(map, parent);

                    return manager;
                }

                manager.initialize(null, parent);
                manager.bind = noop;

                return manager;
            }
        
            /**
             * Clones an INodeMap with a new text node.
             * @param {plat.processing.INodeMap} sourceMap The original INodeMap.
             * @param {Node} newNode The new text node used for cloning.
             */
            protected static _cloneNodeMap(sourceMap: INodeMap, newNode: Node): INodeMap {
                var node = sourceMap.nodes[0],
                    nodeMap: INodeMap = {
                        nodes: [{
                            expressions: node.expressions,
                            nodeName: node.nodeName,
                            node: newNode
                        }]
                    };
                return nodeMap;
            }
        
            /**
             * Clones a TextManager with a new text node.
             * @param {plat.processing.NodeManager} sourceManager The original NodeManager.
             * @param {Node} node The new text node to associate with the clone.
             * @param {plat.processing.ElementManager} parent The parent ElementManager 
             * for the new clone.
             */
            protected static _clone(sourceManager: NodeManager, node: Node, parent: ElementManager): TextManager {
                var map = sourceManager.nodeMap,
                    manager = acquire(TextManager);

                if (!isNull(map)) {
                    manager.initialize(TextManager._cloneNodeMap(map, node), parent);
                } else {
                    manager.initialize(null, parent);
                    manager.bind = noop;
                }

                return manager;
            }
        
            /**
             * Specifies the type for this NodeManager. 
             * It's value is "text".
             */
            type = 'text';
        
            /**
             * Clones this TextManager with a new node.
             * @param {Node} newNode The new node attached to the cloned TextManager.
             * @param {plat.processing.ElementManager} parentManager The parent ElementManager 
             * for the clone.
             */
            clone(newNode: Node, parentManager: ElementManager): number {
                TextManager._clone(this, newNode, parentManager);
                return 1;
            }
        
            /**
             * The function used for data-binding a data context to the DOM.
             */
            bind(): void {
                var parent = this.getParentControl(),
                    node = this.nodeMap.nodes[0],
                    textNode = node.node,
                    expressions = node.expressions;

                NodeManager.observeExpressions(node.expressions, parent,
                    this._setText.bind(this, textNode, parent, expressions));

                this._setText(textNode, parent, expressions);
            }
        
            /**
             * Builds the node expression and sets the value.
             * @param {Node} Node The associated node whose value will be set.
             * @param {plat.ui.TemplateControl} control The control whose context will be used to bind 
             * the data.
             * @param {Array<plat.expressions.IParsedExpression>} expressions An array of parsed expressions used to build 
             * the node value.
             */
            protected _setText(node: Node, control: ui.TemplateControl, expressions: Array<expressions.IParsedExpression>): void {
                node.nodeValue = NodeManager.build(expressions,(control || <ui.TemplateControl>{}));
            }
        }

        /**
         * The Type for referencing the '_TextManager' injectable as a dependency.
         */
        export function ITextManagerFactory(): ITextManagerFactory {
            return TextManager;
        }

        register.injectable(__TextManagerFactory, ITextManagerFactory, null, __FACTORY);
    
        /**
         * Creates and manages a class for dealing with DOM Text Nodes.
         */
        export interface ITextManagerFactory {
            /**
             * Determines if a text node has markup, and creates a TextManager if it does. 
             * An TextManager responsible for markup in the passed in node or an empty 
             * TextManager if not markup is found will be added to the managers array.
             * @param {Node} node The Node used to find markup.
             * @param {plat.processing.ElementManager} parent The parent ElementManager 
             * for the node.
             * responsible for the passed in Text Node.
             */
            create(node: Node, parent?: ElementManager): TextManager;
        }

        /**
         * A class used to manage Comment nodes. Provides a way to 
         * clone a Comment node.
         */
        export class CommentManager extends NodeManager {
            /**
             * Creates a new CommentManager for the given Comment node.
             * @param {Node} node The Comment to associate with the new manager.
             * @param {plat.processing.ElementManager} parent The parent 
             * ElementManager.
             * responsible for the passed in Comment Node.
             */
            static create(node: Node, parent: ElementManager): CommentManager {
                var manager = acquire(CommentManager);

                manager.initialize({
                    nodes: [{
                        node: node
                    }]
                }, parent);

                return manager;
            }
        
            /**
             * Specifies the type for this NodeManager. 
             * It's value is "comment".
             */
            type: string = 'comment';
        
            /**
             * A method for cloning this manager with a new Comment.
             * @param {Node} newNode The new Comment node to associate with the cloned
             * manager.
             * @param {plat.processing.ElementManager} parentManager The parent ElementManager 
             * for the clone.
             */
            clone(newNode: Node, parentManager: ElementManager): number {
                CommentManager.create(newNode, parentManager);
                return 1;
            }
        }

        /**
         * The Type for referencing the '_CommentManagerFactory' injectable as a dependency.
         */
        export function ICommentManagerFactory(): ICommentManagerFactory {
            return CommentManager;
        }

        register.injectable(__CommentManagerFactory, ICommentManagerFactory, null, __FACTORY);
    
        /**
         * Creates and manages a class for dealing with Comment nodes.
         */
        export interface ICommentManagerFactory {
            /**
             * Creates a new CommentManager for the given Comment node.
             * @param {Node} node The Comment to associate with the new manager.
             * @param {plat.processing.ElementManager} parent The parent 
             * ElementManager.
             * responsible for the passed in Comment Node.
             */
            create(node: Node, parent: ElementManager): CommentManager;
        }
    }
    /**
     * Holds all classes and interfaces related to routing components in platypus.
     */
    export module routing {


        /**
         * Ties the browser and routers together, facilitating app navigation at every router level. 
         * Listens for url changes and responds accordingly. Also contains functionality for generating 
         * and changing the url.
         */
        export class Navigator {
            protected static _inject: any = {
                _Promise: __Promise,
                _Injector: __InjectorStatic,
                _browserConfig: __BrowserConfig,
                _browser: __Browser,
                _EventManager: __EventManagerStatic,
                _window: __Window,
                _Exception: __ExceptionStatic,
                _history: __History
            };

            /**
             * The navigator associated with the root router.
             */
            protected static _root: Navigator;

            /**
             * The IPromise injectable instance
             */
            protected _Promise: async.IPromise;

            /**
             * The Injector injectable instance
             */
            protected _Injector: typeof dependency.Injector;

            /**
             * The IBrowserConfig injectable instance
             */
            protected _browserConfig: web.IBrowserConfig;

            /**
             * The Browser injectable instance
             */
            protected _browser: web.Browser;

            /**
             * The IEventManagerStatic injectable instance
             */
            protected _EventManager: events.IEventManagerStatic;

            /**
             * The window injectable instance
             */
            protected _window: Window;

            /**
             * The IExceptionStatic injectable instance
             */
            protected _Exception: IExceptionStatic;

            /**
             * The History injectable instance
             */
            protected _history: History;

            /**
             * The router associated with this navigator.
             */
            router: Router;

            /**
             * A unique id, created during instantiation and found on every Navigator.
             */
            uid = uniqueId(__Plat);

            /**
             * States whether or not the Navigator is the root Navigator.
             */
            isRoot: boolean = false;

            /**
             * A method to call to stop listening for url changes, only works on the root navigator.
             */
            protected _removeUrlListener: IRemoveListener = noop;

            /**
             * A method to call to stop listening for url changes, only works on the root navigator.
             */
            protected _ignoreOnce = false;

            /**
             * A method to call to stop listening for url changes, only works on the root navigator.
             */
            protected _previousUrl: string;

            /**
             * A method to call to stop listening for url changes, only works on the root navigator.
             */
            protected _backNavigate: boolean = false;

            /**
             * A method to resolve the current navigation.
             */
            protected _resolveNavigate: () => void;

            /**
             * A method to reject the current navigation.
             */
            protected _rejectNavigate: (err: any) => void;

            /**
             * Initializes this Navigator with a router.
             * @param {plat.routing.Router} router The router that the navigator should use to match/generate routes.
             */
            initialize(router: Router): void {
                this.router = router;

                if (router.isRoot && !isObject(Navigator._root)) {
                    this.isRoot = true;
                    Navigator._root = this;
                    this._observeUrl();
                }
            }

            /**
             * Tells the navigator to navigate to the url registered for a particular view.
             * @param {any} view The view to which the Navigator should navigate.
             * @param {plat.routing.INavigationOptions} Options used to generate the url and perform navigation.
             */
            navigate(view: any, options?: INavigateOptions): async.IThenable<void> {
                options = isObject(options) ? options : {};
                var url: string;
            
                return this._finishNavigating().then(() => {
                    if (options.isUrl) {
                        url = view;
                    } else {
                        url = this._generate(view, options.parameters, options.query);
                    }
                    var x = 'will',
                        y = `Hello ${x} world`;

                    return this._navigate(url, options.replace);
                });
            }

            /**
             * Returns a promise that resolves when all navigation has finished.
             */
            protected _finishNavigating(): async.IThenable<void> {
                var router = Navigator._root.router;

                if (router.navigating) {
                    return router.finishNavigating.catch(() => { });
                }

                return this._Promise.resolve();
            }

            /**
             * Internal method for navigating to the specified url.
             */
            protected _navigate(url: string, replace?: boolean): async.IThenable<void> {
                if (!this.isRoot) {
                    return Navigator._root._navigate(url, replace);
                }

                return new this._Promise<void>((resolve, reject) => {
                    this._resolveNavigate = resolve;
                    this._rejectNavigate = reject;
                    this._browser.url(url, replace);
                });
            }

            /**
             * Tells the router to go back with the given options.
             */
            goBack(options?: IBackNavigationOptions): async.IThenable<void> {
                options = isObject(options) ? options : {};

                var length = Number(options.length);

                if (!isNumber(length)) {
                    length = 1;
                }

                if (!this.isRoot) {
                    return Navigator._root.goBack(options);
                }

                var _browser = this._browser,
                    url = _browser.url();

                this._backNavigate = true;
                return this._finishNavigating()
                    .then(() => {
                        return this._goBack(length);
                    });
            }

            /**
             * Internal method for going back a certain length in history
             */
            protected _goBack(length: number) {
                return new this._Promise<void>((resolve, reject) => {
                    this._resolveNavigate = resolve;
                    this._rejectNavigate = reject;
                    this._browser.back(length);
                });
            }

            /**
             * Lets the router dispose of all of the necessary properties.
             */
            dispose() {
                this._removeUrlListener();
                deleteProperty(this, 'router');
            }

            /**
             * The root navigator will always observe for url changes and handle them accordingly. This means instructing the 
             * router to navigate, and determining what to do in the event that navigation is prevented.
             */
            protected _observeUrl() {
                if (!isObject(this.router)) {
                    return;
                }

                var config = this._browserConfig,
                    EventManager = this._EventManager,
                    prefix: string,
                    previousUrl: string,
                    previousQuery: string,
                    backNavigate: boolean,
                    _Exception = this._Exception;

                this._previousUrl = this._browser.url();

                // Protect against accidentally calling this method twice.
                EventManager.dispose(this.uid);
                EventManager.on(this.uid, __backButton, () => {
                    var ev: events.DispatchEvent = acquire(__DispatchEventInstance);
                    ev.initialize('backButtonPressed', this);

                    EventManager.sendEvent(ev);

                    if (ev.defaultPrevented) {
                        return;
                    }

                    this.goBack();
                });

                EventManager.on(this.uid, __urlChanged, (ev: events.DispatchEvent, utils?: web.UrlUtils) => {
                    if (this._ignoreOnce) {
                        this._ignoreOnce = false;
                        return;
                    }

                    backNavigate = this._backNavigate;
                    this._backNavigate = false;
                    previousUrl = this._previousUrl;
                    this._finishNavigating()
                        .then(() => {
                            return this.router.navigate(utils.pathname, utils.query)
                        }).then(() => {
                            this._previousUrl = utils.pathname;
                            if (isFunction(this._resolveNavigate)) {
                                this._resolveNavigate();
                            }
                        }).catch((e: any) => {
                            this._ignoreOnce = true;
                            this._previousUrl = previousUrl;

                            this._browser.url(previousUrl, !backNavigate);
                            this._history.go(-1);

                            if (isFunction(this._rejectNavigate)) {
                                this._rejectNavigate(e);
                            }

                            if (!isEmpty(e)) {
                                _Exception.warn(e, _Exception.NAVIGATION);
                            }
                        });
                });
            }

            /**
             * Generates a url with the given view, parameters, and query.
             */
            protected _generate(view: any, parameters: any, query: any): string {
                if (isNull(this.router)) {
                    return;
                }

                if (isEmpty(view)) {
                    return view;
                }

                view = this._Injector.convertDependency(view);
                return this.router.generate(view, parameters, query);
            }
        }

        register.injectable(__NavigatorInstance, Navigator, null, __INSTANCE);

        /**
         * Specifies options used during navigation. Can help build the url, as well as change 
         * the behavior of the navigation.
         */
        export interface INavigateOptions {
            /**
             * Indicates that the url is specified and does not need to be generated.
             */
            isUrl?: boolean;

            /**
             * Url parameters, used to generate a url if the associated view is a variable route (i.e. '/posts/:id')
             */
            parameters?: IObject<any>;

            /**
             * An object used to generate a query string.
             */
            query?: IObject<any>;

            /**
             * Whether or not this url should replace the current url in the browser history.
             */
            replace?: boolean;
        }

        /**
         * Specifies options used during backward navigation.
         */
        export interface IBackNavigationOptions {
            /**
             * The length in history to go back.
             */
            length?: number;
        }

        /**
         * The Type for referencing the 'History' injectable as a dependency. 
         * Used so that the window.history can be mocked.
         */
        export function History(_window?: Window): History {
            return _window.history;
        }

        register.injectable(__History, History, [__Window]);

        var specialCharacters = [
            '/', '.', '*', '+', '?', '|',
            '(', ')', '[', ']', '{', '}', '\\'
        ],
            escapeRegex = new RegExp('(\\' + specialCharacters.join('|\\') + ')', 'g'),
            baseSegment: BaseSegment,
            dynamicSegments: IObject<DynamicSegment> = {},
            splatSegments: IObject<SplatSegment> = {},
            staticSegments: IObject<StaticSegment> = {};

        /**
         * Stores information about a segment, publishes a regex for matching the segment as well as 
         * methods for generating the segment and iterating over the characters in the segment.
         */
        export class BaseSegment {
            /**
             * Reference to the Regex injectable.
             */
            protected static _regex: expressions.Regex;

            /**
             * Parses a route into segments, populating an array of names (for dynamic and splat segments) as well as 
             * an ISegmentTypeCount object.
             * @param {string} route The route to parse.
             * @param {Array<string>} names An array to populate with dynamic/splat segment names
             * @param {plat.routing.ISegmentTypeCount} types An object to use for counting segment types in the route.
             */
            static parse(route: string, names: Array<string>, types: ISegmentTypeCount): Array<BaseSegment> {
                if (!isString(route) || !isArray(names) || !isObject(types)) {
                    return [];
                } else if (route[0] === '/') {
                    route = route.slice(1);
                }

                var segments: Array<string> = route.split('/'),
                    length = segments.length,
                    __findSegment = BaseSegment.__findSegment,
                    results: Array<BaseSegment> = [],
                    result: BaseSegment,
                    segment: string,
                    name: string,
                    match: RegExpMatchArray,
                    _regex = BaseSegment._regex;

                for (var i = 0; i < length; ++i) {
                    segment = segments[i];

                    if (segment === '') {
                        if (!isObject(baseSegment)) {
                            baseSegment = acquire(__BaseSegmentInstance);
                        }

                        results.push(baseSegment);
                    } else if (match = segment.match(_regex.dynamicSegmentsRegex)) {
                        name = match[1];

                        results.push(__findSegment(name, __DynamicSegmentInstance, dynamicSegments));
                        names.push(name);
                        types.dynamics++;
                    } else if (match = segment.match(_regex.splatSegmentRegex)) {
                        name = match[1];

                        results.push(__findSegment(name, __SplatSegmentInstance, splatSegments));
                        names.push(name);
                        types.splats++;
                    } else {
                        results.push(__findSegment(segment, __StaticSegmentInstance, staticSegments));
                        types.statics++;
                    }
                }

                return results;
            }

            /**
             * Parses a route into segments, populating an array of names (for dynamic and splat segments) as well as 
             * an ISegmentTypeCount object.
             * @param {string} name The name of the segment to look for.
             * @param {string} token The token used to acquire a new segment if necessary.
             * @param {plat.IObject<plat.routing.BaseSegment>} cache The cache in which to look for/store the segment.
             */
            private static __findSegment(name: string, token: string, cache: IObject<BaseSegment>): BaseSegment {
                var segment = cache[name];

                if (!isObject(segment)) {
                    segment = cache[name] = <BaseSegment>acquire(token);
                    segment.initialize(name);
                }

                return segment;
            }

            /**
             * Denotes the type of segment for this instance.
             */
            type: string = __BASE_SEGMENT_TYPE;

            /**
             * The name of the segment.
             */
            name: string = '';

            /**
             * A regular expression string which can be used to match the segment.
             */
            regex: string = '';

            /**
             * A regular expression string which can be used to match the segment.
             */
            protected _specification: ICharacterSpecification;

            /**
             * Initializes the segment.
             * @param {string} name? The name for the new segment.
             */
            initialize(name?: string): void {
                this.name = name;
            }

            /**
             * Iterates over the characters in the segment, calling an iterator method and accumulating the result of each call in 
             * a defined object.
             * @param {(previousValue: T, spec: plat.routing.ICharacterSpecification) => T} iterator The iterator to call with each character.
             * @param {T} initialValue? An optional initial value with which to start the accumulation.
             */
            reduceCharacters<T>(iterator: (previousValue: T, spec: ICharacterSpecification) => T, initialValue?: T): T {
                if (isObject(this._specification)) {
                    initialValue = iterator(initialValue, this._specification);
                }

                return initialValue;
            }

            /**
             * Generates a new segment, using the input parameters if necessary.
             * @param {plat.IObject<string>} parameters? The input parameters for the segment.
             */
            generate(parameters?: IObject<string>): string {
                return this.name;
            }
        }

        /**
         * The Type for referencing the '_BaseSegmentFactory' injectable as a dependency.
         */
        export function IBaseSegmentFactory(_regex: expressions.Regex): typeof BaseSegment {
            (<any>BaseSegment)._regex = _regex;
            return BaseSegment;
        }

        plat.register.injectable(__BaseSegmentFactory, IBaseSegmentFactory, [__Regex], __FACTORY);

        plat.register.injectable(__BaseSegmentInstance, BaseSegment, null, __INSTANCE);

        /**
         * Stores information about a static segment, publishes a regex for matching the segment as well as 
         * methods for generating the segment and iterating over the characters in the segment.
         */
        export class StaticSegment extends BaseSegment {
            /**
             * Denotes that this is a static segment.
             */
            type: string = __STATIC_SEGMENT_TYPE;

            /**
             * Initializes the segment.
             * @param {string} name? The name for the new segment.
             */
            initialize(name?: string) {
                super.initialize(name);

                this.regex = this.name.replace(escapeRegex, '\\$1');
            }

            /**
             * Iterates over the characters in the segment, calling an iterator method and accumulating the result of each call in 
             * a defined object.
             * @param {(previousValue: T, spec: plat.routing.ICharacterSpecification) => T} iterator The iterator to call with each character.
             * @param {T} initialValue? An optional initial value with which to start the accumulation.
             */
            reduceCharacters<T>(iterator: (previousValue: T, spec: ICharacterSpecification) => T, initialValue?: T): T {
                var name: string = this.name,
                    length = name.length,
                    value = initialValue;

                for (var i = 0; i < length; ++i) {
                    value = iterator(value, { validCharacters: name[i] });
                }

                return value;
            }
        }

        plat.register.injectable(__StaticSegmentInstance, StaticSegment, null, __INSTANCE);

        /**
         * Stores information about a variable segment (either dynamic or splat), publishes a regex for matching the segment as well as 
         * methods for generating the segment and iterating over the characters in the segment.
         */
        export class VariableSegment extends BaseSegment {
            /**
             * Denotes that this is a variable segment.
             */
            type: string = __VARIABLE_SEGMENT_TYPE;

            /**
             * Generates a new segment, using the input parameters.
             * @param {plat.IObject<string>} parameters? The input parameters for the segment.
             */
            generate(parameters?: IObject<string>) {
                if (isObject(parameters)) {
                    return parameters[this.name];
                }
            }
        }

        plat.register.injectable(__VariableSegmentInstance, VariableSegment, null, __INSTANCE);

        /**
         * Stores information about a splat segment, publishes a regex for matching the segment as well as 
         * methods for generating the segment and iterating over the characters in the segment.
         */
        export class SplatSegment extends VariableSegment {
            /**
             * Denotes that this is a splat segment.
             */
            type: string = __SPLAT_SEGMENT_TYPE;

            /**
             * A regular expression string which can be used to match the segment.
             */
            regex: string = '(.+)';

            /**
             * A regular expression string which can be used to match the segment.
             */
            protected _specification: ICharacterSpecification = {
                invalidCharacters: '',
                repeat: true
            };
        }

        plat.register.injectable(__SplatSegmentInstance, SplatSegment, null, __INSTANCE);

        /**
         * Stores information about a dynamic segment, publishes a regex for matching the segment as well as 
         * methods for generating the segment and iterating over the characters in the segment.
         */
        export class DynamicSegment extends VariableSegment {
            /**
             * Denotes that this is a dynamic segment.
             */
            type: string = __DYNAMIC_SEGMENT_TYPE;

            /**
             * A regular expression string which can be used to match the segment.
             */
            regex: string = '([^/]+)';

            /**
             * A regular expression string which can be used to match the segment.
             */
            protected _specification: ICharacterSpecification = {
                invalidCharacters: '/',
                repeat: true
            };
        }

        plat.register.injectable(__DynamicSegmentInstance, DynamicSegment, null, __INSTANCE);

        /**
         * Contains information for validating characters.
         */
        export interface ICharacterSpecification {
            /**
             * Contains all the invalid characters
             */
            invalidCharacters?: string;

            /**
             * Contains all the valid characters
             */
            validCharacters?: string;

            /**
             * Whether or not the character should repeat.
             */
            repeat?: boolean;
        }

        /**
         * Contains the total number of each segment type for a registered route. 
         * Used to sort recognized route solutions for more accurate route 
         * matching.
         */
        export interface ISegmentTypeCount {
            /**
             * A count of how many static segments exist in the route.
             */
            statics: number;

            /**
             * A count of how many dynamic segments exist in the route.
             */
            dynamics: number;

            /**
             * A count of how many splat segments exist in the route.
             */
            splats: number;
        }

        /**
         * Route segment matching is done using a state machine. Each state contains 
         * a specification indicating valid and invalid characters. Each State has a 
         * list of potential next states. When matching a route segment you start with 
         * a root state and then iteratively match next states until you complete the 
         * segment or invalidate the segment.
         */
        export class State {
            /**
             * Compiles a segment into a state tree.
             * @param {plat.routing.BaseSegment} segment The segment to compile.
             * @param {plat.routing.State} state The initial state with which to start compilation.
             */
            static compile(segment: BaseSegment, state: State): State {
                return segment.reduceCharacters((s, char) => {
                    return s.add(char);
                }, state);
            }

            /**
             * Links a path to a compiled state, and returns the result.
             * @param {plat.routing.State} state The state with which to link the result.
             * @param {string} path The path to link to the given state.
             */
            static link(state: State, path: string): IRecognizeResult {
                var delegates: Array<IDelegateParameterNames> = state.delegates,
                    regex = state.regex,
                    length = delegates.length,
                    matches = path.match(regex),
                    matchIndex = 1,
                    result: IRecognizeResult = [],
                    names: Array<string>,
                    parameters: any,
                    j: number,
                    jLength: number,
                    delegate: IDelegateParameterNames;

                for (var i = 0; i < length; ++i) {
                    delegate = delegates[i];
                    names = delegate.names;
                    parameters = {};

                    for (j = 0, jLength = names.length; j < jLength; ++j) {
                        parameters[names[j]] = matches[matchIndex++];
                    }

                    result.push({
                        delegate: delegate.delegate,
                        parameters: parameters,
                        isDynamic: jLength > 0
                    });
                }

                return result;
            }

            /**
             * Finds all the next states for a given character.
             * @param {string} char The character used to match next states.
             * @param {Array<plat.routing.State>} states The states with which to match the character.
             */
            static recognize(char: string, states: Array<State>): Array<State> {
                var nextStates: Array<State> = [],
                    length = states.length,
                    state: State;

                for (var i = 0; i < length; ++i) {
                    state = states[i];

                    nextStates = nextStates.concat(state.match(char));
                }

                return nextStates;
            }

            /**
             * Sorts states by statics/dynamics/splats.
             * Favors less splat (*) segments 
             * Favors less dynamic (:) segments
             * Favors more static segments
             * @param {Array<plat.routing.State>} states The states to sort.
             */
            static sort(states: Array<State>): Array<State> {
                if (!isArray(states)) {
                    return states;
                }

                var aTypes: ISegmentTypeCount,
                    aSplats: number,
                    aStatics: number,
                    aDynamics: number,
                    bTypes: ISegmentTypeCount,
                    bSplats: number,
                    bStatics: number,
                    bDynamics: number;

                return states.sort((a, b) => {
                    aTypes = a.types;
                    bTypes = b.types;
                    aSplats = aTypes.splats;
                    bSplats = bTypes.splats;

                    if (aSplats !== bSplats) {
                        return aSplats - bSplats;
                    }

                    aStatics = aTypes.statics;
                    aDynamics = aTypes.dynamics;
                    bStatics = bTypes.statics;
                    bDynamics = bTypes.dynamics;

                    if (aSplats > 0) {
                        if (aStatics !== bStatics) {
                            return bStatics - aStatics;
                        }

                        if (aDynamics !== bDynamics) {
                            return bDynamics - aDynamics;
                        }
                    }

                    if (aDynamics !== bDynamics) {
                        return aDynamics - bDynamics;
                    }

                    if (aStatics !== bStatics) {
                        return bStatics = aStatics;
                    }

                    return 0;
                });
            }

            /**
             * The possible next states for the current state.
             */
            nextStates: Array<State>;

            /**
             * The specification for the 
             * assigned route segment for this state.
             */
            specification: ICharacterSpecification;

            /**
             * The associated delegate objects for this 
             * state, with their parameter names.
             */
            delegates: Array<IDelegateParameterNames>;

            /**
             * A regular expression to match this state to a path.
             */
            regex: RegExp;

            /**
             * The totals for the different segment types 
             * for this state.
             */
            types: ISegmentTypeCount;

            /**
             * The constructor for a State.
             */
            constructor() {
                this.initialize();
            }

            /**
             * Initializes the state with the given specification.
             * @param {plat.routing.ICharacterSpecification} specification? The character specification for the state.
             */
            initialize(specification?: ICharacterSpecification) {
                this.specification = specification;
                this.nextStates = [];
            }

            /**
             * Adds a new specification to the next states. If the specification 
             * already exists as a next state a new one won't be used.
             * @param {plat.routing.ICharacterSpecification} specification? The character specification used to create 
             * the next state if necessary.
             */
            add(specification: ICharacterSpecification): State {
                var state = this._find(specification);

                if (isObject(state)) {
                    return state;
                }

                state = acquire(State);
                state.initialize(specification);

                this.nextStates.push(state);

                if (specification.repeat) {
                    state.nextStates.push(state);
                }

                return state;
            }

            /**
             * Finds next states that match the input character. If the character exists 
             * in the state's specification for valid characters, or if it does not 
             * exist in the specification for invalid characters, then the state is considered 
             * a match.
             * @param {string} char The character with which to match next states.
             */
            match(char: string) {
                var matches: Array<State> = [],
                    spec: ICharacterSpecification,
                    chars: string;

                this._someChildren((child) => {
                    spec = child.specification;

                    // Check for valid characters first
                    chars = spec.validCharacters;
                    if (isString(chars) && chars.indexOf(char) > -1) {
                        matches.push(child);
                        return;
                    }

                    // Check for no invalid characters
                    chars = spec.invalidCharacters;
                    if (isString(chars) && chars.indexOf(char) === -1) {
                        matches.push(child);
                    }
                });

                return matches;
            }

            /**
             * Finds the next state that shares the same specification 
             * as the input spec.
             * @param {plat.routing.ICharacterSpecification} spec The character specification used to find 
             * the next state.
             */
            protected _find(spec: ICharacterSpecification): State {
                var validChars = spec.validCharacters,
                    invalidChars = spec.invalidCharacters,
                    s: ICharacterSpecification,
                    found: State;

                this._someChildren((child) => {
                    s = child.specification;

                    if (s.validCharacters === validChars &&
                        s.invalidCharacters === invalidChars) {
                        found = child;
                        return true;
                    }
                });

                return found;
            }

            /**
             * Iterates through the next states and calls the input callback with each state. Acts like 
             * Utils.some. If the callback returns true, it will break out of the loop.
             * @param {(child: plat.routing.State) => boolean} iterator The function with which to call for each 
             * State. Can return true to break out of the loop
             */
            protected _someChildren(iterator: (child: State) => boolean): boolean;
            /**
             * Iterates through the next states and calls the input callback with each state.
             * @param {(child: plat.routing.State) => void} iterator The function with which to call for each 
             * State.
             */
            protected _someChildren(iterator: (child: State) => void): void;
            protected _someChildren(iterator: (child: State) => any) {
                var nextStates = this.nextStates,
                    length = nextStates.length;

                for (var i = 0; i < length; ++i) {
                    if (iterator(nextStates[i]) === true) {
                        return true;
                    }
                }
            }
        }

        /**
         * The Type for referencing the '_State' injectable as a dependency.
         */
        export function IStateStatic(): typeof State {
            return State;
        }

        plat.register.injectable(__StateStatic, IStateStatic, null, __STATIC);

        plat.register.injectable(__StateInstance, State, null, __INSTANCE);

        /**
         * Contains a delegate and its associated segment names. Used for populating 
         * the parameters in an IDelegateInfo object.
         */
        export interface IDelegateParameterNames {
            /**
             * The delegate for a registered route
             */
            delegate: any;

            /**
             * Contains the parameter names for a given delegate
             */
            names: Array<string>;
        }



        /**
         * Assists in compiling and linking route strings. You can register route strings using 
         * a defined scheme, and it will compile the routes. When you want to match a route, it will 
         * find the associated compiled route and link it to the data given with the passed-in route.
         */
        export class RouteRecognizer {
            protected static _inject: any = {
                _BaseSegmentFactory: __BaseSegmentFactory,
                _State: __StateStatic,
                _rootState: __StateInstance
            };

            /**
             * Reference to the BaseSegment injectable.
             */
            protected _BaseSegmentFactory: typeof BaseSegment;

            /**
             * Reference to the State injectable.
             */
            protected _State: typeof State;

            /**
             * A root state for the recognizer used to add next states.
             */
            protected _rootState: State;

            /**
             * All the named routes for this recognizer.
             */
            protected _namedRoutes: IObject<INamedRoute> = {};

            /**
             * A method for registering routes to be identified later. Internally the 
             * routes will be compiled into a series of states 
             * which will be used to recognize the route later.
             * @param {Array<plat.routing.IRouteDelegate>} routes The routes to register.
             * @param {plat.routing.IRegisterOptions} options? An object containing options for the 
             * registered route.
             */
            register(routes: Array<IRouteDelegate>, options?: IRegisterOptions): void {
                if (!isArray(routes)) {
                    return;
                }

                var finalState = this._rootState,
                    length = routes.length,
                    regex: Array<string> = ['^'],
                    types: ISegmentTypeCount = {
                        statics: 0,
                        dynamics: 0,
                        splats: 0
                    },
                    delegates: Array<IDelegateParameterNames> = [],
                    allSegments: Array<BaseSegment> = [],
                    segments: Array<BaseSegment>;

                for (var i = 0; i < length; ++i) {
                    segments = this._parse(routes[i], delegates, types);
                    allSegments = allSegments.concat(segments);
                    finalState = this._compile(segments, finalState, regex);
                }

                finalState = this._finalize(finalState, regex);
                finalState.delegates = delegates;
                finalState.regex = new RegExp(regex.join('') + '$');
                finalState.types = types;

                if (isObject(options) && isString(options.name)) {
                    this._namedRoutes[options.name] = {
                        segments: allSegments,
                        delegates: delegates
                    };
                }
            }

            /**
             * Searches for a match to the provided path. If a match is found, the path is deconstructed 
             * to populate a parameters object (if the registered route was a dynamic/splat route).
             * @param {string} path The path to recognize.
             * returned.
             */
            recognize(path: string) {
                var isTrailingSlashDropped: boolean = false,
                    solutions: Array<State> = [];

                path = this._addLeadingSlash(path);
                isTrailingSlashDropped = this._hasTrailingSlash(path);

                if (isTrailingSlashDropped) {
                    path = path.substr(0, path.length - 1);
                }

                solutions = this._filter(this._findStates(path));
                return this._link(solutions[0], path, isTrailingSlashDropped);
            }

            /**
             * Finds a INamedRoute and generates a string 
             * if it exists. Uses the parameters object to generate dynamic routes.
             * @param {string} name The named route with which to generate the route string.
             * @param {plat.IObject<string>} parameters The route parameters, in the case that the 
             * named route is dynamic.
             */
            generate(name: string, parameters?: IObject<string>): string {
                var route = this._namedRoutes[name],
                    output = '',
                    segments: Array<BaseSegment>,
                    length: number;

                if (!isObject(route)) {
                    return;
                }

                segments = route.segments;
                length = segments.length;

                for (var i = 0; i < length; i++) {
                    var segment = segments[i];

                    if (segment.type === __BASE_SEGMENT_TYPE) {
                        continue;
                    }

                    output += '/';
                    output += segment.generate(parameters);
                }

                output = this._addLeadingSlash(output);

                return output;
            }

            /**
             * Finds the delegates for an INamedRoute
             * @param {string} name The named route from which to get the delegates.
             */
            delegatesFor(name: string): Array<IDelegateParameterNames> {
                var namedRoute = this._namedRoutes[name],
                    delegates: Array<IDelegateParameterNames>;

                if (!isObject(namedRoute)) {
                    return [];
                }

                delegates = namedRoute.delegates;

                if (!isArray(delegates)) {
                    return [];
                }

                return delegates.slice(0);
            }

            /**
             * Determines whether or not an INamedRoute is registered.
             * @param {string} name The named route to search for.
             */
            exists(name: string): boolean {
                return isObject(this._namedRoutes[name]);
            }

            /**
             * Finalizes a compiled route, adding a final state if necessary. If the state is equal to the 
             * root state for the recognizer, a new state will be created. This is because the root state does not 
             * represent any route.
             * @param {plat.routing.State} state The state to finalize.
             * @param {string} regex The regular expression string built for the compiled routes. Used to recognize 
             * routes and associate them with the compiled routes.
             */
            protected _finalize(state: State, regex: Array<string>) {
                if (state === this._rootState) {
                    state = state.add({
                        validCharacters: '/'
                    });
                    regex.push('/');
                }

                return state;
            }

            /**
             * Parses a route into different segments;
             * @param {plat.routing.IRouteDelegate} route The route options to be parsed.
             * @param {Array<plat.routing.IDelegateParameterNames>} delegates The delegates and associated names for mapping parameters.
             * @param {plat.routing.ISegmentTypeCount} types A count of all the segment types in the route.
             */
            protected _parse(route: IRouteDelegate, delegates: Array<IDelegateParameterNames>, types: ISegmentTypeCount): Array<BaseSegment> {
                var names: Array<string> = [];

                delegates.push({
                    delegate: route.delegate,
                    names: names
                });

                return this._BaseSegmentFactory.parse(route.pattern, names, types);
            }

            /**
             * Compiles a list of segments into a series of states.
             * @param {Array<plat.routing.BaseSegment>} segments The segments to compile.
             * @param {plat.routing.State} state The initial state used to compile.
             * @param {Array<string>} regex A regular expression string to build in order to match the segments.
             */
            protected _compile(segments: Array<BaseSegment>, state: State, regex: Array<string>): State {
                var length = segments.length,
                    compile = this._State.compile,
                    segment: BaseSegment;

                for (var i = 0; i < length; ++i) {
                    segment = segments[i];

                    if (segment.type === __BASE_SEGMENT_TYPE) {
                        continue;
                    }

                    state = state.add({ validCharacters: '/' });
                    state = compile(segment, state);
                    regex.push('/' + segment.regex);
                }

                return state;
            }

            /**
             * Adds a leading slash to the passed-in string if necessary.
             * @param {string} path The path to which to add the slash.
             */
            protected _addLeadingSlash(path: string): string {
                path = decodeURI(path);

                if (path[0] !== '/') {
                    path = '/' + path;
                }

                return path;
            }

            /**
             * Checks for a trailing slash on a given string.
             * @param {string} path The path on which to look for a trailing slash.
             */
            protected _hasTrailingSlash(path: string): boolean {
                var length = path.length;

                return length > 1 && path[length - 1] === '/';
            }

            /**
             * Finds the compiled states for a given path.
             * @param {string} path The path with which to look for compiled states.
             */
            protected _findStates(path: string): Array<State> {
                var states: Array<State> = [
                    this._rootState
                ],
                    recognize = this._State.recognize,
                    length = path.length;

                for (var i = 0; i < length; ++i) {
                    states = recognize(path[i], states);

                    if (states.length === 0) {
                        break;
                    }
                }

                return states;
            }

            /**
             * Filters out states with no delegates, and sorts the states.
             * @param {Array<plat.routing.State>} states The states to filter.
             */
            protected _filter(states: Array<State>): Array<State> {
                var length = states.length,
                    solutions: Array<State> = [],
                    state: State;

                for (var i = 0; i < length; ++i) {
                    state = states[i];
                    if (isArray(state.delegates)) {
                        solutions.push(state);
                    }
                }

                return this._State.sort(solutions);
            }

            /**
             * Links a state to a path, producing an IRecognizeResult.
             * @param {plat.routing.State} states The state to link.
             * @param {string} path The path to link.
             * @param {boolean} isTrailingSlashDropped Whether or not the trailing slash is dropped from the path.
             */
            protected _link(state: State, path: string, isTrailingSlashDropped: boolean): IRecognizeResult {
                if (isObject(state) && isArray(state.delegates)) {
                    if (isTrailingSlashDropped && this._isDynamic(state)) {
                        path = path + '/';
                    }

                    return this._State.link(state, path);
                }
            }

            /**
             * Determines whether or not the state is dynamic.
             * @param {plat.routing.State} states The state used to determine if it is dynamic or not.
             */
            protected _isDynamic(state: State): boolean {
                return state.regex.source.slice(-5) === '(.+)$';
            }
        }

        plat.register.injectable(__RouteRecognizerInstance, RouteRecognizer, null, __INSTANCE);

        /**
         * An Array of delegate information for a recognized route.
         */
        export interface IRecognizeResult extends Array<IDelegateInfo> { };

        /**
         * Information for a recognized route segment. Contains the registered 
         * delegate, as well as a parameters object with key/value pairs for a 
         * dynamic route segment.
         */
        export interface IDelegateInfo {
            /**
             * A delegate can be anything. It is an object that will provide functionality 
             * for a route segment.
             */
            delegate: any;

            /**
             * The parameters for a route segment. If the segment is a dynamic or splat 
             * segment, then the parameters will be a key/value pair object with the associated 
             * variables.
             */
            parameters: any;

            /**
             * States whether or not the register delegate is for a dynamic/splat route. If 
             * this value is true, then the parameters object will be filled with key/value pairs 
             * associated to the registered route parameters.
             */
            isDynamic: boolean;
        }

        /**
         * Contains information about a named route. Created when you register a route with an associated 
         * name.
         */
        export interface INamedRoute {
            /**
             * All the segments for the named route.
             */
            segments: Array<BaseSegment>;

            /**
             * All the delegates for the named route.
             */
            delegates: Array<IDelegateParameterNames>;
        }

        /**
         * Used during route registeration to specify a delegate object to associate 
         * with a route.
         */
        export interface IRouteDelegate {
            /**
             * The pattern to match for the route, accepts dynamic routes as well as splat routes.
             * /posts/new
             * /posts/:id
             * /posts/*path
             */
            pattern: string;

            /**
             * A delegate object which should provide functionality for the associated pattern. It can be anything, 
             * it is up to the owner of the registered route to know what to do with the delegate.
             */
            delegate: any;
        }

        /**
         * Options that you can pass in when registering routes.
         */
        export interface IRegisterOptions {
            /**
             * Allows you to assign a name to a registered route.
             */
            name?: string;
        }



        var __CHILD_ROUTE = '/*childRoute',
            __CHILD_ROUTE_LENGTH = __CHILD_ROUTE.length;

        /**
         * Matches URLs to registered views. Allows for rejecting navigation, as well as 
         * processing route and query parameters. When a route is matches, the current view 
         * has the opportunity to reject/delay navigation. The next view can also reject navigation, 
         * or redirect. 
         * This is done asynchronously, giving the application the ability to make web service calls 
         * to determing 
         */
        export class Router {
            protected static _inject: any = {
                _Promise: __Promise,
                _Injector: __InjectorStatic,
                _EventManager: __EventManagerStatic,
                _browser: __Browser,
                _browserConfig: __BrowserConfig,
                recognizer: __RouteRecognizerInstance,
                childRecognizer: __RouteRecognizerInstance
            };

            static currentRouter(router?: Router) {
                if (!isNull(router)) {
                    Router.__currentRouter = router;
                }

                return Router.__currentRouter;
            }

            private static __currentRouter: Router;

            protected _Promise: async.IPromise;
            protected _Injector: typeof dependency.Injector;
            protected _EventManager: events.IEventManagerStatic;
            protected _browser: web.Browser;
            protected _browserConfig: web.IBrowserConfig;
            protected _resolve: typeof async.Promise.resolve = this._Promise.resolve.bind(this._Promise);
            protected _reject: typeof async.Promise.reject = this._Promise.reject.bind(this._Promise);

            recognizer: RouteRecognizer;
            childRecognizer: RouteRecognizer;

            paramTransforms: IObject<IRouteTransforms> = {};
            queryTransforms: IObject<IRouteTransforms> = {};
            interceptors: IObject<Array<(routeInfo: IRouteInfo) => any>> = {};

            navigating: boolean = false;
            finishNavigating: async.IThenable<void>;

            previousUrl: string;
            previousQuery: string;
            previousSegment: string;
            previousPattern: string;

            currentRouteInfo: IRouteInfo;

            ports: Array<ISupportRouteNavigation> = [];
            parent: Router;
            children: Array<Router> = [];
            uid: string;
            isRoot: boolean = false;
            ignoreOnce = false;

            constructor() {
                this.uid = uniqueId(__Plat);
                this.isRoot = isNull(Router.currentRouter());
                Router.currentRouter(this);
                this.initialize();
            }

            initialize(parent?: Router) {
                this.parent = parent;
            }

            addChild(child: Router) {
                if (isNull(child) || this.children.indexOf(child) > -1) {
                    return child;
                }

                child.initialize(this);
                this.children.push(child);

                return child;
            }

            removeChild(child: Router) {
                var children = this.children,
                    index = this.children.indexOf(child);

                if (index < 0) {
                    return;
                }

                children.splice(index, 1);
            }

            register(port: ISupportRouteNavigation) {
                var ports = this.ports;

                if (isNull(port) || ports.indexOf(port) > -1) {
                    return this._resolve();
                }

                ports.push(port);

                if (isObject(this.currentRouteInfo)) {
                    this.navigating = true;
                    return this._resolve(this.finishNavigating)
                        .catch(() => { })
                        .then(() => {
                            var routeInfo = _clone(this.currentRouteInfo, true);
                            return this.finishNavigating = this.canNavigateTo(routeInfo)
                                .then((canNavigateTo) => {
                                if (!canNavigateTo) {
                                    return;
                                }
                                this.currentRouteInfo = undefined;
                                return this.performNavigation(routeInfo);
                            }).then(() => {
                                this.navigating = false;
                                this.currentRouteInfo = routeInfo;
                            },() => {
                                    this.navigating = false;
                                });
                        });
                }

                return this._Promise.resolve();
            }

            unregister(port: ISupportRouteNavigation) {
                var ports = this.ports,
                    index = ports.indexOf(port);

                if (index < 0) {
                    return;
                }

                ports.splice(index, 1);

                if (ports.length === 0 && !isNull(this.parent)) {
                    this.parent.removeChild(this);
                }
            }

            configure(routes: IRouteMapping): async.IThenable<void>;
            configure(routes: Array<IRouteMapping>): async.IThenable<void>;
            configure(routes: any) {
                if (isArray(routes)) {
                    forEach((route: IRouteMapping) => {
                        this._configureRoute(route);
                    }, routes);
                } else {
                    this._configureRoute(routes);
                }

                return this.forceNavigate();
            }

            protected _configureRoute(route: IRouteMapping) {
                var resolve = this._resolve,
                    view: string = this._Injector.convertDependency(route.view);

                if (view === __NOOP_INJECTOR) {
                    return;
                }

                route.view = view;

                var routeDelegate: IRouteDelegate = {
                    pattern: route.pattern,
                    delegate: route
                },
                    childPattern = route.pattern + __CHILD_ROUTE,
                    childDelegate: IRouteDelegate = {
                        pattern: childPattern,
                        delegate: {
                            pattern: childPattern,
                            view: view
                        }
                    };

                this.recognizer.register([routeDelegate], { name: view });
                this.childRecognizer.register([childDelegate]);
            }

            param(handler: (value: any, parameters: any, query: any) => any, parameter: string, view: string): Router;
            param(handler: (value: any, parameters: any, query: any) => any, parameter: string, view: new (...args: any[]) => any): Router;
            param(handler: (value: any, parameters: any, query: any) => any, parameter: string, view: any) {
                return this._addHandler(handler, parameter, view, this.paramTransforms);
            }

            queryParam(handler: (value: any, query: any) => any, parameter: string, view: string): Router;
            queryParam(handler: (value: any, query: any) => any, parameter: string, view: new (...args: any[]) => any): Router;
            queryParam(handler: (value: string, query: any) => any, parameter: string, view: any) {
                return this._addHandler(handler, parameter, view, this.queryTransforms);
            }

            protected _addHandler(handler: (value: string, values: any, query?: any) => any, parameter: string, view: any, handlers: IObject<IRouteTransforms>) {
                if (isUndefined(view)) {
                    view = '*';
                }

                if (view !== '*') {
                    view = this._Injector.convertDependency(view);
                }

                if (isEmpty(view) || isEmpty(parameter)) {
                    return this;
                }

                var viewHandlers = handlers[view];

                if (!isObject(viewHandlers)) {
                    viewHandlers = handlers[view] = {};
                }

                var transforms = viewHandlers[parameter];

                if (!isArray(transforms)) {
                    transforms = viewHandlers[parameter] = [];
                }

                transforms.push(handler);

                return this;
            }

            intercept(handler: (routeInfo: IRouteInfo) => any, view?: string): Router;
            intercept(handler: (routeInfo: IRouteInfo) => any, view?: new (...args: any[]) => any): Router;
            intercept(handler: (routeInfo: IRouteInfo) => any, view?: any) {
                if (isUndefined(view)) {
                    view = '*';
                }

                if (view !== '*') {
                    view = this._Injector.convertDependency(view);
                }

                var interceptors = this.interceptors[view];

                if (!isArray(interceptors)) {
                    interceptors = this.interceptors[view] = [];
                }

                interceptors.push(handler);

                return this;
            }

            navigate(url: string, query?: IObject<any>, force?: boolean): async.IThenable<void> {
                if (!isObject(query)) {
                    query = {};
                }

                var resolve = this._resolve,
                    reject = this._reject,
                    queryString = serializeQuery(query);

                if (url === '/') {
                    url = '';
                }

                force = force === true;

                if (!isString(url) || this.navigating || (!force && url === this.previousUrl && queryString === this.previousQuery)) {
                    if (this.navigating) {
                        return this.finishNavigating;
                    }

                    return resolve();
                }

                var result: IRouteResult = this.recognizer.recognize(url),
                    routeInfo: IRouteInfo,
                    pattern: string,
                    segment: string;

                if (isEmpty(result)) {
                    result = this.childRecognizer.recognize(url);

                    if (isEmpty(result)) {
                        // route has not been matched
                        this.previousUrl = url;
                        this.previousQuery = queryString;
                        return resolve();
                    }

                    routeInfo = result[0];
                    routeInfo.query = query;
                    pattern = routeInfo.delegate.pattern;
                    pattern = pattern.substr(0, pattern.length - __CHILD_ROUTE_LENGTH);

                    if (this.previousPattern === pattern) {
                        // the pattern for this router is the same as the last pattern so 
                        // only navigate child routers.
                        this.navigating = true;
                        return this.finishNavigating = this.navigateChildren(routeInfo)
                            .then(() => {
                            this.previousUrl = url;
                            this.previousQuery = queryString;
                            this.navigating = false;
                            },(e) => {
                                this.navigating = false;
                                throw e;
                            });
                    }
                } else {
                    routeInfo = result[0];
                    routeInfo.query = query;
                    pattern = routeInfo.delegate.pattern;
                }
            
                segment = this.recognizer.generate(routeInfo.delegate.view, routeInfo.parameters);

                this.navigating = true;

                var routeInfoCopy = _clone(routeInfo, true);

                return this.finishNavigating = this.canNavigate(routeInfo)
                    .then((canNavigate: boolean) => {
                    if (!canNavigate) {
                        this.navigating = false;
                        throw new Error('Not cleared to navigate');
                    }

                    this.previousUrl = url;
                    this.previousQuery = queryString;

                    return this.performNavigation(routeInfo);
                })
                    .then(() => {
                    this.previousPattern = pattern;
                    this.previousSegment = segment;
                    this.currentRouteInfo = routeInfoCopy;
                    this.navigating = false;
                },(e) => {
                        this.navigating = false;
                        throw e;
                    });
            }

            forceNavigate() {
                var resolve = this._resolve,
                    query: IObject<any>;

                if (this.navigating) {
                    return resolve();
                }

                if (this.isRoot && isEmpty(this.previousUrl)) {
                    var utils = this._browser.urlUtils();
                    this.previousUrl = utils.pathname;
                    query = utils.query;
                }

                if (!isEmpty(this.previousQuery)) {
                    query = deserializeQuery(this.previousQuery);
                }

                if (!isEmpty(this.previousUrl)) {
                    return this.navigate(this.previousUrl, query, true);
                }

                return resolve();
            }

            generate(name: string, parameters?: IObject<any>, query?: IObject<string>) {
                var router = this,
                    prefix = '';

                while (!isNull(router) && !router.recognizer.exists(name)) {
                    router = router.parent;
                }

                if (isNull(router)) {
                    throw new Error('Route: ' + name + ' does not exist');
                }

                var path = router.recognizer.generate(name, parameters),
                    previous: string;

                while (!isNull(router = router.parent)) {
                    previous = router.previousSegment;
                    previous = (!isNull(previous) && previous !== '/') ? previous : '';
                    prefix = previous + prefix;
                }

                return prefix + path + serializeQuery(query);
            }

            navigateChildren(info: IRouteInfo) {
                var childRoute = this.getChildRoute(info);

                if (isNull(childRoute)) {
                    return this._resolve();
                }

                return mapAsync((child: Router) => {
                    return child.navigate(childRoute, info.query);
                }, this.children).then(noop);
            }

            getChildRoute(info: IRouteInfo) {
                if (isNull(info)) {
                    return;
                }

                var childRoute = info.parameters.childRoute;

                if (!isString(childRoute)) {
                    childRoute = '';
                }

                return '/' + childRoute;
            }

            performNavigation(info: IRouteInfo): async.IThenable<void> {
                var sameRoute = this._isSameRoute(info);

                return this.performNavigateFrom(sameRoute).then(() => {
                    if (sameRoute) {
                        return;
                    }

                    return mapAsync((port: ISupportRouteNavigation) => {
                        return port.navigateTo(info);
                    }, this.ports);
                })
                    .then(() => {
                    return this.navigateChildren(info);
                });
            }

            performNavigateFrom(ignorePorts?: boolean): async.IThenable<void> {
                return mapAsync((child: Router) => {
                    return child.performNavigateFrom();
                }, this.children)
                    .then(() => {
                    if (ignorePorts) {
                        return;
                    }

                    return mapAsync((port: ISupportRouteNavigation) => {
                        return port.navigateFrom();
                    }, this.ports);
                }).then(noop);
            }

            canNavigate(info: IRouteInfo) {
                var currentRouteInfo = this.currentRouteInfo,
                    sameRoute = this._isSameRoute(info);

                return this.canNavigateFrom(sameRoute)
                    .then((canNavigateFrom: boolean) => {
                    return canNavigateFrom && this.canNavigateTo(info, sameRoute);
                });
            }

            callAllHandlers(view: string, parameters: any, query?: any): async.IThenable<void> {
                var Promise = this._Promise,
                    resolve = Promise.resolve.bind(Promise);

                return this.callHandlers(this.queryTransforms['*'], query)
                    .then(() => this.callHandlers(this.queryTransforms[view], query))
                    .then(() => this.callHandlers(this.paramTransforms['*'], parameters, query))
                    .then(() => this.callHandlers(this.paramTransforms[view], parameters, query))
                    .then(noop);
            }

            callHandlers(allHandlers: IRouteTransforms, obj: any, query?: any) {
                var resolve = this._resolve;
                if (!isObject(obj)) {
                    obj = {};
                }

                return mapAsync((handlers: Array<(value: string, values: any, query?: any) => any>, key: string) => {
                    return mapAsyncInOrder((handler) => {
                        return resolve(handler(obj[key], obj, query));
                    }, handlers);
                }, allHandlers);
            }

            callInterceptors(info: IRouteInfo): async.IThenable<boolean> {
                var resolve = this._resolve;

                return mapAsyncInOrder((handler: (routeInfo: IRouteInfo) => any) => {
                    return resolve(handler(info));
                }, this.interceptors['*'])
                    .then(booleanReduce)
                    .then((canNavigate: boolean) => {
                    if (!canNavigate) {
                        return <any>[canNavigate];
                    }

                    return mapAsync((handler: (routeInfo: IRouteInfo) => any) => {
                        return resolve(handler(info));
                    }, this.interceptors[info.delegate.view]);
                })
                    .then(booleanReduce);
            }

            canNavigateFrom(ignorePorts?: boolean): async.IThenable<boolean> {
                return this._Promise.all(this.children.reduce((promises: Array<async.IThenable<boolean>>, child: Router) => {
                    return promises.concat(child.canNavigateFrom());
                }, <Array<async.IThenable<boolean>>>[]))
                    .then(booleanReduce)
                    .then((canNavigateFrom: boolean) => {
                    if (!canNavigateFrom || ignorePorts) {
                        return <any>[canNavigateFrom];
                    }

                    return mapAsync((port: ISupportRouteNavigation) => {
                        return port.canNavigateFrom();
                    }, this.ports);
                }).then(booleanReduce);
            }

            canNavigateTo(info: IRouteInfo, ignorePorts?: boolean): async.IThenable<boolean> {
                var promises: Array<any> = [];
                if (isEmpty(this.ports)) {
                    return this._resolve(true);
                }
                return this.callAllHandlers(info.delegate.view, info.parameters, info.query)
                    .then(() => {
                    return this.callInterceptors(info);
                })
                    .then((canNavigateTo) => {
                    if (canNavigateTo === false || ignorePorts) {
                        return <any>[canNavigateTo];
                    }

                    return mapAsync((port: ISupportRouteNavigation) => {
                        return port.canNavigateTo(info);
                    }, this.ports);
                })
                    .then(booleanReduce)
                    .then((canNavigateTo: boolean) => {
                    if (!canNavigateTo) {
                        promises = [canNavigateTo];
                    } else {
                        var childRoute = this.getChildRoute(info),
                            childResult: IRouteResult,
                            childInfo: IRouteInfo;

                        promises = [];

                        this.children.reduce((promises: Array<async.IThenable<boolean>>, child: Router) => {
                            childResult = child.recognizer.recognize(childRoute);

                            if (isEmpty(childResult)) {
                                child._clearInfo();
                                return;
                            }

                            childInfo = childResult[0];
                            childInfo.query = info.query;
                            return promises.concat(child.canNavigateTo(childInfo));
                        }, promises);
                    }

                    return this._Promise.all(promises);
                })
                    .then(booleanReduce);
            }

            protected _isSameRoute(info: IRouteInfo) {
                var currentRouteInfo = this.currentRouteInfo;

                if (!isObject(currentRouteInfo)) {
                    return false;
                }

                var currentDelegate = currentRouteInfo.delegate,
                    delegate = info.delegate,
                    currentParameters = serializeQuery(currentRouteInfo.parameters),
                    parameters = serializeQuery(info.parameters),
                    currentQuery = serializeQuery(currentRouteInfo.query),
                    query = serializeQuery(info.query);

                return currentDelegate.view === delegate.view &&
                    currentDelegate.pattern === delegate.pattern &&
                    currentParameters === parameters &&
                    currentQuery === query;
            }

            protected _clearInfo() {
                this.previousSegment = undefined;
                this.previousPattern = undefined;
                this.previousUrl = undefined;
                this.previousQuery = undefined;
                this.currentRouteInfo = undefined;
                this.navigating = false;
                forEach((child) => {
                    child._clearInfo();
                }, this.children);
            }
        }

        plat.register.injectable(__Router, Router, null, __INSTANCE);

        export function IRouterStatic() {
            return Router;
        }

        plat.register.injectable(__RouterStatic, IRouterStatic);

        export interface IRouteMapping {
            pattern: string;
            view: any;
        }

        export interface IRouteResult extends Array<IRouteInfo> { }

        export interface IRouteInfo extends IDelegateInfo {
            delegate: IRouteMapping;
            query?: IObject<any>;
        }

        export interface IRouteTransforms extends IObject<Array<(value: string, values: any, query?: any) => any>> { }

        export interface ISupportRouteNavigation {
            canNavigateFrom(): async.IThenable<boolean>;
            canNavigateTo(routeInfo: IRouteInfo): async.IThenable<boolean>;

            navigateFrom(): async.IThenable<any>;
            navigateTo(routeInfo: IRouteInfo): async.IThenable<any>;
        }
    }
    /**
     * Holds all classes and interfaces related to attribute control components in platypus.
     */
    export module controls {
        /**
         * Allows for assigning a name to an Element or TemplateControl and referencing it 
         * from parent controls.
         * This control is useful for avoiding query selectors since it will store itself on all of its ancestor controls using 
         * the associated name.
         */
        export class Name extends AttributeControl {
            /**
             * The property name on the ancestor controls to set as the INamedElement.
             */
            protected _label: string;

            /**
             * Defines the property specified by the attribute value as the INamedElement 
             * on all the ancestor controls, ignoring those that already have the property defined.
             */
            initialize(): void {
                var attr = camelCase(this.type),
                    name = this.attributes[attr];

                if (isEmpty(name) || this._isPrecompiled()) {
                    return;
                }

                this._label = name;
                this._define(name);
            }

            /**
             * Removes the INamedElement from the ancestor controls.
             */
            dispose(): void {
                var name = this._label,
                    control: any = this.parent;

                while (!isUndefined(name) && isObject(control)) {
                    if (isObject(control[name]) &&
                        isNode(control[name].element) &&
                        control[name].element === this.element) {
                        deleteProperty(control, name);
                    }

                    control = control.parent;
                }
            }

            /**
             * Defines the property specified by the attribute value as the INamedElement 
             * on all the ancestor controls, ignoring those that already have the property defined.
             * @param {string} name The name to define on all the ancestor controls.
             */
            protected _define(name: string): void {
                var templateControl = this.templateControl;

                if (!isNull(templateControl)) {
                    templateControl.name = name;
                }

                var control: any = this.parent,
                    namedElement = {
                        element: this.element,
                        control: templateControl
                    };

                while (isObject(control)) {
                    var obj = control[name];

                    if (!isObject(obj)) {
                        control[name] = namedElement;
                    }

                    control = control.parent;
                }
            }

            /**
             * Determines whether or not this control is part of a pre-compiled control tree. In the event 
             * that it is, it shouldn't set itself on the ancestor controls.
             * @param {string} name The name to define on all the ancestor controls.
             */
            protected _isPrecompiled(): boolean {
                var control = this.parent;

                while (!isNull(control)) {
                    if (control.type.indexOf(__COMPILED) !== -1) {
                        return true;
                    }
                    control = control.parent;
                }
                return false;
            }
        }

        register.control(__Name, Name);

        /**
         * Defines the object added to a root control when an HTML element has 
         * a plat-name attribute. If the element corresponds to a registered 
         * control, the control will be included in the object.
         */
        export interface INamedElement<E extends Element, C> {
            /**
             * The element on which the plat-name is specified.
             */
            element: E;

            /**
             * The template control on the associated element, if one 
             * exists.
             */
            control?: C;
        }

        /**
         * An AttributeControl that binds to a specified DOM event handler.
         */
        export class SimpleEventControl extends AttributeControl implements ISendEvents {
            protected static _inject: any = {
                _parser: __Parser,
                _regex: __Regex
            };

            /**
             * Reference to the Parser injectable.
             */
            protected _parser: expressions.Parser;

            /**
             * Reference to the Regex injectable.
             */
            protected _regex: expressions.Regex;

            /**
             * The event name.
             */
            event: string;

            /**
             * The camel-cased name of the control as it appears as an attribute.
             */
            attribute: string;

            /**
             * A parsed form of the expression found in the attribute's value.
             */
            protected _expression: Array<string> = [];

            /**
             * An array of the aliases used in the expression.
             */
            protected _aliases: Array<string> = [];

            /**
             * Kicks off finding and setting the listener.
             */
            loaded(): void {
                if (isNull(this.element)) {
                    return;
                }

                this.attribute = camelCase(this.type);
                this._setListener();
            }

            /**
             * Parses function args and sets the event listener.
             */
            protected _setListener(): void {
                var fn = this.attributes[this.attribute];

                if (isEmpty(this.event) || isEmpty(fn)) {
                    return;
                }

                this._parseArgs(fn);
                this._addEventListeners();
            }

            /**
             * Adds any and all necessary event listeners.
             */
            protected _addEventListeners(): void {
                this.addEventListener(this.element, this.event, this._onEvent, false);
            }

            /**
             * Constructs the function to evaluate with 
             * the evaluated arguments taking resources 
             * into account.
             * The function to call and the associated arguments, as well as the control context with which to call the function.
             */
            protected _buildExpression(): { fn: () => void; context: any; args: Array<expressions.IParsedExpression>; } {
                var expression = this._expression.slice(0),
                    _parser = this._parser,
                    parent = this.parent,
                    hasParent = !isNull(parent),
                    listenerStr = expression.shift(),
                    listener: IControlProperty,
                    context: any,
                    fn: () => void,
                    aliases: IObject<any>,
                    argContext: any;

                if (!isNull(parent)) {
                    aliases = parent.getResources(this._aliases);
                    argContext = parent.context;
                }

                if (listenerStr[0] !== '@') {
                    var _Exception: IExceptionStatic = this._Exception;
                    listener = this.findProperty(listenerStr);

                    if (isNull(listener)) {
                        _Exception.warn('Could not find property ' + listenerStr + ' on any parent control.',
                            _Exception.CONTROL);
                        return {
                            fn: noop,
                            context: <ui.TemplateControl>{},
                            args: []
                        };
                    }

                    var parsedExpression = listener.expresssion,
                        identifiers = parsedExpression.identifiers;

                    if (identifiers.length > 1) {
                        _Exception.warn('Cannot have more than one identifier in a ' + this.type +
                            '\'s expression.', _Exception.CONTROL);
                        return {
                            fn: noop,
                            context: <ui.TemplateControl>{},
                            args: []
                        };
                    }

                    var identifier = identifiers[0],
                        split = identifier.split('.');

                    // pop key
                    split.pop();
                    context = split.length === 0 ? listener.control : _parser.parse(split.join('.')).evaluate(listener.control);
                    fn = listener.value;
                } else {
                    fn = isNull(aliases) ? noop : (aliases[listenerStr] || noop);
                    context = undefined;
                }

                var length = expression.length,
                    args: Array<expressions.IParsedExpression> = [];

                for (var i = 0; i < length; ++i) {
                    args.push(_parser.parse(expression[i]).evaluate(argContext, aliases));
                }

                return {
                    fn: fn,
                    context: context,
                    args: args
                };
            }

            /**
             * Calls the specified function when the DOM event is fired.
             * @param {Event} ev The event object.
             */
            protected _onEvent(ev: Event): void {
                var expression = this._buildExpression(),
                    fn = expression.fn;

                if (!isFunction(fn)) {
                    var _Exception: IExceptionStatic = this._Exception;
                    _Exception.warn('Cannot find registered event method ' +
                        this._expression[0] + ' for control: ' + this.type, _Exception.BIND);
                    return;
                }

                fn.apply(expression.context, expression.args.concat(<any>ev));
            }

            /**
             * Finds all alias contained within the expression.
             * @param {Array<string>} args The array of arguments as strings.
             */
            protected _findAliases(args: Array<string>): Array<string> {
                var length = args.length,
                    arg: string,
                    exec: RegExpExecArray,
                    aliases: IObject<boolean> = {},
                    _regex = this._regex;

                for (var i = 0; i < length; ++i) {
                    arg = args[i].trim();

                    if (arg[0] === '@') {
                        exec = _regex.aliasRegex.exec(arg);
                        aliases[!isNull(exec) ? exec[0] : arg.slice(1)] = true;
                    }
                }

                return Object.keys(aliases);
            }

            /**
             * Parses the expression and separates the function 
             * from its arguments.
             * @param {string} expression The expression to parse.
             */
            protected _parseArgs(expression: string): void {
                if (isEmpty(expression)) {
                    return;
                }

                var exec = this._regex.argumentRegex.exec(expression);
                if (!isNull(exec)) {
                    this._expression = [expression.slice(0, exec.index)]
                        .concat((exec[1] !== '') ? exec[1].split(',') : []);
                } else {
                    this._expression.push(expression);
                }

                this._aliases = this._findAliases(this._expression);
            }
        }

        /**
         * An AttributeControl that binds to a specified DOM event handler.
         */
        export interface ISendEvents extends AttributeControl {
            /**
             * The event name.
             */
            event: string;

            /**
             * The camel-cased name of the control as it appears as an attribute.
             */
            attribute: string;
        }

        /**
         * A SimpleEventControl for the '$tap' event.
         */
        export class Tap extends SimpleEventControl {
            /**
             * The event name.
             */
            event: string = __tap;
        }

        /**
         * A SimpleEventControl for the 'blur' event.
         */
        export class Blur extends SimpleEventControl {
            /**
             * The event name.
             */
            event: string = 'blur';
        }

        /**
         * A SimpleEventControl for the 'change' event.
         */
        export class Change extends SimpleEventControl {
            /**
             * The event name.
             */
            event: string = 'change';
        }

        /**
         * A SimpleEventControl for the 'copy' event.
         */
        export class Copy extends SimpleEventControl {
            /**
             * The event name.
             */
            event: string = 'copy';
        }

        /**
         * A SimpleEventControl for the 'cut' event.
         */
        export class Cut extends SimpleEventControl {
            /**
             * The event name.
             */
            event: string = 'cut';
        }

        /**
         * A SimpleEventControl for the 'paste' event.
         */
        export class Paste extends SimpleEventControl {
            /**
             * The event name.
             */
            event: string = 'paste';
        }

        /**
         * A SimpleEventControl for the '$dbltap' event.
         */
        export class DblTap extends SimpleEventControl {
            /**
             * The event name.
             */
            event: string = __dbltap;
        }

        /**
         * A SimpleEventControl for the 'focus' event.
         */
        export class Focus extends SimpleEventControl {
            /**
             * The event name.
             */
            event: string = 'focus';
        }

        /**
         * A SimpleEventControl for the '$touchstart' event.
         */
        export class TouchStart extends SimpleEventControl {
            /**
             * The event name.
             */
            event: string = __touchstart;
        }

        /**
         * A SimpleEventControl for the '$touchend' event.
         */
        export class TouchEnd extends SimpleEventControl {
            /**
             * The event name.
             */
            event: string = __touchend;
        }

        /**
         * A SimpleEventControl for the '$touchmove' event.
         */
        export class TouchMove extends SimpleEventControl {
            /**
             * The event name.
             */
            event: string = __touchmove;
        }

        /**
         * A SimpleEventControl for the '$touchcancel' event.
         */
        export class TouchCancel extends SimpleEventControl {
            /**
             * The event name.
             */
            event: string = __touchcancel;
        }

        /**
         * A SimpleEventControl for the '$hold' event.
         */
        export class Hold extends SimpleEventControl {
            /**
             * The event name.
             */
            event: string = __hold;
        }

        /**
         * A SimpleEventControl for the '$release' event.
         */
        export class Release extends SimpleEventControl {
            /**
             * The event name.
             */
            event: string = __release;
        }

        /**
         * A SimpleEventControl for the '$swipe' event.
         */
        export class Swipe extends SimpleEventControl {
            /**
             * The event name.
             */
            event: string = __swipe;
        }

        /**
         * A SimpleEventControl for the '$swipeleft' event.
         */
        export class SwipeLeft extends SimpleEventControl {
            /**
             * The event name.
             */
            event: string = __swipeleft;
        }

        /**
         * A SimpleEventControl for the '$swiperight' event.
         */
        export class SwipeRight extends SimpleEventControl {
            /**
             * The event name.
             */
            event: string = __swiperight;
        }

        /**
         * A SimpleEventControl for the '$swipeup' event.
         */
        export class SwipeUp extends SimpleEventControl {
            /**
             * The event name.
             */
            event: string = __swipeup;
        }

        /**
         * A SimpleEventControl for the '$swipedown' event.
         */
        export class SwipeDown extends SimpleEventControl {
            /**
             * The event name.
             */
            event: string = __swipedown;
        }

        /**
         * A SimpleEventControl for the '$track' event.
         */
        export class Track extends SimpleEventControl {
            /**
             * The event name.
             */
            event: string = __track;
        }

        /**
         * A SimpleEventControl for the '$trackleft' event.
         */
        export class TrackLeft extends SimpleEventControl {
            /**
             * The event name.
             */
            event: string = __trackleft;
        }

        /**
         * A SimpleEventControl for the '$trackright' event.
         */
        export class TrackRight extends SimpleEventControl {
            /**
             * The event name.
             */
            event: string = __trackright;
        }

        /**
         * A SimpleEventControl for the '$trackup' event.
         */
        export class TrackUp extends SimpleEventControl {
            /**
             * The event name.
             */
            event: string = __trackup;
        }

        /**
         * A SimpleEventControl for the '$trackdown' event.
         */
        export class TrackDown extends SimpleEventControl {
            /**
             * The event name.
             */
            event: string = __trackdown;
        }

        /**
         * A SimpleEventControl for the '$trackend' event.
         */
        export class TrackEnd extends SimpleEventControl {
            /**
             * The event name.
             */
            event: string = __trackend;
        }

        /**
         * A SimpleEventControl for the 'submit' event.
         */
        export class Submit extends SimpleEventControl {
            /**
             * The event name.
             */
            event: string = 'submit';

            /**
             * Prevents the default submit action unless 
             * the "action" attribute is present.
             * @param {Event} ev The event object.
             */
            protected _onEvent(ev: Event): void {
                if (!this.element.hasAttribute('action')) {
                    ev.preventDefault();
                }

                super._onEvent(ev);
            }
        }

        /**
         * A SimpleEventControl for the 'input' event. If 
         * 'input' is not an event, it will simulate an 'input' using other events like 'keydown', 
         * 'cut', 'paste', etc. Also fires on the 'change' event.
         */
        export class React extends SimpleEventControl {
            protected static _inject: any = {
                _compat: __Compat
            };

            /**
             * Reference to the Compat injectable.
             */
            protected _compat: Compat;

            /**
             * The event name.
             */
            event: string = 'input';

            /**
             * Adds any and all necessary event listeners.
             */
            protected _addEventListeners(): void {
                var element = this.element,
                    _compat = this._compat,
                    composing = false,
                    input = 'input',
                    timeout: IRemoveListener,
                    eventListener = (ev: Event) => {
                        if (composing) {
                            return;
                        }

                        this._onEvent(ev);
                    },
                    postponedEventListener = (ev: Event) => {
                        if (isFunction(timeout)) {
                            return;
                        }

                        timeout = postpone(() => {
                            eventListener(ev);
                            timeout = null;
                        });
                    };

                if (isUndefined(_compat.ANDROID)) {
                    this.addEventListener(element, 'compositionstart', () => (composing = true), false);
                    this.addEventListener(element, 'compositionend', (ev: Event) => {
                        composing = false;
                        eventListener(ev);
                    }, false);
                }

                this.addEventListener(element, input, eventListener, false);
                this.addEventListener(element, 'change', eventListener, false);

                if (_compat.hasEvent(input)) {
                    return;
                }

                this.addEventListener(element, 'keydown', (ev: KeyboardEvent) => {
                    var key = ev.keyCode,
                        codes = KeyCodes;

                    if (key === codes.lwk ||
                        key === codes.rwk ||
                        (key >= codes.shift && key <= codes.escape) ||
                        (key > codes.space && key <= codes.down)) {
                        return;
                    }

                    postponedEventListener(ev);
                }, false);
                this.addEventListener(element, 'cut', postponedEventListener, false);
                this.addEventListener(element, 'paste', postponedEventListener, false);
            }
        }

        register.control(__Tap, Tap);
        register.control(__Blur, Blur);
        register.control(__Change, Change);
        register.control(__Copy, Copy);
        register.control(__Cut, Cut);
        register.control(__Paste, Paste);
        register.control(__DblTap, DblTap);
        register.control(__Focus, Focus);
        register.control(__Submit, Submit);
        register.control(__TouchStart, TouchStart);
        register.control(__TouchEnd, TouchEnd);
        register.control(__TouchMove, TouchMove);
        register.control(__TouchCancel, TouchCancel);
        register.control(__Hold, Hold);
        register.control(__Release, Release);
        register.control(__Swipe, Swipe);
        register.control(__SwipeLeft, SwipeLeft);
        register.control(__SwipeRight, SwipeRight);
        register.control(__SwipeUp, SwipeUp);
        register.control(__SwipeDown, SwipeDown);
        register.control(__Track, Track);
        register.control(__TrackLeft, TrackLeft);
        register.control(__TrackRight, TrackRight);
        register.control(__TrackUp, TrackUp);
        register.control(__TrackDown, TrackDown);
        register.control(__TrackEnd, TrackEnd);
        register.control(__React, React);

        /**
         * A mapping of all keys to their equivalent keyCode.
         */
        export var KeyCodes = {
            'backspace': 8,
            'tab': 9,
            'enter': 13,
            'shift': 16,
            'ctrl': 17,
            'alt': 18,
            'pause': 19, 'break': 19,
            'caps lock': 20,
            'escape': 27,
            'space': 32,
            'page up': 33,
            'page down': 34,
            'end': 35,
            'home': 36,
            'left': 37, 'left arrow': 37,
            'up': 38, 'up arrow': 38,
            'right': 39, 'right arrow': 39,
            'down': 40, 'down arrow': 40,
            'insert': 45,
            'delete': 46,
            '0': 48, 'zero': 48,
            ')': 48, 'right parenthesis': 48,
            '1': 49, 'one': 49,
            '!': 49, 'exclamation': 49, 'exclamation point': 49,
            '2': 50, 'two': 50,
            '@': 50, 'at': 50,
            '3': 51, 'three': 51,
            '#': 51, 'number sign': 51,
            'hash': 51, 'pound': 51,
            '4': 52, 'four': 52,
            '$': 52, 'dollar': 52, 'dollar sign': 52,
            '5': 53, 'five': 53,
            '%': 53, 'percent': 53, 'percent sign': 53,
            '6': 54, 'six': 54,
            '^': 54, 'caret': 54,
            '7': 55, 'seven': 55,
            '&': 55, 'ampersand': 55,
            '8': 56, 'eight': 56,
            '*': 56, 'asterisk': 56,
            '9': 57, 'nine': 57,
            '(': 57, 'left parenthesis': 57,
            'a': 65, 'b': 66, 'c': 67, 'd': 68, 'e': 69,
            'f': 70, 'g': 71, 'h': 72, 'i': 73, 'j': 74,
            'k': 75, 'l': 76, 'm': 77, 'n': 78, 'o': 79,
            'p': 80, 'q': 81, 'r': 82, 's': 83, 't': 84,
            'u': 85, 'v': 86, 'w': 87, 'x': 88, 'y': 89,
            'z': 90,
            'lwk': 91, 'left window key': 91,
            'rwk': 92, 'right window key': 92,
            'select': 93, 'select key': 93,
            'numpad 0': 96,
            'numpad 1': 97,
            'numpad 2': 98,
            'numpad 3': 99,
            'numpad 4': 100,
            'numpad 5': 101,
            'numpad 6': 102,
            'numpad 7': 103,
            'numpad 8': 104,
            'numpad 9': 105,
            'multiply': 106,
            'add': 107,
            'subtract': 109,
            'decimal point': 110,
            'divide': 111,
            'f1': 112, 'f2': 113, 'f3': 114, 'f4': 115,
            'f5': 116, 'f6': 117, 'f7': 118, 'f8': 119,
            'f9': 120, 'f10': 121, 'f11': 122, 'f12': 123,
            'num lock': 144,
            'scroll lock': 145,
            ';': 186, 'semi-colon': 186,
            ':': 186, 'colon': 186,
            '=': 187, 'equal': 187, 'equal sign': 187,
            '+': 187, 'plus': 187,
            ',': 188, 'comma': 188,
            '<': 188, 'lt': 188, 'less than': 188,
            'left angle bracket': 188,
            '-': 189, 'dash': 189,
            '_': 189, 'underscore': 189,
            '.': 190, 'period': 190,
            '>': 190, 'gt': 190, 'greater than': 190,
            'right angle bracket': 190,
            '/': 191, 'forward slash': 191,
            '?': 191, 'question mark': 191,
            '`': 192, 'grave accent': 192,
            '~': 192, 'tilde': 192,
            '[': 219, 'open bracket': 219,
            '{': 219, 'open brace': 219,
            '\\': 220, 'back slash': 220,
            '|': 220, 'pipe': 220,
            ']': 221, 'close bracket': 221,
            '}': 221, 'close brace': 221,
            '\'': 222, 'single quote': 222,
            '"': 222, 'double quote': 222
        };

        /**
         * Base class used for filtering keys on KeyboardEvents.
         */
        export class KeyCodeEventControl extends SimpleEventControl implements IKeyCodeEventControl {
            protected static _inject: any = {
                _regex: __Regex
            };

            /**
             * Reference to the Regex injectable.
             */
            protected _regex: plat.expressions.Regex;

            /**
             * Holds the key mappings to filter for in a KeyboardEvent.
             */
            keyCodes: IObject<{ shifted: boolean; }>;

            /**
             * Checks if the IKeyboardEventInput is an expression object 
             * and sets the necessary listener.
             */
            protected _setListener(): void {
                var attr = this.attribute;
                if (isEmpty(this.event) || isEmpty(attr)) {
                    return;
                }

                var expression = this.attributes[attr].trim();

                if (expression[0] === '{') {
                    var eventObject: IKeyboardEventInput = this.evaluateExpression(expression) ||
                        { method: '', key: null },
                        key = eventObject.key,
                        keys = eventObject.keys;

                    this._parseArgs(eventObject.method);

                    if (isNull(key) && isNull(keys)) {
                        this.attributes[attr] = eventObject.method;

                        this._setKeyCodes();
                        super._setListener();
                        return;
                    }

                    keys = isArray(keys) ? keys : [key];
                    this._setKeyCodes(keys);
                    this.addEventListener(this.element, this.event, this._onEvent, false);

                    return;
                }

                this._setKeyCodes();
                super._setListener();
            }

            /**
             * Matches the event's keyCode if necessary and then handles the event if 
             * a match is found or if there are no filter keyCodes.
             * @param {KeyboardEvent} ev The keyboard event object.
             */
            protected _onEvent(ev: KeyboardEvent): void {
                var keyCodes = this.keyCodes,
                    code: { shifted?: boolean };

                if (isEmpty(keyCodes)) {
                    super._onEvent(ev);
                } else if (!isUndefined(keyCodes[ev.keyCode])) {
                    code = keyCodes[ev.keyCode];

                    if (!code.shifted || ev.shiftKey) {
                        super._onEvent(ev);
                    }
                }
            }

            /**
             * Sets the defined key codes as they correspond to 
             * the KeyCodes map.
             * @param {Array<string>} keys? The array of defined keys to satisfy the 
             * key press condition.
             */
            protected _setKeyCodes(keys?: Array<string>): void {
                if (!isArray(keys)) {
                    keys = [];
                }

                var length = keys.length,
                    key: string,
                    keyCodes = this.keyCodes,
                    index: string,
                    shifted = this._regex.shiftedKeyRegex;

                if (!isObject(keyCodes)) {
                    keyCodes = this.keyCodes = {};
                }

                for (var i = 0; i < length; ++i) {
                    key = keys[i];
                    index = isNumber(key) ? key : (<any>KeyCodes)[key.toLowerCase()];

                    keyCodes[index] = { shifted: shifted.test(key) };
                }
            }
        }

        /**
         * An attribute object that binds to specified key code scenarios.
         */
        export interface IKeyCodeEventControl extends ISendEvents {
            /**
             * Holds the key mappings to filter for in a KeyboardEvent.
             */
            keyCodes: IObject<{ shifted: boolean; }>;
        }

        /**
         * The available options for KeyCodeEventControl.
         */
        export interface IKeyboardEventInput {
            /**
             * The method to call when the condition is satisfied.
             */
            method: string;

            /**
             * The key to satisfy the press condition. Can be specified either as a numeric key code 
             * or a string representation as seen by the KeyCodes mapping.
             */
            key?: string;

            /**
             * An optional array of keys if more than one key can satisfy the condition.
             */
            keys?: Array<string>;
        }

        /**
         * Used for filtering keys on keydown events.
         */
        export class KeyDown extends KeyCodeEventControl {
            /**
             * The event name.
             */
            event: string = 'keydown';

            /**
             * The a method to remove the currently postponed event.
             */
            cancelEvent: IRemoveListener = noop;

            /**
             * Delays execution of the event
             * @param {KeyboardEvent} ev The KeyboardEvent object.
             */
            protected _onEvent(ev: KeyboardEvent): void {
                var keyCode = ev.keyCode;

                if ((keyCode >= 48 && keyCode <= 90) ||
                    (keyCode >= 186) ||
                    (keyCode >= 96 && keyCode <= 111)) {
                    this.cancelEvent = postpone(() => {
                        super._onEvent(ev);
                    });
                }
            }

            /**
             * Calls to cancel an event if it is in progress.
             */
            dispose() {
                this.cancelEvent();

                this.cancelEvent = null;
            }
        }

        /**
         * Used for filtering only printing keys (a-z, A-Z, 0-9, and special characters) on keydown events.
         */
        export class KeyPress extends KeyCodeEventControl {
            /**
             * The event name.
             */
            event: string = 'keydown';

            /**
             * The a method to remove the currently postponed event.
             */
            cancelEvent: IRemoveListener = noop;

            /**
             * Filters only 'printing keys' (a-z, A-Z, 0-9, and special characters)
             * @param {KeyboardEvent} ev The KeyboardEvent object.
             */
            _onEvent(ev: KeyboardEvent): void {
                var keyCode = ev.keyCode;

                if ((keyCode >= 48 && keyCode <= 90) ||
                    (keyCode >= 186) ||
                    (keyCode >= 96 && keyCode <= 111)) {
                    this.cancelEvent = postpone(() => {
                        super._onEvent(ev);
                    });
                }
            }

            /**
             * Calls to cancel an event if it is in progress.
             */
            dispose() {
                this.cancelEvent();

                this.cancelEvent = null;
            }
        }

        /**
         * Used for filtering keys on keyup events.
         */
        export class KeyUp extends KeyCodeEventControl {
            /**
             * The event name.
             */
            event: string = 'keyup';
        }

        register.control(__KeyDown, KeyDown);
        register.control(__KeyPress, KeyPress);
        register.control(__KeyUp, KeyUp);

        /**
         * An AttributeControl that deals with binding to a specified property on its element.
         */
        export class SetAttributeControl extends AttributeControl implements ISetAttributeControl {
            /**
             * The property to set on the associated element.
             */
            property: string = '';

            /**
             * The camel-cased name of the control as it appears as an attribute.
             */
            attribute: string;

            /**
             * The function to stop listening for attribute changes.
             */
            private __removeListener: IRemoveListener;

            /**
             * Sets the corresponding attribute {property} value and 
             * observes the attribute for changes.
             */
            loaded(): void {
                if (isNull(this.element)) {
                    return;
                }

                this.attribute = camelCase(this.type);
                this.setter();
                this.__removeListener = this.attributes.observe(this.attribute, this.setter);
            }

            /**
             * Resets the corresponding attribute property value upon 
             * a change of context.
             */
            contextChanged(): void {
                if (isNull(this.element)) {
                    return;
                }

                this.setter();
            }

            /**
             * Stops listening to attribute changes.
             */
            dispose(): void {
                if (isFunction(this.__removeListener)) {
                    this.__removeListener();
                    this.__removeListener = null;
                }
            }

            /**
             * The function for setting the corresponding 
             * attribute property value.
             */
            setter(): void {
                postpone(() => {
                    var element = this.element,
                        property = this.property;

                    if (!isNode(element)) {
                        return;
                    }

                    switch (this.attributes[this.attribute]) {
                        case 'false':
                        case '0':
                        case 'null':
                        case '':
                            element.setAttribute(property, '');
                            (<any>element)[property] = false;
                            element.removeAttribute(property);
                            break;
                        default:
                            element.setAttribute(property, property);
                            (<any>element)[property] = true;
                    }
                });
            }
        }

        /**
         * An AttributeControl that deals with binding to a specified property on its element.
         */
        export interface ISetAttributeControl extends AttributeControl {
            /**
             * The property to set on the associated template control.
             */
            property: string;

            /**
             * The camel-cased name of the control as it appears as an attribute.
             */
            attribute: string;

            /**
             * The function for setting the corresponding 
             * attribute property value.
             */
            setter(): void;
        }

        /**
         * A SetAttributeControl for the 'checked' attribute.
         */
        export class Checked extends SetAttributeControl {
            /**
             * The property to set on the associated template control.
             */
            property: string = 'checked';
        }

        /**
         * A SetAttributeControl for the 'disabled' attribute.
         */
        export class Disabled extends SetAttributeControl {
            /**
             * The property to set on the associated template control.
             */
            property: string = 'disabled';
        }

        /**
         * A SetAttributeControl for the 'selected' attribute.
         */
        export class Selected extends SetAttributeControl {
            /**
             * The property to set on the associated template control.
             */
            property: string = 'selected';
        }

        /**
         * A SetAttributeControl for the 'readonly' attribute.
         */
        export class ReadOnly extends SetAttributeControl {
            /**
             * The property to set on the associated template control.
             */
            property: string = 'readonly';
        }

        /**
         * A SetAttributeControl for the 'plat-hide' attribute.
         */
        export class Visible extends SetAttributeControl {
            /**
             * The property to set on the associated element.
             */
            property: string = 'display';

            /**
             * The value to associate with the property.
             */
            value: string = 'none';

            /**
             * The importance to set on the property.
             */
            importance: string = 'important';

            /**
             * The initial value of the property to be set.
             */
            protected _initialValue = '';

            /**
             * Hides the element.
             */
            initialize(): void {
                var style: CSSStyleDeclaration = this.element.style || <any>{ getPropertyValue: noop },
                    initialValue = style.getPropertyValue(this.property);

                this._setValue(this.value, this.importance);

                if (isEmpty(initialValue) || initialValue === 'none') {
                    return;
                }

                this._initialValue = initialValue;
            }

            /**
             * Hides or shows the element depending upon the attribute value
             */
            setter(): void {
                postpone(() => {
                    if (!isNode(this.element)) {
                        return;
                    }

                    switch (this.attributes[this.attribute]) {
                        case 'false':
                        case '0':
                        case 'null':
                        case '':
                            this._setValue(this.value, this.importance);
                            break;
                        default:
                            this._setValue(this._initialValue);
                            break;
                    }
                });
            }

            /**
             * Sets the value of the property element with the given importance. If the 
             * value is null or empty string, the property will be removed.
             * @param {string} value The value to set.
             * @param {string} importance? The priority or importance level to set.
             */
            protected _setValue(value: string, importance?: string): void {
                var property = this.property,
                    style: CSSStyleDeclaration = this.element.style || <any>{
                        setProperty: noop,
                        removeProperty: noop,
                        getPropertyValue: noop,
                        getPropertyPriority: noop
                    },
                    currentVal = style.getPropertyValue(property),
                    currentPriority = style.getPropertyPriority(property);

                if (value === currentVal && importance === currentPriority) {
                    return;
                } else if (isEmpty(value)) {
                    style.removeProperty(property);
                    return;
                }

                style.setProperty(property, value, importance);
            }
        }

        /**
         * A SetAttributeControl for the 'style' attribute.
         */
        export class Style extends SetAttributeControl {
            /**
             * Sets the evaluated styles on the element.
             */
            setter(): void {
                var expression: string = this.attributes[this.attribute];

                if (isEmpty(expression)) {
                    return;
                }

                var attributes = expression.split(';'),
                    elementStyle = this.element.style || {},
                    length = attributes.length,
                    splitStyles: Array<string>,
                    styleType: string,
                    styleValue: string;

                for (var i = 0; i < length; ++i) {
                    splitStyles = attributes[i].split(':');

                    if (splitStyles.length < 2) {
                        continue;
                    } else if (splitStyles.length > 2) {
                        splitStyles = [splitStyles.shift(), splitStyles.join(':')];
                    }

                    styleType = camelCase(splitStyles[0].trim());
                    styleValue = splitStyles[1].trim();

                    if (!isUndefined((<any>elementStyle)[styleType])) {
                        (<any>elementStyle)[styleType] = styleValue;
                    }
                }
            }
        }

        register.control(__Checked, Checked);
        register.control(__Disabled, Disabled);
        register.control(__Selected, Selected);
        register.control(__ReadOnly, ReadOnly);
        register.control(__Visible, Visible);
        register.control(__Style, Style);

        /**
         * Base class used for setting the property of an element (e.g. href for anchor elements).
         */
        export class ElementPropertyControl extends SetAttributeControl {
            /**
             * The function for setting the corresponding 
             * attribute property value to the evaluated expression.
             */
            setter(): void {
                var element = this.element,
                    elementProperty = this.property,
                    expression = this.attributes[this.attribute];

                if (isEmpty(expression) || isNull(element)) {
                    return;
                }

                if (!isUndefined((<any>element)[elementProperty])) {
                    (<any>element)[elementProperty] = expression;
                }
            }
        }

        /**
         * A type of ElementPropertyControl used to set 'href' on an anchor tag.
         */
        export class Href extends ElementPropertyControl {
            /**
             * Used to set the element's href property.
             */
            property: string = 'href';

            /**
             * The TemplateControl for a plat-href is an Link control.
             */
            templateControl: ui.controls.Link;

            /**
             * Sets the href property, then calls the Link control to 
             * normalize the href.
             */
            setter() {
                super.setter();

                var templateControl: ui.controls.Link = this.templateControl;

                if (isObject(templateControl) && isFunction(templateControl.setHref)) {
                    templateControl.setHref();
                }
            }
        }

        /**
         * A type of ElementPropertyControl used to set 'src' on an anchor tag.
         */
        export class Src extends ElementPropertyControl {
            protected static _inject: any = {
                _browser: __Browser
            };

            /**
             * Used to set the element's src property.
             */
            property: string = 'src';

            /**
             * The plat.web.Browser injectable instance
             */
            protected _browser: web.Browser;

            /**
             * The function for setting the corresponding 
             * attribute property value to the evaluated expression.
             */
            setter() {
                var element = this.element,
                    elementProperty = this.property,
                    expression = this.attributes[this.attribute];

                if (isEmpty(expression) || isNull(element)) {
                    return;
                }

                if (!isUndefined((<any>element)[elementProperty])) {
                    (<any>element)[elementProperty] = this._browser.urlUtils(expression);
                }
            }
        }

        register.control(__Href, Href);
        register.control(__Src, Src);

        /**
         * Facilitates two-way databinding for HTMLInputElements, HTMLSelectElements, and HTMLTextAreaElements.
         */
        export class Bind extends AttributeControl {
            protected static _inject: any = {
                _parser: __Parser,
                _ContextManager: __ContextManagerStatic,
                _compat: __Compat,
                _document: __Document
            };

            /**
             * Reference to the Parser injectable.
             */
            protected _parser: expressions.Parser;

            /**
             * Reference to the IContextManagerStatic injectable.
             */
            protected _ContextManager: observable.IContextManagerStatic;

            /**
             * Reference to the Compat injectable.
             */
            protected _compat: Compat;

            /**
             * Reference to the Document injectable.
             */
            protected _document: Document;

            /**
             * The priority of Bind is set high to precede 
             * other controls that may be listening to the same 
             * event.
             */
            priority: number = 100;

            /**
             * The function used to add the proper event based on the input type.
             */
            protected _addEventType: () => void;

            /**
             * The function used to get the bound value.
             */
            protected _getter: () => any;

            /**
             * The function used to set the bound value.
             */
            protected _setter: (newValue: any, oldValue?: any, firstTime?: boolean) => void;

            /**
             * The expression to evaluate as the bound value.
             */
            protected _expression: expressions.IParsedExpression;

            /**
             * The IParsedExpression used to evaluate the context 
             * of the bound property.
             */
            protected _contextExpression: expressions.IParsedExpression;

            /**
             * The bound property name.
             */
            protected _property: string;

            /**
             * Whether or not the File API is supported.
             */
            private __fileSupported = (<Compat>acquire(__Compat)).fileSupported;

            /**
             * Used to grab a filename from input[type="file"].
             */
            private __fileNameRegex = (<expressions.Regex>acquire(__Regex)).fileNameRegex;

            /**
             * Used to denote that a property change happened from within this control.
             */
            private __isSelf = false;

            /**
             * Determines the type of Element being bound to 
             * and sets the necessary handlers.
             */
            initialize(): void {
                this._determineType();
            }

            /**
             * Parses and watches the expression being bound to.
             */
            loaded(): void {
                var parent = this.parent;
                if (isNull(parent) || isNull(this.element)) {
                    return;
                }

                var attr = camelCase(this.type),
                    _parser = this._parser,
                    expression = this._expression = _parser.parse(this.attributes[attr]);

                var identifiers = expression.identifiers;

                if (identifiers.length !== 1) {
                    var _Exception: IExceptionStatic = this._Exception;
                    _Exception.warn('Only 1 identifier allowed in a plat-bind expression', _Exception.BIND);
                    this._contextExpression = null;
                    return;
                }

                var split = identifiers[0].split('.');

                this._property = split.pop();

                if (split.length > 0) {
                    this._contextExpression = _parser.parse(split.join('.'));
                } else if (expression.aliases.length > 0) {
                    var alias = expression.aliases[0],
                        resourceObj = parent.findResource(alias);

                    if (isNull(resourceObj) || resourceObj.resource.type !== __OBSERVABLE_RESOURCE) {
                        return;
                    }

                    this._property = 'value';

                    this._contextExpression = {
                        evaluate: () => {
                            return resourceObj.resource;
                        },
                        aliases: [],
                        identifiers: [],
                        expression: ''
                    };
                } else {
                    this._contextExpression = {
                        evaluate: () => {
                            return parent.context;
                        },
                        aliases: [],
                        identifiers: [],
                        expression: ''
                    };
                }

                this._watchExpression();

                if (isNull(this._addEventType)) {
                    return;
                }

                this._addEventType();
            }

            /**
             * Re-observes the expression with the new context.
             */
            contextChanged(): void {
                this._watchExpression();
            }

            /**
             * Removes all of the element's event listeners.
             */
            dispose(): void {
                this._addEventType = null;
            }

            /**
             * Adds a text event as the event listener. 
             * Used for textarea and input[type=text].
             */
            protected _addTextEventListener(): void {
                var element = this.element,
                    _compat = this._compat,
                    composing = false,
                    input = 'input',
                    timeout: IRemoveListener,
                    eventListener = () => {
                        if (composing) {
                            return;
                        }

                        this._propertyChanged();
                    },
                    postponedEventListener = () => {
                        if (isFunction(timeout)) {
                            return;
                        }

                        timeout = postpone(() => {
                            eventListener();
                            timeout = null;
                        });
                    };

                if (isUndefined(_compat.ANDROID)) {
                    this.addEventListener(element, 'compositionstart', () => (composing = true), false);
                    this.addEventListener(element, 'compositionend', () => {
                        composing = false;
                        eventListener();
                    }, false);
                }

                if (_compat.hasEvent(input)) {
                    this.addEventListener(element, input, eventListener, false);
                } else {
                    this.addEventListener(element, 'keydown', (ev: KeyboardEvent) => {
                        var key = ev.keyCode,
                            codes = KeyCodes;

                        if (key === codes.lwk ||
                            key === codes.rwk ||
                            (key >= codes.shift && key <= codes.escape) ||
                            (key > codes.space && key <= codes.down)) {
                            return;
                        }

                        postponedEventListener();
                    }, false);
                    this.addEventListener(element, 'cut', postponedEventListener, false);
                    this.addEventListener(element, 'paste', postponedEventListener, false);
                }

                this.addEventListener(element, 'change', eventListener, false);
            }

            /**
             * Adds a change event as the event listener. 
             * Used for select, input[type=radio], and input[type=range].
             */
            protected _addChangeEventListener(): void {
                this.addEventListener(this.element, 'change', this._propertyChanged, false);
            }

            /**
             * Adds a $tap event as the event listener. 
             * Used for input[type=button] and button.
             */
            protected _addButtonEventListener(): void {
                this.addEventListener(this.element, __tap, this._propertyChanged, false);
            }

            /**
             * Getter for input[type=checkbox] and input[type=radio]
             */
            protected _getChecked(): boolean {
                return (<HTMLInputElement>this.element).checked;
            }

            /**
             * Getter for input[type=text], input[type=range], 
             * textarea, and select.
             */
            protected _getValue(): string {
                return (<HTMLInputElement>this.element).value;
            }

            /**
             * Getter for button.
             */
            protected _getTextContent(): string {
                return (<HTMLInputElement>this.element).textContent;
            }

            /**
             * Getter for input[type="file"]. Creates a partial IFile 
             * element if file is not supported.
             */
            protected _getFile(): IFile {
                var element = <HTMLInputElement>this.element,
                    value = element.value;

                if (this.__fileSupported && element.files.length > 0) {
                    return <IFile>element.files[0];
                }

                return {
                    name: value.replace(this.__fileNameRegex, ''),
                    path: value,
                    lastModifiedDate: undefined,
                    type: undefined,
                    size: undefined,
                    msDetachStream: noop,
                    msClose: noop,
                    slice: () => <Blob>{ }
                };
            }

            /**
             * Getter for input[type="file"]-multiple
             */
            protected _getFiles(): Array<IFile> {
                var element = <HTMLInputElement>this.element;

                if (this.__fileSupported) {
                    return Array.prototype.slice.call(element.files);
                }

                // this case should never be hit since ie9 does not support multi-file uploads, 
                // but kept in here for now for consistency's sake
                var filelist = element.value.split(/,|;/g),
                    length = filelist.length,
                    files: Array<IFile> = [],
                    fileValue: string;

                for (var i = 0; i < length; ++i) {
                    fileValue = filelist[i];
                    files.push({
                        name: fileValue.replace(this.__fileNameRegex, ''),
                        path: fileValue,
                        lastModifiedDate: undefined,
                        type: undefined,
                        size: undefined,
                        msDetachStream: noop,
                        msClose: noop,
                        slice: () => <Blob>{}
                    });
                }

                return files;
            }

            /**
             * Getter for select-multiple
             */
            protected _getSelectedValues(): Array<string> {
                var options = (<HTMLSelectElement>this.element).options,
                    length = options.length,
                    option: HTMLOptionElement,
                    selectedValues: Array<string> = [];

                for (var i = 0; i < length; ++i) {
                    option = options[i];
                    if (option.selected) {
                        selectedValues.push(option.value);
                    }
                }

                return selectedValues;
            }

            /**
             * Setter for textarea, input[type=text], 
             * and input[type=button], and select
             * @param {any} newValue The new value to set
             * @param {any} oldValue? The previously bound value
             * @param {boolean} firstTime? The context is being evaluated for the first time and 
             * should thus change the property if null
             */
            protected _setText(newValue: any, oldValue?: any, firstTime?: boolean): void {
                if (this.__isSelf) {
                    return;
                }

                if (isNull(newValue)) {
                    newValue = '';

                    if (firstTime === true) {
                        if (isNull((<HTMLInputElement>this.element).value)) {
                            this._setValue(newValue);
                        }
                        this._propertyChanged();
                        return;
                    }
                }

                this._setValue(newValue);
            }

            /**
             * Setter for input[type=range]
             * @param {any} newValue The new value to set
             * @param {any} oldValue? The previously bound value
             * @param {boolean} firstTime? The context is being evaluated for the first time and 
             * should thus change the property if null
             */
            protected _setRange(newValue: any, oldValue?: any, firstTime?: boolean): void {
                if (this.__isSelf) {
                    return;
                }

                if (isEmpty(newValue)) {
                    newValue = 0;

                    if (firstTime === true) {
                        if (isEmpty((<HTMLInputElement>this.element).value)) {
                            this._setValue(newValue);
                        }
                        this._propertyChanged();
                        return;
                    }
                }

                this._setValue(newValue);
            }

            /**
             * Setter for input[type=checkbox]
             * @param {any} newValue The new value to set
             * @param {any} oldValue? The previously bound value
             * @param {boolean} firstTime? The context is being evaluated for the first time and 
             * should thus change the property if null
             */
            protected _setChecked(newValue: any, oldValue?: any, firstTime?: boolean): void {
                if (this.__isSelf) {
                    return;
                } else if (!isBoolean(newValue)) {
                    if (firstTime === true) {
                        this._propertyChanged();
                        return;
                    }
                    newValue = !!newValue;
                }

                (<HTMLInputElement>this.element).checked = newValue;
            }

            /**
             * Setter for input[type=radio]
             * @param {any} newValue The new value to set
             */
            protected _setRadio(newValue: any): void {
                var element = (<HTMLInputElement>this.element);
                if (this.__isSelf) {
                    return;
                } else if (isNull(newValue) && element.checked) {
                    this._propertyChanged();
                    return;
                }

                element.checked = (element.value === newValue);
            }

            /**
             * Setter for select
             * @param {any} newValue The new value to set
             * @param {any} oldValue? The previously bound value
             * @param {boolean} firstTime? The context is being evaluated for the first time and 
             * should thus change the property if null
             */
            protected _setSelectedIndex(newValue: any, oldValue?: any, firstTime?: boolean): void {
                if (this.__isSelf) {
                    return;
                } else if (firstTime === true && this._checkAsynchronousSelect()) {
                    if (isNull(newValue)) {
                        this._propertyChanged();
                    }
                    return;
                }

                var element = <HTMLSelectElement>this.element,
                    value = element.value;
                if (isNull(newValue)) {
                    if (firstTime === true || !this._document.body.contains(element)) {
                        this._propertyChanged();
                        return;
                    }
                    element.selectedIndex = -1;
                    return;
                } else if (!isString(newValue)) {
                    var _Exception: IExceptionStatic = this._Exception,
                        message: string;
                    if (isNumber(newValue)) {
                        newValue = newValue.toString();
                        message = 'Trying to bind a value of type number to a select element. ' +
                            'The value will implicitly be converted to type string.';
                    } else {
                        message = 'Trying to bind a value that is not a string to a select element. ' +
                            'The element\'s selected index will be set to -1.';
                    }

                    _Exception.warn(message, _Exception.BIND);
                } else if (value === newValue) {
                    return;
                } else if (!this._document.body.contains(element)) {
                    element.value = newValue;
                    if (element.value !== newValue) {
                        element.value = value;
                        this._propertyChanged();
                    }
                    return;
                }

                element.value = newValue;
                // check to make sure the user changed to a valid value
                // second boolean argument is an ie fix for inconsistency
                if (element.value !== newValue || element.selectedIndex === -1) {
                    element.selectedIndex = -1;
                }
            }

            /**
             * Setter for select-multiple
             * @param {any} newValue The new value to set
             * @param {any} oldValue? The previously bound value
             * @param {boolean} firstTime? The context is being evaluated for the first time and 
             * should thus change the property if null
             */
            protected _setSelectedIndices(newValue: any, oldValue?: any, firstTime?: boolean): void {
                if (this.__isSelf) {
                    return;
                } else if (firstTime === true && this._checkAsynchronousSelect()) {
                    return;
                }

                var options = (<HTMLSelectElement>this.element).options,
                    length = isNull(options) ? 0 : options.length,
                    option: HTMLOptionElement,
                    nullValue = isNull(newValue);

                if (nullValue || !isArray(newValue)) {
                    if (firstTime === true) {
                        this._propertyChanged();
                    }
                    // unselects the options unless a match is found
                    while (length-- > 0) {
                        option = options[length];
                        if (!nullValue && option.value === '' + newValue) {
                            option.selected = true;
                            return;
                        }

                        option.selected = false;
                    }
                    return;
                }

                var value: any,
                    numberValue: number;

                while (length-- > 0) {
                    option = options[length];
                    value = option.value;
                    numberValue = Number(value);

                    if (newValue.indexOf(value) !== -1 || (isNumber(numberValue) && newValue.indexOf(numberValue) !== -1)) {
                        option.selected = true;
                        continue;
                    }

                    option.selected = false;
                }
            }

            /**
             * Determines the type of Element being bound to 
             * and sets the necessary handlers.
             */
            protected _determineType(): void {
                if (!isNull(this.templateControl) && this._observingBindableProperty()) {
                    return;
                }

                var element = this.element;
                if (isNull(element)) {
                    return;
                }

                switch (element.nodeName.toLowerCase()) {
                    case 'textarea':
                        this._addEventType = this._addTextEventListener;
                        this._getter = this._getValue;
                        this._setter = this._setText;
                        break;
                    case 'input':
                        switch ((<HTMLInputElement>element).type) {
                            case 'button':
                            case 'submit':
                            case 'reset':
                                this._addEventType = this._addButtonEventListener;
                                this._getter = this._getValue;
                                break;
                            case 'checkbox':
                                this._addEventType = this._addChangeEventListener;
                                this._getter = this._getChecked;
                                this._setter = this._setChecked;
                                break;
                            case 'radio':
                                this._initializeRadio();
                                break;
                            case 'range':
                                this._addEventType = this._addChangeEventListener;
                                this._getter = this._getValue;
                                this._setter = this._setRange;
                                break;
                            case 'file':
                                var multi = (<HTMLInputElement>element).multiple;
                                this._addEventType = this._addChangeEventListener;
                                this._getter = multi ? this._getFiles : this._getFile;
                                break;
                            default:
                                this._addEventType = this._addTextEventListener;
                                this._getter = this._getValue;
                                this._setter = this._setText;
                                break;
                        }
                        break;
                    case 'select':
                        this._initializeSelect();
                        break;
                    case 'button':
                        this._addEventType = this._addButtonEventListener;
                        this._getter = this._getTextContent;
                        break;
                }
            }

            /**
             * Observes the expression to bind to.
             */
            protected _watchExpression(): void {
                var contextExpression = this._contextExpression,
                    context = this.evaluateExpression(contextExpression);

                if (!isObject(context)) {
                    if (isNull(context) && contextExpression.identifiers.length > 0) {
                        context = this._ContextManager.createContext(this.parent,
                            contextExpression.identifiers[0]);
                    } else {
                        var Exception: IExceptionStatic = this._Exception;
                        Exception.warn('plat-bind is trying to index into a primitive type. ' +
                            this._contextExpression.expression + ' is already defined and not ' +
                            'an object when trying to evaluate plat-bind="' +
                            this._expression.expression + '"', Exception.BIND);
                    }
                }

                var property: string;
                if (!isFunction(this._setter)) {
                    return;
                } else if (this._setter === this._setSelectedIndices) {
                    property = this._property;
                    if (isNull(context[property])) {
                        context[property] = [];
                    }
                    this.observeArray(context, property, null, (arrayInfo: observable.IPostArrayChangeInfo<string>) => {
                        this._setter(arrayInfo.newArray, arrayInfo.oldArray, true);
                    });
                }

                var expression = this._expression;

                this.observeExpression(expression, this._setter);
                this._setter(this.evaluateExpression(expression), undefined, true);
            }

            /**
             * Sets the context property being bound to when the 
             * element's property is changed.
             */
            protected _propertyChanged(): void {
                if (isNull(this._contextExpression)) {
                    return;
                }

                var context = this.evaluateExpression(this._contextExpression),
                    property = this._property;

                var newValue = this._getter();

                if (isNull(context) || context[property] === newValue) {
                    return;
                }

                // set flag to let setter functions know we changed the property
                this.__isSelf = true;
                context[property] = newValue;
                this.__isSelf = false;
            }

            /**
             * Normalizes input[type="radio"] for cross-browser compatibility.
             */
            protected _initializeRadio(): void {
                var element = this.element;

                this._addEventType = this._addChangeEventListener;
                this._getter = this._getValue;
                this._setter = this._setRadio;

                if (!element.hasAttribute('name')) {
                    var attr = camelCase(this.type),
                        expression = this.attributes[attr];

                    element.setAttribute('name', expression);
                }

                if (element.hasAttribute('value')) {
                    return;
                }

                element.setAttribute('value', '');
            }

            /**
             * Normalizes HTMLSelectElements for cross-browser compatibility.
             */
            protected _initializeSelect(): void {
                var element = <HTMLSelectElement>this.element,
                    multiple = element.multiple,
                    options = element.options,
                    length = options.length,
                    option: HTMLSelectElement;

                this._addEventType = this._addChangeEventListener;
                if (multiple) {
                    this._getter = this._getSelectedValues;
                    this._setter = this._setSelectedIndices;
                } else {
                    this._getter = this._getValue;
                    this._setter = this._setSelectedIndex;
                }

                for (var i = 0; i < length; ++i) {
                    option = options[i];
                    if (!option.hasAttribute('value')) {
                        option.setAttribute('value', option.textContent);
                    }
                }
            }

            /**
             * Checks to see if a Select or ForEach is loading items.
             */
            protected _checkAsynchronousSelect(): boolean {
                var select = <ui.controls.Select>this.templateControl;
                if (!isNull(select) && (select.type === __Select || select.type === __ForEach) && isPromise(select.itemsLoaded)) {
                    var split = select.absoluteContextPath.split('.'),
                        key = split.pop();

                    this.observeArray(this._ContextManager.getContext(this.parent, split), key, null,
                        (ev: observable.IPostArrayChangeInfo<any>) => {
                            select.itemsLoaded.then(() => {
                                this._setter(this.evaluateExpression(this._expression));
                            });
                        });

                    select.itemsLoaded.then(() => {
                        this._setter(this.evaluateExpression(this._expression));
                    });

                    return true;
                }

                return false;
            }

            /**
             * Checks if the associated TemplateControl is a 
             * BindablePropertyControl and 
             * initializes all listeners accordingly.
             * is an BindablePropertyControl
             */
            protected _observingBindableProperty(): boolean {
                var templateControl = <ui.BindablePropertyControl>this.templateControl;

                if (isFunction(templateControl.observeProperty) &&
                    isFunction(templateControl.setProperty)) {
                    templateControl.observeProperty((newValue: any) => {
                        this._getter = () => newValue;
                        this._propertyChanged();
                    });

                    this._setter = this._setBindableProperty;
                    return true;
                }

                return false;
            }

            /**
             * Sets the value on a BindablePropertyControl.
             * @param {any} newValue The new value to set
             * @param {any} oldValue? The previously bound value
             * @param {boolean} firstTime? The context is being evaluated for the first time and 
             * should thus change the property if null
             */
            protected _setBindableProperty(newValue: any, oldValue?: any, firstTime?: boolean): void {
                if (this.__isSelf || newValue === oldValue) {
                    return;
                }

                (<ui.BindablePropertyControl>this.templateControl).setProperty(newValue, oldValue, firstTime);
            }

            /**
             * Sets the value on an element.
             * @param {any} newValue The new value to set
             */
            protected _setValue(newValue: any): void {
                var element = <HTMLInputElement>this.element;
                if (element.value === newValue) {
                    return;
                }

                element.value = newValue;
            }
        }

        register.control(__Bind, Bind);

        /**
         * A file interface for browsers that do not support the 
         * File API.
         */
        export interface IFile extends File {
            /**
             * An absolute path to the file. The property is not added to 
             * File types.
             */
            path?: string;
        }

        /**
         * An AttributeControl that deals with observing changes for a specified property.
         */
        export class ObservableAttributeControl extends AttributeControl implements IObservableAttributeControl {
            protected static _inject: any = {
                _ContextManager: __ContextManagerStatic
            };

            /**
             * Reference to the IContextManagerStatic injectable.
             */
            protected _ContextManager: observable.IContextManagerStatic;

            /**
             * The property to set on the associated template control.
             */
            property: string = '';

            /**
             * The camel-cased name of the control as it appears as an attribute.
             */
            attribute: string;

            /**
             * This control needs to load before its templateControl
             */
            priority = 200;

            /**
             * The set of functions added by the Template Control that listens 
             * for property changes.
             */
            protected _listeners: Array<(newValue: any, oldValue?: any) => void> = [];

            /**
             * The function to stop listening for property changes.
             */
            protected _removeListener: IRemoveListener;

            /**
             * The _addListener function bound to this control.
             */
            protected _boundAddListener = this._addListener.bind(this);

            /**
             * Sets the initial value of the property on 
             * the Template Control.
             */
            initialize(): void {
                this.attribute = camelCase(this.type);
                this._setProperty(this._getValue());
            }

            /**
             * Observes the property and resets the value.
             */
            loaded(): void {
                this._observeProperty();
                this._setProperty(this._getValue());
            }

            /**
             * Stops listening for changes to the evaluated 
             * expression and removes references to the listeners 
             * defined by the Template Control.
             */
            dispose(): void {
                if (isFunction(this._removeListener)) {
                    this._removeListener();
                }

                this._listeners = [];
            }

            /**
             * Sets the property on the Template Control.
             * @param {any} value The new value of the evaluated expression.
             * @param {any} oldValue? The old value of the evaluated expression.
             */
            protected _setProperty(value: any, oldValue?: any): void {
                var templateControl = this.templateControl;

                if (isNull(templateControl)) {
                    return;
                }

                this._ContextManager.defineGetter(templateControl, this.property, <observable.IObservableProperty<any>>{
                    value: value,
                    observe: this._boundAddListener
                }, true, true);

                this._callListeners(value, oldValue);
            }

            /**
             * Calls the listeners defined by the Template Control.
             * @param {any} value The new value of the evaluated expression.
             * @param {any} oldValue The old value of the evaluated expression.
             */
            protected _callListeners(newValue: any, oldValue: any): void {
                var listeners = this._listeners,
                    length = listeners.length;

                for (var i = 0; i < length; ++i) {
                    listeners[i](newValue, oldValue);
                }
            }

            /**
             * Adds a listener as defined by the Template Control.
             * @param {plat.IPropertyChangedListener} listener The listener added by the Template Control.
             */
            protected _addListener(listener: (newValue: any, oldValue: any) => void): IRemoveListener {
                var listeners = this._listeners;

                listener = listener.bind(this.templateControl);
                listeners.push(listener);

                return () => {
                    var index = listeners.indexOf(listener);
                    if (index === -1) {
                        return;
                    }

                    listeners.splice(index, 1);
                };
            }

            /**
             * Evaluates the attribute's value.
             */
            protected _getValue(): any {
                if (isNull(this.templateControl)) {
                    return;
                }

                return this.evaluateExpression(this.attributes[this.attribute]);
            }

            /**
             * Observes the attribute's value.
             */
            protected _observeProperty(): void {
                if (isNull(this.templateControl)) {
                    return;
                }

                this._removeListener = this.observeExpression(this.attributes[this.attribute], this._setProperty);
            }
        }

        /**
         * An AttributeControl that deals with observing changes for a specified property.
         */
        export interface IObservableAttributeControl extends AttributeControl {
            /**
             * The property to set on the associated template control.
             */
            property: string;

            /**
             * The camel-cased name of the control as it appears as an attribute.
             */
            attribute: string;
        }

        /**
         * An ObservableAttributeControl that sets 'options' as the 
         * associated property.
         */
        export class Options extends ObservableAttributeControl {
            /**
             * The property to set on the associated template control.
             */
            property: string = 'options';
        }

        register.control(__Options, Options);
    }
    /**
     * Class for every app. This class contains hooks for Application Lifecycle Events 
     * as well as error handling.
     */
    export class App {
        /**
         * Reference to the Compat injectable.
         */
        protected static _compat: Compat;

        /**
         * Reference to the IEventManagerStatic injectable.
         */
        protected static _EventManager: events.IEventManagerStatic;

        /**
         * Reference to the Document injectable.
         */
        protected static _document: Document;

        /**
         * Reference to the Compiler injectable.
         */
        protected static _compiler: processing.Compiler;

        /**
         * Reference to the ILifecycleEventStatic injectable.
         */
        protected static _LifecycleEvent: events.ILifecycleEventStatic;

        /**
         * Reference to the IExceptionStatic injectable.
         */
        protected static _Exception: IExceptionStatic;

        /**
         * A static method for initiating the app startup.
         */
        static start(): void {
            if (!App._compat.isCompatible) {
                var _Exception: IExceptionStatic = App._Exception;
                _Exception.fatal('PlatypusTS only supports modern browsers where ' +
                    'Object.defineProperty is defined', _Exception.COMPAT);
                return;
            }

            App.__addPlatCss();

            var _EventManager = App._EventManager;

            _EventManager.dispose(__APP);
            _EventManager.on(__APP, __ready, App.__ready);
            _EventManager.on(__APP, __shutdown, App.__shutdown);
            _EventManager.initialize();
        }

        /**
         * A static method called upon app registration. Primarily used 
         * to initiate a ready state in the case that amd is being used.
         * @param {plat.dependency.Injector<plat.App>} appInjector The injector for 
         * injecting the app instance.
         */
        static registerApp(appInjector: dependency.Injector<App>): void {
            if (!isNull(App.app) && isString(App.app.uid)) {
                App._EventManager.dispose(App.app.uid);
            }

            App.__injector = appInjector;

            if (App._compat.amd) {
                var _LifecycleEvent = App._LifecycleEvent,
                    dispatch = _LifecycleEvent.dispatch;

                postpone(() => {
                    dispatch(__ready, _LifecycleEvent);
                });
            }
        }

        /**
         * Kicks off compilation of the DOM from the specified node. If no node is specified, 
         * the default start node is document.body.
         * @param {Node} node The node at which DOM compilation begins.
         */
        static load(node?: Node): void {
            var _LifecycleEvent = App._LifecycleEvent,
                _compiler = App._compiler,
                body = App._document.body,
                head = App._document.head;

            _LifecycleEvent.dispatch(__beforeLoad, App);

            if (isNull(node)) {
                body.setAttribute(__Hide, '');
                postpone(() => {
                    _compiler.compile(head);
                    _compiler.compile(body);
                    body.removeAttribute(__Hide);
                });
                return;
            }

            if (isFunction((<Element>node).setAttribute)) {
                (<Element>node).setAttribute(__Hide, '');
                postpone(() => {
                    _compiler.compile(node);
                    (<Element>node).removeAttribute(__Hide);
                });
                return;
            }

            _compiler.compile(node);
        }

        /**
         * The instance of the registered IApp.
         */
        static app: App = null;
        
        /**
         * The injector for injecting the instance of the currently registered IApp.
         */
        private static __injector: dependency.Injector<App>;

        /**
         * A static method called when the application is ready. It calls the app instance's 
         * ready function as well as checks for the presence of a module loader. If one exists, 
         * loading the DOM falls back to the app developer. If it doesn't, the DOM is loaded from 
         * document.body.
         * @param {plat.events.LifecycleEvent} ev The LifecycleEvent for the app ready.
         */
        private static __ready(ev: events.LifecycleEvent): void {
            dependency.Injector.initialize();
            App.__registerAppEvents(ev);

            if (!ev.defaultPrevented) {
                App.load();
            }
        }

        /**
         * A static method called when the application wants to programmatically shutdown.
         */
        private static __shutdown(): void {
            var app = (<any>navigator).app,
                _LifecycleEvent = App._LifecycleEvent,
                ev: events.DispatchEvent;

            if (!isNull(app) && isFunction(app.exitApp)) {
                ev = _LifecycleEvent.dispatch(__exiting, App);

                if (ev.defaultPrevented) {
                    return;
                }

                app.exitApp();
            }
        }

        /**
         * A static method called to register all the LifecycleEvents for an app instance.
         */
        private static __registerAppEvents(ev: events.LifecycleEvent): void {
            var appInjector = App.__injector;
            if (isNull(appInjector) || !isFunction(appInjector.inject)) {
                return;
            }

            var app = App.app = appInjector.inject();

            app.on(__suspend, app.suspend);
            app.on(__resume, app.resume);
            app.on(__online, app.online);
            app.on(__offline, app.offline);
            app.on(__error, app.error);
            app.on(__exiting, app.exiting);

            if (isFunction(app.ready)) {
                app.ready(ev);
            }
        }

        /**
         * We need to add [plat-hide] as a css property if platypus.css doesn't exist so we can use it to temporarily 
         * hide elements.
         */
        private static __addPlatCss(): void {
            var _document = App._document;
            if (App._compat.platCss) {
                return;
            } else if (!isNull(_document.styleSheets) && _document.styleSheets.length > 0) {
                (<CSSStyleSheet>_document.styleSheets[0]).insertRule('[plat-hide] { display: none !important; }', 0);
                return;
            }

            var style = <HTMLStyleElement>document.createElement('style');

            style.textContent = '[plat-hide] { display: none !important; }';
            document.head.appendChild(style);
        }

        /**
         * A unique id, created during instantiation.
         */
        uid: string = uniqueId(__Plat);

        /**
         * A Navigator instance, exists when a router is injected into the app.
         */
        navigator: routing.Navigator;

        /**
         * Class for every app. This class contains hooks for Application Lifecycle Management (ALM)
         * as well as error handling and navigation events.
         */
        constructor() {
            var navigator: routing.Navigator = this.navigator = acquire(__NavigatorInstance);
            navigator.initialize((<typeof routing.Router>acquire(__RouterStatic)).currentRouter());
        }

        /**
         * Event fired when the app is suspended.
         * @param {plat.events.LifecycleEvent} ev The LifecycleEvent object.
         */
        suspend(ev: events.LifecycleEvent): void { }

        /**
         * Event fired when the app resumes from the suspended state.
         * @param {plat.events.LifecycleEvent} ev The LifecycleEvent object.
         */
        resume(ev: events.LifecycleEvent): void { }

        /**
         * Event fired when an internal error occures.
         * @param {plat.events.ErrorEvent<Error>} ev The ErrorEvent object.
         */
        error(ev: events.ErrorEvent<Error>): void { }

        /**
         * Event fired when the app is ready.
         * @param {plat.events.LifecycleEvent} ev The LifecycleEvent object.
         */
        ready(ev: events.LifecycleEvent): void { }

        /**
         * Event fired when the app has been programatically shutdown. This event is cancelable.
         * @param {plat.events.LifecycleEvent} ev The LifecycleEvent object.
         */
        exiting(ev: events.LifecycleEvent): void { }

        /**
         * Event fired when the app regains connectivity and is now in an online state.
         * @param {plat.events.LifecycleEvent} ev The LifecycleEvent object.
         */
        online(ev: events.LifecycleEvent): void { }

        /**
         * Event fired when the app loses connectivity and is now in an offline state.
         * @param {plat.events.LifecycleEvent} ev The LifecycleEvent object.
         */
        offline(ev: events.LifecycleEvent): void { }

        /**
         * Creates a new DispatchEvent and propagates it to all 
         * listeners based on the DIRECT method. Propagation 
         * will always start with the sender, so the sender can both produce and consume the same event.
         * @param {string} name The name of the event to send, cooincides with the name used in the
         * app.on() method.
         * @param {Array<any>} ...args Any number of arguments to send to all the listeners.
         */
        dispatchEvent(name: string, ...args: any[]): void {
            var _EventManager: events.IEventManagerStatic = App._EventManager || acquire(__EventManagerStatic);
            _EventManager.dispatch(name, this, _EventManager.DIRECT, args);
        }

        /**
         * Registers a listener for a DispatchEvent. The listener will be called when 
         * a DispatchEvent is propagating over the app. Any number of listeners can exist for a single event name.
         * @param {string} name The name of the event, cooinciding with the DispatchEvent name.
         * @param {(ev: plat.events.DispatchEvent, ...args: Array<any>) => void} listener The method called when 
         * the DispatchEvent is fired.
         */
        on(name: string, listener: (ev: events.DispatchEvent, ...args: any[]) => void): IRemoveListener {
            var _EventManager: events.IEventManagerStatic = App._EventManager || acquire(__EventManagerStatic);
            return _EventManager.on(this.uid, name, listener, this);
        }

        /**
         * Kicks off compilation of the DOM from the specified node. If no node is specified, 
         * the default start node is document.body. This method should be called from the app when 
         * using module loaders. If a module loader is in use, the app will delay loading until 
         * this method is called.
         * @param {Node} node The node where at which DOM compilation begins.
         */
        load(node?: Node): void {
            App.load(node);
        }
    }

    /**
     * The Type for referencing the '_AppStatic' injectable as a dependency.
     */
    export function IAppStatic(
        _compat?: Compat,
        _EventManager?: events.IEventManagerStatic,
        _document?: Document,
        _compiler?: processing.Compiler,
        _LifecycleEvent?: events.ILifecycleEventStatic,
        _Exception?: IExceptionStatic): IAppStatic {
        (<any>App)._compat = _compat;
        (<any>App)._EventManager = _EventManager;
        (<any>App)._document = _document;
        (<any>App)._compiler = _compiler;
        (<any>App)._LifecycleEvent = _LifecycleEvent;
        (<any>App)._Exception = _Exception;
        return App;
    }

    register.injectable(__AppStatic, IAppStatic, [
        __Compat,
        __EventManagerStatic,
        __Document,
        __Compiler,
        __LifecycleEventStatic,
        __ExceptionStatic
    ], __STATIC);

    /**
     * The Type for referencing the '_app' injectable as a dependency.
     */
    export function IApp(_AppStatic?: IAppStatic): App {
        return _AppStatic.app;
    }

    register.injectable(__App, IApp, [__AppStatic], __INSTANCE);

    /**
     * The external interface for the '_AppStatic' injectable.
     */
    export interface IAppStatic {
        /**
         * A static method for initiating the app startup.
         */
        start(): void;

        /**
         * A static methods called upon app registration. Primarily used 
         * to initiate a ready state in the case that amd is being used.
         * @param {plat.dependency.Injector<plat.App>} appInjector The injector for 
         * injecting the app instance.
         */
        registerApp(appInjector: dependency.Injector<App>): void;

        /**
         * Kicks off compilation of the DOM from the specified node. If no node is specified,
         * the default start node is document.body.
         * @param node The node at which DOM compilation begins.
         */
        load(node?: Node): void;

        /**
         * The instance of the registered IApp.
         */
        app: App;
    }

    /**
     * Interface for an object where every key has the same typed value.
     */
    export interface IObject<T> {
        /**
         * Every key must be of type T
         */
        [key: string]: T
    }

    /**
     * Defines a function that will halt further callbacks to a listener.
     * Equivalent to `() => void`.
     */
    export interface IRemoveListener {
        /**
         * The method signature for IRemoveListener.
         */
        (): void;
    }

    /**
     * Defines a function that will be called whenever a property has changed.
     */
    export interface IPropertyChangedListener {
        /**
         * The method signature for IPropertyChangedListener.
         * @param {any} newValue? The new value of the observed property.
         * @param {any} oldValue? The previous value of the observed property.
         */
        (newValue?: any, oldValue?: any): void;
    }
}
/* tslint:enable */
