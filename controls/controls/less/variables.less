/// Common

@primaryColor: #f0862c;
@primaryColorLight: fadeout(@primaryColor, 30%);
@primaryColorPale: fadeout(@primaryColor, 60%);
@secondaryColor: #5381b6;
@secondaryColorLight: fadeout(@secondaryColor, 30%);
@secondaryColorPale: fadeout(@secondaryColor, 60%);
@neutralColor: #5e5753;
@neutralColorLight: fadeout(@neutralColor, 30%);
@neutralColorPale: fadeout(@neutralColor, 60%);
@black: #000000;
@white: #ffffff;
@transparent: transparent;

/// Button
#ButtonVars {
    // set this var to for a custom button text color when active or selected.
    @buttonActiveColor: undefined;
    @buttonBackgroundColor: @transparent;
    @buttonColor: @primaryColor;
    @buttonBorderSize: 1px;
    @buttonBorderColor: @primaryColor;
    @buttonPrimaryBorderRadius: 2px;
    @buttonSecondaryBorderRadius: 0.5em;
    .buttonActiveColor(@property) when (@buttonActiveColor = undefined) {
        & when (@buttonBackgroundColor = @transparent) {
            @{property}: @white;
        }
        & when not (@buttonBackgroundColor = @transparent) {
            @{property}: @buttonBackgroundColor;
        }
    }
    .buttonActiveColor(@property) when (default()) {
        @{property}: @buttonActiveColor;
    }
}

/// Toggle
#ToggleVars {
    // set this var to for a custom border color
    @toggleBorderColor: undefined;
    @knobBorderColor: undefined;
    @toggleBackgroundColor: @neutralColor;
    @toggleColor: @neutralColor;
    @toggleActiveColor: @primaryColor;
    @toggleWidth: 4em;
    // the ratio calculates the toggle height as @toggleWidth * @toggleRatio
    @toggleRatio: 1/3;
    @toggleBorderSize: 1px;
    @toggleActivatedBorderColor: @toggleActiveColor;
    @transitionTime: 250ms;
    @toggleTransitionArgs: background-color @transitionTime, 
        border-bottom-color @transitionTime, border-left-color @transitionTime, 
        border-right-color @transitionTime, border-top-color @transitionTime;
    @knobTransitionArgs: left @transitionTime;
    @knobColor: @white;
    @knobBorderSize: 1px;
    .toggleBorderColor(@property) when (@toggleBorderColor = undefined) {
        & when (@toggleBackgroundColor = @transparent) {
            @{property}: @toggleColor;
        }
        & when not (@toggleBackgroundColor = @transparent) {
            @{property}: @toggleBackgroundColor;
        }
    }
    .toggleBorderColor(@property) when (default()) {
        @{property}: @toggleBorderColor;
    }
    .knobBorderColor(@property) when (@knobBorderColor = undefined) {
        & when (@knobColor = @toggleBackgroundColor) {
            & when (@knobColor = @white) {
                @{property}: @black;
            }
            & when not (@knobColor = @white) {
                @{property}: @white;
            }
        }
        & when not (@knobColor = @toggleBackgroundColor) {
            @{property}: @knobColor;
        }
    }
    .knobBorderColor(@property) when (default()) {
        @{property}: @toggleBorderColor;
    }
}

/// Checkbox
#CheckboxVars {
    // set this var to for a custom secondary checkbox mark color
    @checkboxSecondaryMarkColor: undefined;
    @checkboxBackgroundColor: @transparent;
    @checkboxBorderColor: @black;
    @checkboxActiveBorderColor: @primaryColor;
    @checkboxMarkColor: @checkboxActiveBorderColor;
    @checkboxSize: 1em;
    @checkboxBorderSize: 1px;
    @checkboxMarkThickness: @checkboxBorderSize;
    .secondaryCheckboxMarkColor(@property) when (@checkboxSecondaryMarkColor = undefined) {
        & when (@checkboxBackgroundColor = @transparent) {
            @{property}: @white;
        }
        & when not (@checkboxBackgroundColor = @transparent) {
            @{property}: @checkboxBackgroundColor;
        }
    }
    .secondaryCheckboxMarkColor(@property) when (default()) {
        @{property}: @checkboxSecondaryMarkColor;
    }
}

/// Radio
#RadioVars {
    @radioBackgroundColor: @transparent;
    @radioBorderColor: @black;
    @radioActiveBorderColor: @primaryColor;
    @radioMarkColor: @radioActiveBorderColor;
    @radioMarkPaddingColor: @transparent;
    @radioSize: 1em;
    @radioBorderSize: 1px;
    @radioMarkPadding: 1px;
}

/// Drawer
#DrawerVars {
    @drawerColor: @neutralColor;
    @drawerLength: 80%;
    @drawerTransition: all 300ms;
}

/// Modal
#ModalVars {
    @modalColor: @white;
    @modalBackgroundColor: fadeout(@black, 25%);
    @modalWidth: 50%;
    @modalHeight: 50%;
    @modalLeftTransition: right 500ms;
    @modalRightTransition: left 500ms;
    @modalUpTransition: bottom 500ms;
    @modalDownTransition: top 500ms;
    @modalFadeTransition: opacity 500ms;
}

/// Progress Bar
#ProgressBarVars {
    @barBorderColor: @neutralColor;
    @barColor: @primaryColor;
    @barBackgroundColor: @primaryColorPale;
    @barHeight: 0.25em;
    @barBorder: none;
    @barTransition: none;
}

/// Progress Ring
#ProgressRingVars {
    @ringColor: @primaryColor;
    @ringDiameter: 3em;
    @ringAnimation: PLAT-SPIN;
    @ringSpinSpeed: 500ms;
    @ringThickness: @ringDiameter / 10;
}

/// Range
#RangeVars {
    @rangeBackgroundColor: @primaryColorPale;
    @rangeFillColor: @primaryColor;
    @knobBorderColor: @rangeFillColor;
    @knobPrimaryColor: @rangeFillColor;
    @knobSecondaryColor: @white;
    @rangeThickness: 1px;
    @knobSize: 2em;
    @knobBorderSize: 1px;
    @rangeTransition: width 300ms;
}
