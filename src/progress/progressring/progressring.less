@import (reference) '../../mixins/helpers.less';
@import (reference) '../../mixins/animations.less';
@import (reference) 'progressring.variables.less';

/// =========== Progress Ring Declarations =========== ///

& {
    #platui > #mixins;
    #platui > #ProgressRing;

    .plat-ring {
        .border-radius(50%);
        .box-sizing(border-box);
        .translateZ(0);
        .animate(@animation-name; @spin-frequency; linear; 0s; infinite);
        display: inline-block;
        position: relative;
        width: @diameter;
        height: @diameter;
        border-left: @thickness solid @fill-color;
        border-top: @thickness solid @unfilled-color;
        border-right: @thickness solid @unfilled-color;
        border-bottom: @thickness solid @unfilled-color;
    }

    .spin();
}

/// =========== Progress Ring Default Styles =========== ///

.plat-ring(@prop: undefined; @value: undefined) {
    #platui > #mixins;

    & when (@prop = undefined), (@value = undefined) {
        .animate(@animation-name; @spin-frequency; linear; 0s; infinite);
        width: @diameter;
        height: @diameter;
        border-left: @thickness solid @fill-color;
        border-top: @thickness solid @unfilled-color;
        border-right: @thickness solid @unfilled-color;
        border-bottom: @thickness solid @unfilled-color;
    }
    & when (@prop = color) {
        @unfilled-color: fade(@value, 10%);
        border-left-color: fade(@value, 80%);
        border-top-color: @unfilled-color;
        border-right-color: @unfilled-color;
        border-bottom-color: @unfilled-color;
    }
    & when (@prop = animation-name) {
        .animation-name(@value);
    }
    & when (@prop = fill-color) {
        &.plat-ring {
            border-left-color: @value;
        }
    }
    & when (@prop = unfilled-color) {
        border-top-color: @value;
        border-right-color: @value;
        border-bottom-color: @value;
    }
    & when (@prop = diameter) {
        width: @value;
        height: @value;
    }
    & when (@prop = thickness) {
        border-width: @value;
    }
    & when (@prop = spin-frequency) {
        .animation-duration(@value);
    }
}
