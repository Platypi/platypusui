@import (reference) '../global/variables.less';

#platui {
    #media {
    /// ======= Globally-Used Media Query Mixins ======== ///

        .media(@type; @condition1; @condition2; @condition3; @condition4; @rules) {
            @media @type and (@condition1) and (@condition2) and (@condition3) and (@condition4) {
                @rules();
            }
        }

        .media(@type; @condition1; @condition2; @condition3; @rules) {
            @media @type and (@condition1) and (@condition2) and (@condition3) {
                @rules();
            }
        }

        .media(@type; @condition1; @condition2; @rules) {
            @media @type and (@condition1) and (@condition2) {
                @rules();
            }
        }

        .media(@type; @condition1; @rules) {
            @media @type and (@condition1) {
                @rules();
            }
        }

        .width(@min-width: 0px; @max-width: 0px; @rules) {
            & when not(@max-width = 0px) {
                & when not(@min-width = 0px) {
                    .media(all; ~'min-width: @{min-width}'; ~'max-width: @{max-width}'; @rules);
                } & when (@min-width = 0px) {
                    .media(all; ~'max-width: @{max-width}'; @rules);
                }
            } & when (@max-width = 0px) {
                & when not(@min-width = 0px) {
                    .media(all; ~'min-width: @{min-width}'; @rules);
                }
            }
        }

        .height(@min-height: 0px; @max-height: 0px; @rules) {
            & when not(@max-height = 0px) {
                & when not(@min-height = 0px) {
                    .media(all; ~'min-height: @{min-height}'; ~'max-height: @{max-height}'; @rules);
                } & when (@min-height = 0px) {
                    .media(all; ~'max-height: @{max-height}'; @rules);
                }
            } & when (@max-height = 0px) {
                & when not(@min-height = 0px) {
                    .media(all; ~'min-height: @{min-height}'; @rules);
                }
            }
        }

        .phone-max(@rules) {
            #platui > #variables;
            .width(@max-width: @phone-end; @rules: @rules);
        }

        .phablet(@rules) {
            #platui > #variables;
            .width(@phablet-start; @rules: @rules);
        }

        .phablet-max(@rules) {
            #platui > #variables;
            .width(@max-width: @phablet-end; @rules: @rules);
        }

        .phablet-only(@rules) {
            #platui > #variables;
            .width(@phablet-start; @phablet-end; @rules);
        }

        .tablet(@rules) {
            #platui > #variables;
            .width(@tablet-start; @rules: @rules);
        }

        .tablet-max(@rules) {
            #platui > #variables;
            .width(@max-width: @tablet-end; @rules: @rules);
        }

        .tablet-only(@rules) {
            #platui > #variables;
            .width(@tablet-start; @tablet-end; @rules);
        }

        .desktop(@rules) {
            #platui > #variables;
            .width(@desktop-start; @rules: @rules);
        }

        .media-width(@minWidth: 0px; @maxWidth: 0px; @rules) {
            & when not(@maxWidth = 0px) {
                & when not(@minWidth = 0px) {
                    .media(all; ~'min-width: @{minWidth}'; ~'max-width: @{maxWidth}'; @rules);
                } & when (@minWidth = 0px) {
                    .media(all; ~'max-width: @{maxWidth}'; @rules);
                }
            } & when (@maxWidth = 0px) {
                & when not(@minWidth = 0px) {
                    .media(all; ~'min-width: @{minWidth}'; @rules);
                }
            }
        }

        .media-height(@minHeight: 0px; @maxHeight: 0px; @rules) {
            & when not(@maxHeight = 0px) {
                & when not(@minHeight = 0px) {
                    .media(all; ~'min-height: @{minHeight}'; ~'max-height: @{maxHeight}'; @rules);
                } & when (@minHeight = 0px) {
                    .media(all; ~'max-height: @{maxHeight}'; @rules);
                }
            } & when (@maxHeight = 0px) {
                & when not(@minHeight = 0px) {
                    .media(all; ~'min-height: @{minHeight}'; @rules);
                }
            }
        }

        .media-phone-max(@rules) {
            #platui > #variables;
            .media-width(@maxWidth: @phone-end; @rules: @rules);
        }

        .media-phablet(@rules) {
            #platui > #variables;
            .media-width(@phablet-start; @rules: @rules);
        }

        .media-phablet-max(@rules) {
            #platui > #variables;
            .media-width(@maxWidth: @phablet-end; @rules: @rules);
        }

        .media-phablet-only(@rules) {
            #platui > #variables;
            .media-width(@phablet-start; @phablet-end; @rules);
        }

        .media-tablet(@rules) {
            #platui > #variables;
            .media-width(@tablet-start; @rules: @rules);
        }

        .media-tablet-max(@rules) {
            #platui > #variables;
            .media-width(@maxWidth: @tablet-end; @rules: @rules);
        }

        .media-tablet-only(@rules) {
            #platui > #variables;
            .media-width(@tablet-start; @tablet-end; @rules);
        }

        .media-desktop(@rules) {
            #platui > #variables;
            .media-width(@desktop-start; @rules: @rules);
        }
    }
}
